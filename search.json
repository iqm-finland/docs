[
  {
    "package": "iqm-pulse",
    "title": "Using ScheduleBuilder",
    "url": "/iqm-pulse/using_builder.html",
    "description": "This section describes how to use ScheduleBuilder to compose pulse schedules.\nScheduleBuilder encapsulates registered QuantumOps, the calibration information for them, QPU components and their\ntopolog...",
    "content": "This section describes how to use ScheduleBuilder to compose pulse schedules.\nScheduleBuilder encapsulates registered QuantumOps, the calibration information for them, QPU components and their\ntopology, and control channel properties. In the context of IQM Pulla and EXA, an instance of ScheduleBuilder is given by the framework,\nand it contains all the necessary information to execute against a particular quantum computer instance.\nHere, we assume that user has an instance of ScheduleBuilder builder to work with. A typical workflow begins with calling get_implementation() with the name of a desired QuantumOp and the locus\nfor the operation.\nThe locus is the logical target of the operation, usually a sequence of qubits or computational resonators.\nThis outputs a an instance of GateImplementation , which is capable of producing TimeBoxes with the correct\ncalibration for that locus. For example, here we ask for the GateImplementation of prx , cz , and measure , all of which are standard\ngates recognized by IQM Pulse, for qubits QB1 and QB3 .\nAny gate which is registered in the runtime can be requested this way. Notice how the number of qubits matches the operation: CZ acts on 2 qubits, while PRX acts on only one.\nMeasure can act on any number of qubits. There might be several available implementations for an operation. get_implementation gives the implementation that is set as the default, unless a specific implementation is\nrequested with a keyword argument. To instantiate some concrete TimeBoxes, we call time implementation with the logical parameters of the operations, as\ndefined by the QuantumOps.\nPRX has 2 parameters: the 2 angles of a phased rotation.\nCZ does not have any parameters. One important method is the wait() , which blocks the control channels of the given components for a certain time: In all of the examples above, the TimeBoxes are atomic, which can be organized into composite TimeBoxes to decide\ntheir relative order. TimeBoxes can be concatenated with the following rules: Addition ( + ) concatenates the children of the operands into a single TimeBox.\nUse addition to allow gates on disjoint loci to execute simultaneously, for example doing a PRX on all qubits. The pipe operation ( | ) groups two TimeBoxes together without concatenating.\nThis results in composite TimeBox with two children, the operands, which are scheduled separately.\nUse the pipe to ensure that certain operations execute before some others. Iterables of TimeBoxes are treated as the sum of the elements. This would execute 2 PRX gates on QB1 and QB2 simultaneously: If the last operator was | instead, the second gate on QB2 would execute only after the first 3 gates. Together, these rules provide a handy way of defining complex circuits easily: A TimeBox are made atomic by resolving it using ScheduleBuilder.resolve_timebox() .\nWhen using a framework like IQM Pulla or Exa, the framework will take care of the resolving as part of compilation,\nso the user does not need to do it explicitly. TimeBoxes are resolved recursively: The children of a TimeBox are resolved, and resulting (sub-)Schedules are aligned\naccording to the SchedulingStrategy (ASAP or ALAP) of the TimeBox.\nThe time duration of a TimeBox is determined by its contents and the way they are scheduled during the resolution.\nFinally, all channels are padded with Waits so that the total duration of Instructions on every channel is equal.\nIn other words, the Schedule becomes a \u201crectangle\u201d. An important part of the scheduling are the blocking rules, that is, whether the contents of two TimeBoxes block or\nslide past each other.\nThe rules are: An atomic TimeBox is considered to act on a component if it has instructions on any of the non-virtual channels\nrelated to that component. A composite TimeBox acts on the union of its children\u2019s locus components. A TimeBox blocks all channels related to any component it acts on. When scheduling two TimeBoxes, the instructions will not overlap in time if the TimeBoxes block overlapping channels. In addition to blocking the channels actually present in a TimeBox, it is possible to block neighbouring channels\nas well (for example in order to limit cross-talk).\nThe applied neighbourhood is specified in ScheduleBuilder.resolve_timebox() .\nThe neighbourhood is defined as an integer such that 0 means \u201cblock only the involved channels\u201d,\n1 means \u201cblock the involved channels and the channels of any neighbouring couplers\u201d,\n2 means \u201cthe same as in (1) but in addition block all channels connected by those couplers\u201d, and so on.\nThe blocking rules do not add actual Wait or Block instructions are added to the neighbourhood channels, and two\noverlapping neighbourhoods do not block each other.\nThe blocking comes in question only when actual content would be added to those neighbourhood channels. In practice, the rules and default GateImplementations ensure that the user can concatenate arbitrary gates\nwithout worrying that the gates have an adverse effect on each other.\nFor example, the pulse of a PRX gate playing at the same time as a CZ gate or a measurement would ruin both operations.\nIf overlapping of such gates is desired, the best way is to arrange the Instructions on the Schedule level and wrap the\nschedule into an atomic TimeBox. Note Virtual channels are special channels that exist only to aid the scheduling algorithm.\nExamples are tracking the phases of the MOVE gate, and timing of fast feedback.\nThese channels are removed when the Playlist is finalized. You are encouraged to discover the many features of ScheduleBuilder and TimeBox by reading the\nAPI: ScheduleBuilder , TimeBox . A quick reference of selected features is provided in the examples below. Finding information about the target system: Working with TimeBoxes: Some typical errors that are easy to make with the syntax: Not calling the implementation to get a TimeBox. The call is easy to forget especially if there are no parameters\nto give: Giving a single component as locus: previous Concepts and Classes next Custom gate implementations \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "Pulse timing",
    "url": "/iqm-pulse/pulse_timing.html",
    "description": "The ReadoutTrigger Instruction responsible of qubit readout has several\ntiming-related attributes.\nThe measure.constant gate implementation produces the lower-level ReadoutTrigger instruction\nfrom a s...",
    "content": "The ReadoutTrigger Instruction responsible of qubit readout has several\ntiming-related attributes.\nThe measure.constant gate implementation produces the lower-level ReadoutTrigger instruction\nfrom a simplified set of settings.\nThe figure below shows how the settings relate to the more flexible attributes of the instruction. With conditional Instructions, we specify how the information from readout operations should affect Instructions at\nruntime.\nUsually, the goal is use the information as soon as possible, but it takes a finite time to propagate from the\nacquisition unit to the drive channels that execute the Instructions conditionally. Note On all hardware supported by IQM QCCSW, ConditionalInstruction reads the signal bit at the time of\nexcution, regardless of when the signal bit was last updated.\nThis means that if the Conditionalinstruction is executed too early, the condition will be executed based on the\nprevious state of the bit. To facilitate efficient timing of the feedback signals, IQM Pulse uses virtual channels between probeline channels\n(the source of the signals) and drive channels (the destinations).\nBlock instructions on the virtual channel represent the travel time of the signals. CCPRX_Composite is GateImplementation of the cc_prx (classically controlled PRX) that outputs two\nTimeBoxes:\nthe first one to represent the travel time, and the second one with the actual ConditionalInstruction .\nIn typical use, both should be scheduled in the same order, to ensure the Conditionalinstrucion starts when the\nsignal bit is available. The following image illustrates how the TimeBoxes are used for qubits QB2 and QB3 .\nFor QB2, this is also how Reset_Conditional implements the reset operation. The equaivalent code would be Instructions are spaced out in time only for visual clarity. When scheduled ASAP, they would be left-aligned\nsuch that the ConditionalInstructions start right after the associated control_delay has passed. The bottom of the image illustrates an alternative use of CCPRX_Composite to have more freedom in the timing.\nThere, the optional delay TimeBox is not used for scheduling the Instructions on QB4.\nInstead, the user has ensured that the other instructions take enough time for the signal to arrive.\nThis could be used to act on the previous feedback signal (not shown). Note This section is not about IQM Pulse itself, but might help in understanding the details of the execution. The image below shows a typical timing of a Playlist segment with 2 AWG devices for driving, and a readout instrument.\nHere, all statements that apply to an AWG apply to readout instruments as well.\nThe AWGs can output an arbitrary sequence of pulses, and the readout instrument can additionally read out\nthe response to the pulses. With readout, the raw signal response from the readout pulse will be integrated to produce a single number, such as a\ncomplex number or a bit, corresponding to a particular qubit in a particular segment. In the figure, one of the AWGs has been selected as the trigger master, which means it sends trigger pulses to\nstart the execution on the slave devices.\nAs shown in the picture, different delays caused by the travel time of signals can be compensated for by\nadjusting the trigger_delay setting of each device. Settings in the figure that can be adjusted by user in the higher level libraries: Setting Explanation <awg>.trigger_delay Wait time between the end of the trigger signal of the AWG master and the beginning of the pulse sequence. <awg>.trigger_delay (slave) Wait time between receiving the trigger signal at the AWG slave and the beginning of the pulse sequence. options.end_delay Wait time between the end of the pulse segment and the next trigger. <gate>.<implementation>.<locus>.duration The duration of the hardware instruction for a gate, possibly rounded to satisfy granularity constraints.\nFor the ReadoutTrigger instruction, the meaning is different, see below. Other notes: The AWG spcecified by options.trigger_master is the only channel that does not wait for a trigger\nat the start of a segment. Slave AWGs may also emit a trigger pulse to allow daisy chaining trigger signals. Systems with IQM Control System are triggered centrally and the channels run independently, and the options.trigger_master has no effect. Pipeline delays are delays between the execution of a command and the pulse actually getting outputted\nfrom a device. This delay is caused by the hardware and cannot be changed.\nIn practice, it can be thought as being part of the cable delays, and thus can be compensated with trigger_delay setting. previous Custom gate implementations next API Reference \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "References",
    "url": "/iqm-pulse/references.html",
    "description": "John\u00a0M. Martinis and Michael\u00a0R. Geller. Fast adiabatic qubit gates using only $\\sigma _z$ control. Phys. Rev. A , 90:022307, Aug 2014. arXiv:1402.5467 , doi:10.1103/PhysRevA.90.022307 . R.\u00a0G. Lyons. U...",
    "content": "John\u00a0M. Martinis and Michael\u00a0R. Geller. Fast adiabatic qubit gates using only $\\sigma _z$ control. Phys. Rev. A , 90:022307, Aug 2014. arXiv:1402.5467 , doi:10.1103/PhysRevA.90.022307 . R.\u00a0G. Lyons. Understanding Digital Signal Processing . Prentice Hall, 2nd edition, 2004. ISBN 978-0131089891. Cecilia\u00a0Gisele Jarne. A heuristic approach to obtain signal envelope with a simple software implementation. ANALES AFA , 29(2):51\u201357, 2018. arXiv:1703.06812 , doi:10.31527/analesafa.2018.29.2.51 . Eyob\u00a0A. Sete, Nicolas Didier, Angela\u00a0Q. Chen, Shobhan Kulshreshtha, Riccardo Manenti, and Stefano Poletto. Parametric-resonance entangling gates with a tunable coupler. Phys. Rev. Appl. , 16:024050, Aug 2021. arXiv:2104.03511 , doi:10.1103/PhysRevApplied.16.024050 . Youngkyu Sung, Leon Ding, Jochen Braum\u00fcller, Antti Veps\u00e4l\u00e4inen, Bharath Kannan, Morten Kjaergaard, Ami Greene, Gabriel\u00a0O. Samach, Chris McNally, David Kim, Alexander Melville, Bethany\u00a0M. Niedzielski, Mollie\u00a0E. Schwartz, Jonilyn\u00a0L. Yoder, Terry\u00a0P. Orlando, Simon Gustavsson, and William\u00a0D. Oliver. Realization of high-fidelity CZ and ZZ-free iSWAP gates with a tunable coupler. Phys. Rev. X , 11:021058, Jun 2021. arXiv:2011.01261 , doi:10.1103/PhysRevX.11.021058 . previous Changelog next License \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "Concepts and Classes",
    "url": "/iqm-pulse/concepts.html",
    "description": "This section gives an overview of the main concepts and terminology in IQM Pulse. QPUs contain components : qubits, computational resonators, couplers, and probelines. Each component may have some con...",
    "content": "This section gives an overview of the main concepts and terminology in IQM Pulse. QPUs contain components : qubits, computational resonators, couplers, and probelines. Each component may have some control channels connected to it. Control channels deliver physical control pulses\nto the QPU. Quantum operations have a locus , which is the set of quantum information carrying components\n(qubits and resonators) the operation acts on.\nOne operation may involve sending pulses to multiple control channels. The assembly of a Playlist, or a batch of quantum circuits, can be summarized as follows: A Playlist contains multiple independent segments , to be executed as a batch. A segment is a conceptual unit at a time scale where the quantum information of the QPU can be\nassumed to be preserved. A quantum circuit corresponds to one segment. What is executed during a segment is determined by a Schedule . A Schedule is a set of hardware control channels, each with a strictly timed sequence of Instructions . A Schedule is formed by scheduling a Timebox . A TimeBox can contain other TimeBoxes without precise relative timing,\nor it can be atomic, in which case it contains a single Schedule . The image below illustrates how a Playlist of two segments is formed from TimeBoxes. Hardware instructions are the lowest-level construct visible on the client side.\nInstructions are a set of atomic, real-time execution commands for the control hardware supported by IQM.\nThey work in a time scale where the quantum information of the QPU can be assumed to be preserved.\nExamples of Instructions are IQPulse to play a microwave pulse on a channel, VirtualRZ to adjust the modulation phase, ReadoutTrigger to acquire measurement data,\nand Wait to delay the next Instruction for a given time.\nSee iqm.pulse.playlist.instructions for the complete list. During execution, each hardware control channel executes its own sequence of Instructions.\nEach Instruction blocks the next until it is completed.\nInstructions are as explicit as possible, so that there is no ambiguity on what will be executed when.\nIQM Station control transforms Instructions to machine-specific commands. All Instructions have a duration, measured in samples, though the duration can be zero.\nThe durations are subject to hardware-specific granularity constraints.\nFor example, some hardware might require all instructions to be a multiple of 16 samples long, with a minimum of 32.\nInstructions violating the granularity constraints will raise an error.\nHowever, a typical user does not need to concern themselves about the constraints, as\nthe gate implementations and IQM Pulse\u2019s scheduling ensures the constraints are respected.\nThe philosophy is that Station Control, which is inaccessible to the user, does not attempt to do any smart\n\u201cmagic\u201d to fix inconsistencies in the user\u2019s input, it simply executes the Playlist it is given.\nInstead, the magic happens on the client side so that it is transparent to the user. Note For technical reasons, IQM Pulse mostly uses classes from iqm.pulse.playlist.instructions , but when\nfinalizing the output, the instructions are converted to iqm.models.playlist.instructions .\nThese two class families are semantically equivalent, apart from a few exceptions like Block which\nonly exists on the client side to help with scheduling. Schedule contains a number of control channels, each with a lists of Instructions.\nAll channels in a Schedule start executing at the same instant, and the timing is defined by the duration of the\nindividual Instructions.\nSchedules can be thought of as a fixed block that occupies some interval on a timeline of some channels. Schedules appear in two contexts: gate implementations and as complete segments.\nFor example, when an implementation of a PRX gate is requested,\na small Schedule involving the drive channel of a single qubit is created.\nWhen all the desired gates in a circuit have been scheduled by concatenating the gate-schedules together,\nthe end result, a segment, is a large Schedule occupying all necessary channels.\nA typical segment starts with initializing the qubits and ends with reading out their state. Whereas a Schedule is a container with strict relative timing, a TimeBox is a container with undefined\nrelative timing.\nEach TimeBox can be labeled using a human-readable label describing it, and operates on a number\nof locus components , using some of their control channels.\nA composite TimeBox contains other TimeBoxes as children, whereas atomic TimeBoxes contain a Schedule. TimeBoxes are the main language in which users define the order and relative alignment of execution elements, be it\ngates, Schedules, or larger TimeBoxes. A key process is the scheduling, in which TimeBoxes are resolved recursively into a fixed Schedule.\nWhen resolving, all Schedules inside the TimeBox are concatenated and are either left-aligned (ASAP) or right-aligned\n(ALAP), respecting the hardware constraints.\nImportantly, if some TimeBoxes have content on disjoint channels, the Schedules are allowed to happen simultaneously.\nIf they have content on partly overlapping channels, the Schedules are concatenated while preserving their internal\ntiming.\nAny interval that does not have explicit instructions is filled with Wait Instructions.\nThe figure above demonstrates how TimeBoxes are resolved. The syntax and rules are explained in more detail in Using ScheduleBuilder . A higher-level concept, a QuantumOp can represent a unitary quantum gate,\nor for example a measurement operation (not all QuantumOps necessarily represent a unitary gate).\nQuantumOps are simple, abstract, self-contained actions one can execute on a station as parts of a quantum circuit.\nThey include quantum gates like PRX, CZ, and measurements and resets.\nWhereas Schedules and Instructions act on control channels, QuantumOps act on named components on the QPU, such as\nqubits or computational resonators. A QuantumOp has unambiguous definition in terms of its intended effect on the computational subspace of the\nQPU component, but it can be implemented in various ways.\nEach implementation is represented as a GateImplementation. The list of available QuantumOps at runtime can be obtained with iqm.pulse.builder.build_quantum_ops() .\nA new QuantumOp can be registered at runtime, together with an implementation, with iqm.pulse.gates.register_implementation() . A GateImplementation bridges the gap between QuantumOps and TimeBoxes.\nWhen a user requests a QuantumOp from ScheduleBuilder with specific parameters and locus components, the\nchosen GateImplementation (usually the default) for the operation is used to produce a TimeBox.\nThis TimeBox, usually atomic, contains a Schedule on the appropriate control channels.\nThe Instructions within are constructed following the calibration values from the ScheduleBuilder. All gate implementations are listed in iqm.pulse.gates .\nSection Custom gate implementations explains how to add more implementations. Once all TimeBoxes are scheduled into large Schedules, one for each segment/circuit,\nthe Schedules are collected into a Playlist .\nThe Playlist is the final product that is sent to Station Control.\nIts contents are compressed by indexing all unique Instructions and waveforms on each channel,\nand representing the control channels in each segment as lists of Instruction indices. During execution, the segments in the Playlist are executed in order, and the whole sequence is repeated\na number of times equal to the number of repetitions (shots). Segments are separated in time by end delay , a parameter outside the Playlist.\nA long end delay can be used to prevent quantum information carrying from one segment to the next,\nthus resetting the qubits.\nAlternatively, the reset can be encoded in each segment as a long Wait instruction or using some active reset scheme. Station Control aims to execute all segments together, but sometimes this is not possible due to various memory\nconstraints.\nIn case the whole Playlist does not fit in memory, the segments are split into chunks which are executed separately.\nThe delay between chunks is undefined.\nTherefore, the time between segments is guaranteed to be at least the duration of the end delay, but can be much larger. inspect_playlist() provides a neat visual representation of the playlist, as blocks of instructions on a\ntimeline. previous IQM Pulse next Using ScheduleBuilder \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "API Reference",
    "url": "/iqm-pulse/API.html",
    "description": "iqm.pulse Control pulses and pulse sequences for quantum processors. previous Pulse timing next pulse \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04....",
    "content": "iqm.pulse Control pulses and pulse sequences for quantum processors. previous Pulse timing next pulse \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "IQM Pulse",
    "url": "/iqm-pulse/index.html",
    "description": "7.19 2025-02-04 IQM Pulse provides an abstraction that transforms high-level quantum circuit operations\nto a unified set of lower-level instructions for IQM quantum computers. A quantum circuit is an ...",
    "content": "7.19 2025-02-04 IQM Pulse provides an abstraction that transforms high-level quantum circuit operations\nto a unified set of lower-level instructions for IQM quantum computers. A quantum circuit is an abstract mathematical construct which conveniently hides all implementation\ndetails such as the timing of microwave pulses, waveform shapes, sampling rates, signal capture, and so on.\nBut in order to execute a circuit you need to convert it into a schedule of hardware instructions which involve\nall of the above. IQM Pulse provides a framework for defining abstract quantum gates/operations, as well as their concrete implementations in terms of hardware instructions machinery to easily construct circuit-level gate sequences, and compile them into instruction schedules. a set of ready-made gates with implementations. IQM Pulse is not a standalone tool, but is used in IQM\u2019s client libraries, IQM Pulla and Exa.\nTo use them effectively, you are encouraged to familiarize yourself with IQM Pulse, especially the most common\nconcepts. Index Module Index Search Page next Concepts and Classes \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "Custom gate implementations",
    "url": "/iqm-pulse/custom_gates.html",
    "description": "Quantum gates are represented by QuantumOp data classes, containing the required\nmetadata to define the gate. A QuantumOp is identified by its name , and arity defines number of locus components the o...",
    "content": "Quantum gates are represented by QuantumOp data classes, containing the required\nmetadata to define the gate. A QuantumOp is identified by its name , and arity defines number of locus components the operation acts on. For example,\nthe PRX operation (Phased X Rotation) is a single-qubit operation, so its arity is 1, whereas the CZ (Controlled-Z) gate\nacts on two qubits, having arity 2. Arity 0 has a special meaning that the operation in question can act on any number\nof components (for example Barrier ). The attribute symmetric defines whether the effect of the quantum operation\nis symmetric with respect to changing the order of its locus components. As an example, the CZ gate is a symmetric\ntwo-qubit gate, whereas CNOT (Controlled-NOT) is not symmetric. Some quantum operations are defined as \u201cfunctions\u201d, taking one or more parameters to define the effect. These\narguments are stored in the attribute params . As an example, the PRX gate\ntakes two arguments, angle (the rotation angle with respect to the z-axis of the Bloch sphere), and phase (the rotation phase in the rotating frame). On the other hand, many operations do not require any parameters, in\nwhich case this field is an empty tuple (e.g. the CZ gate). A QuantumOp has unambiguous definition in terms of its intended effect on the computational subspace of the\nQPU component, but it can be implemented in various ways. Each implementation is represented as a GateImplementation subclass. A QuantumOp stores its known implementations in the\nfield implementations . Note that even though QuantumOp is a frozen data class, the implementations dictionary can be modified, e.g.\nto add new implementations or to change their order (usually programmatically by some client procedure, but nothing as\nsuch prevents the user from manipulating the contents manually). The default implementation is how the user prefers\nto implement the operation unless otherwise specified (in effect, this is what will get called in most cases the\noperation is invoked). In the implementations dict, the default implementation is defined as the first entry.\nQuantumOp contains helpful methods that allow setting and returning the default implementation for specific cases: set_default_implementation() , get_default_implementation_for_locus() , and set_default_implementation_for_locus() . The attribute unitary stores a function that can be used to get the unitary\nmatrix representing the quantum operation in question. The unitary function must have the same arguments\nas defined in params , such that for each collection of these parameters it\ngives the associated unitary matrix. Note that not all QuantumOps necessarily even represent a unitary gate (e.g.\nthe measure operation is not one), or the exact form of the unitary matrix might not be known. In these cases, the\nfield can be left None . The unitary does not need to be defined for most of the basic usage of a QuantumOp, but certain\nalgorithmic methods (e.g. some implementations of Randomized Benchmarking) may require the unitary matrices to be known,\nand such operations that do not define the getter function cannot then be used in these contexts. For more information, see the API docs of QuantumOp for the full list of fields needed\nto define a quantum operation and the available class methods. While QuantumOp represents an abstract quantum operation, its implementations contain\nthe concrete logic of how to make that operation happen using QC hardware. Gate implementations are subclasses of GateImplementation . In this section, the main features of that class are\nintroduced (for a full list of class methods see the API docs), with the emphasis being on how to create your own\ngate implementations. Starting with __init__() , it is important to note that the init\nmethods of all gate implementations must have the exact same signature: Here, parent is the QuantumOp this gate implementation implements, and name is the implementation\u2019s name in\nthe dictionary implementations . locus is the set of (usually logical) components\nthe QuantumOp acts on (the size of the locus must be consistent with the parent \u2019s arity ), while calibration_data gives the required calibration data values\nfor this implementation and locus (can be empty in case the implementation needs no calibration data). Finally,\nThe implementations store a reference to the ScheduleBuilder that created it. This is\nbecause GateImplementations are practically never created manually by calling the init method itself. Instead, one\nneeds a builder and uses get_implementation() . The responsibility of the init method is to (at least) store the calibration_data provided from the builder for\nfurther use, but in many cases, one might want to create some intermediate objects like pulses or instructions from that calibration data already at this point. Note that ScheduleBuilder caches its GateImplementations per each locus and calibration_data , so as long as the calibration is not changed, the code in init will be called just once per locus. GateImplementations are Callables, i.e. they implement the __call__ method. It should take as its arguments at least\nthe QuantumOpt parameters defined for the parent in params , but in\naddition it may have optional extra arguments. The call method should return a TimeBox object\nthat contains the pulses, instructions and other logic required to implement the quantum operation in question. The\ntypical usage of gate implementations then looks like this (See Using ScheduleBuilder and Pulse timing for more\ninfo on scheduling and the ScheduleBuilder): The base class __call__() method does automatic TimeBox caching based\non the unique values of the call arguments, and in many cases, one does not want to reimplement this caching in their own\nimplementations. For this reason, there is the method _call which contains just the pure TimeBox creation logic.\nDevelopers can choose to override that instead of __call__ in cases where the call args are hashable python types,\nand then they can utilize the default caching of TimeBoxes from the base class. When writing a GateImplementation, a developer should consider what parts of the logic should go to the class init and\nwhat to the __call__ or _call method. A general rule of thumb would be that any parts that can be precomputed\nand do not depend on the call arguments can go to init, and the rest to call. As an example, let\u2019s go through a simple PRX _call method (note that the default PRX implementations do not\nuse this exact call method, as this is a simplified example for educational purposes): Here, we first create an IQPulse object which is a low-level Instruction. IQPulse\nmeans a \u201ccomplex pulse\u201d which has two orthogonal components i and q \u2013 this what drive pulses look like in general. In\nthis simplified example, we have hardcoded the pulse waveforms into TruncatedGaussian and TruncatedGaussianDerivative for the i and q components, respectively (this is a DRAG implementation, so the\nq component is the derivative of the i component). The waveforms are parametrized by the calibration_data for the\ngiven locus (see the next subsection for more info on Waveforms and calibration data). The PRX QuantumOp param angle scales the pulse amplitude linearly (the waveforms are normalized to one), and the param phase defines relative\nphase modulation. Then the returned TimeBox is created out of the instruction . Note that\nsince we override _call here, instead of __call__ , so this implementation would utilize the default base class\ncaching such that the TimeBoxes are cached per unique values of (angle, phase) . Another important concept is a the so called locus mapping of a gate implementation. Locus mappings define on which\nloci, i.e. groups of components, a given implementation can be defined. They are used to relay the information which\nloci are supported to a client application (e.g. EXA). In addition, the gate implementation itself can programmatically\nuse this information self.builder.chip_topology . For example, a PRX can be defined on all single components that are connected to a drive line, and CZ can be defined on\nconnected pairs of qubits. Locus mappings live in ScheduleBuilder.chip_topology which is a ChipTopology object. Locus mapping is a dict whose keys are the loci\n( tuple[str, ...] keys denote asymmetric loci where the order of the components matter, and frozenset[str] type\nloci denote symmetric ones), and the values are groups of components, typed tuple[str, ...] , where each locus can be\nmapped with some additional components that are needed for the operation of the implementation. For example, some CZ\nimplementation that tries to correct for crosstalk could map the non-locus components that see this crosstalk here.\nThe values of the dict can be left empty or just replicate the key components in case such extra information is not\nneeded. GateImplementations can define their locus mappings via get_custom_locus_mapping() or if a client application already\nadds the mapping, we can just return its name via get_locus_mapping_name() .\nIf neither of these methods are overridden in a GateImplementation class, the default behaviour will be such that an arity==1 loci will be assumed to use the mapping where all single qubits are the keys, and arity==2 loci the\n(symmetric) mapping where the keys are all pairs of connected qubits. For other arities there is no default behaviour,\nso it is then mandatory to define the mapping explicitly using the aforementioned methods. In order to implement most QuantumOps, one has to physically alter the state of the QPU. This is typically done by playing\nspecified and correctly calibrated pulses via the control electronics (this applies to all typical logical gates such as\ne.g. PRX or CZ \u2013 non-physcial metaoperations such as Barrier are an exception). In defining these pulses, there are two\nlevels of abstractions: Waveform and Instruction . Waveform represents the physical form of the control pulse, typically normalized to the interval [-1.0, 1.0] . The\nEach Waveform subclass can define any number of waveform parameters as class\nattributes, which can be used to programmatically define the waveform. For example, a Gaussian could be defined in terms\nof the average mu and spread sigma . A Waveform class then essentially contains just the parameters\nand a recipe for computing the samples as an np.ndarray . As an example, here is how one writes the Waveform class\nfor Gaussian : The Instructions RealPulse and IQPulse allow handling the amplitudes (via the attribute scale ) without\nhaving to resample the waveform for every different amplitude value. However, one can always choose to include\nthe amplitude into the sampling and then use scale=1 . The waveform parameters (like sigma in the above Gaussian) typically require calibration when the Waveform is used\nin a quantum gate. However, the GateImplementation usually has other calibrated parameters as well defined in the\nimplementation itself. As an example, here are the implementation-level parameters of the default PRX implementation,\ndefined as class attribute: Note the amplitudes are defined here on this level, since the default PRX uses normalized Waveforms and factors in the\namplitudes via scale . In these parameters, the unit is not just metadata. The control electronics understand time\nin terms of samples and their sample rate, while human users typically want to input seconds instead of doing the sample\nconversion manually. For this reason, there is logic that converts anything that has the unit \"s\" into samples.\nSimilarly, parameters with \"Hz\" units are converted to 1/sample . For the Waveform parameters, the same logic\napplies, but by default it is assumed that all parameters are time-like and this converted from seconds to samples.\nIf some Waveform parameters needs to be made unitless or e.g. frequency-like (with \"Hz\" units), it can be achieved\nwith the method non_timelike_attributes() : In the above dict, the keys should be the attribute names and values their units. To make creating new GateImplementations more comfortable, there are additional base classes on top of GateImplementation itself. CompositeGate allows quick implementation of gates in terms of other gates,\nusing a similar syntax as with creating/scheduling several TimeBoxes together (see Using ScheduleBuilder ). At it\nsimplest, a ComposteGate is just the _call method: Here, one could use also builder.get_implementation instead of build() , but the latter allows calibrating the member gates\ncase specifically for this composite if they are first registered via registered_gates (in this case, there is\njust one member, PRX). Creating new implementations for the PRX, CZ and Measure gates often means just coming up with new waveforms for the\ncontrol pulses. If this is the case, there are helpful base classes that make those implementations into oneliners\n(outside of defining the Waveforms themselves): PRX_CustomWaveforms , FluxPulseGate , and Measure_CustomWaveforms . Using these\nbase classes at its simplest looks like this: All of these classes automatically include the associated Waveform parameters into the calibration parameters of\nthe implementation itself. There is also a general base class for any gate that implements a single IQPulse (both PRX_CustomWaveForms and Measure_MyCoolWaveforms actually inherit from it), regardless of the context: CustomIQWaveforms . Gate definitions (i.e. QuantumOps) are stored in ScheduleBuilder \u2019s attribute op_table . When the builder is created, the op_table comes preloaded with the all the basic QuantumOps needed for\ntypical circuit execution and their default implementations. These include e.g. the PRX gate, the CZ gate, the measure\noperation, the conditional prx operation, the reset operation, and the barrier operation. In order to add custom operations, there is a helpful function register_implementation() that\nin addition to adding new implementations allows one to add altogether new quantum operations. As an example here is a snippet that adds the CNOT gate, and its implementation, into an existing builder: Here, the CNOT implementation MyCNotClass needs to be of course defined first (a QuantumOp always needs at least one\nimplementation). Note that often ScheduleBuilder is created and operated by some client application, and the same application usually\nhas its own interface for adding/manipulating QuantumOps. However, if the user has access to the builder object, the\nabove method will always work. previous Using ScheduleBuilder next Pulse timing \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "CosineRiseFallDerivative",
    "url": "/iqm-pulse/api/iqm.pulse.playlist.waveforms.CosineRiseFallDerivative.html",
    "description": "Bases: Waveform Derivative of a waveform that has a sinusoidal rise and fall, and a constant part in between. where \\(c\\) is center_offset , \\(r\\) is rise_time , and \\(p\\) is the plateau width,\ncalcul...",
    "content": "Bases: Waveform Derivative of a waveform that has a sinusoidal rise and fall, and a constant part in between. where \\(c\\) is center_offset , \\(r\\) is rise_time , and \\(p\\) is the plateau width,\ncalculated via \\(p :=\\) full_width - 2 * rise_time . Its values are in \\([-1, 1]\\) . full_width ( float ) \u2013 Duration of the support of the pulse, >= 2 * rise_time . rise_time ( float ) \u2013 Duration of the sinusoidal rise (and fall) part of the waveform, >= 0. center_offset ( float ) \u2013 The waveform is centered at this offset from the midpoint of the sampling window. n_samples ( int ) \u2013 Module: iqm.pulse.playlist.waveforms Attributes center_offset  full_width  rise_time  n_samples Requested number of samples for the waveform. Methods Actually samples the waveform. sample_coords ( ndarray ) \u2013 coordinates of the samples to be returned array of samples (same shape as sample_coords , dtype == float ) ndarray previous Cosine next ModulatedCosineRiseFall \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.quantum_ops.validate_op_calibration",
    "url": "/iqm-pulse/api/iqm.pulse.quantum_ops.validate_op_calibration.html",
    "description": "Validates quantum operation calibration data against the known quantum operations. NOTE: calibration data parameters that have a defined default value are not required to be in the calibration data. c...",
    "content": "Validates quantum operation calibration data against the known quantum operations. NOTE: calibration data parameters that have a defined default value are not required to be in the calibration data. calibration ( OpCalibrationDataTree ) \u2013 quantum operation calibration data tree to validate ops ( QuantumOpTable ) \u2013 known quantum operations and their implementations ValueError \u2013 there is something wrong with the calibration data None previous iqm.pulse.quantum_ops.validate_locus_calibration next QuantumOp \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "playlist",
    "url": "/iqm-pulse/api/iqm.pulse.playlist.playlist.html",
    "description": "Sequences of instruction schedules to execute. Full path: iqm.pulse.playlist.playlist previous Wait next schedule \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04....",
    "content": "Sequences of instruction schedules to execute. Full path: iqm.pulse.playlist.playlist previous Wait next schedule \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "CZ_CRF",
    "url": "/iqm-pulse/api/iqm.pulse.gates.cz.CZ_CRF.html",
    "description": "Bases: FluxPulseGate CZ gate using a CosineRiseFall flux pulse on the coupler. Module: iqm.pulse.gates.cz Attributes parameters Required calibration data, may be nested qubit_wave Flux pulse Waveform ...",
    "content": "Bases: FluxPulseGate CZ gate using a CosineRiseFall flux pulse on the coupler. Module: iqm.pulse.gates.cz Attributes parameters Required calibration data, may be nested qubit_wave Flux pulse Waveform to be played in the qubit flux AWG. symmetric True iff the implementation is symmetric in its locus components. Methods parent ( QuantumOp ) \u2013 name ( str ) \u2013 locus ( Locus ) \u2013 calibration_data ( OILCalibrationData ) \u2013 builder ( ScheduleBuilder ) \u2013 alias of CosineRiseFall Required calibration data, may be nested Flux pulse Waveform to be played in the qubit flux AWG. True iff the implementation is symmetric in its locus components.\nOnly meaningful if arity != 1 , and the locus components are of the same type. previous cz next CZ_CRF_ACStarkCRF \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "PRX_GateImplementation",
    "url": "/iqm-pulse/api/iqm.pulse.gates.prx.PRX_GateImplementation.html",
    "description": "Bases: GateImplementation ABC for different implementations of the PRX gate. Module: iqm.pulse.gates.prx Attributes Methods clifford One-qubit XY Clifford gates. get_locus_mapping_name Get the name of...",
    "content": "Bases: GateImplementation ABC for different implementations of the PRX gate. Module: iqm.pulse.gates.prx Attributes Methods clifford One-qubit XY Clifford gates. get_locus_mapping_name Get the name of the locus mapping stored in ScheduleBuilder.ChipTopology for this implementation. rx X rotation gate. ry Y rotation gate. parent ( QuantumOp ) \u2013 name ( str ) \u2013 locus ( Locus ) \u2013 calibration_data ( OILCalibrationData ) \u2013 builder ( ScheduleBuilder ) \u2013 Phased x rotation gate. angle ( float ) \u2013 rotation angle (in radians) phase ( float ) \u2013 phase angle (in radians) boxed instruction schedule implementing the phased x rotation gate TimeBox X rotation gate. angle ( float ) \u2013 rotation angle (in radians) boxed instruction schedule implementing the x rotation gate TimeBox Y rotation gate. angle ( float ) \u2013 rotation angle (in radians) boxed instruction schedule implementing the y rotation gate TimeBox One-qubit XY Clifford gates. xy_gate ( XYGate ) \u2013 Clifford gate boxed instruction schedule implementing the requested Clifford gate TimeBox Get the name of the locus mapping stored in ScheduleBuilder.ChipTopology for this implementation. By default, it is \"<operation_name>.<implementation_name>\" . Inheriting classes may\noverride this for different behaviour. operation_name ( str ) \u2013 name of the quantum operation. implementation_name ( str ) \u2013 name of the implementation name of the locus mapping str previous PRX_DRAGGaussianSX next PRX_SinglePulse_GateImplementation \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.playlist.channel.get_channel_properties_from_station_settings",
    "url": "/iqm-pulse/api/iqm.pulse.playlist.channel.get_channel_properties_from_station_settings.html",
    "description": "Get channel properties from Station Control controller settings following the standard convention. settings ( SettingNode ) \u2013 Flat tree of all controllers. chip_topology ( ChipTopology ) \u2013 Chip topolo...",
    "content": "Get channel properties from Station Control controller settings following the standard convention. settings ( SettingNode ) \u2013 Flat tree of all controllers. chip_topology ( ChipTopology ) \u2013 Chip topology. mapping from channel name to its properties\ncomponent_to_channel: mapping from chip component to function name to channel name. channel_properties previous iqm.pulse.playlist.channel.get_channel_properties next ChannelConfiguration \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.playlist.channel.get_channel_properties",
    "url": "/iqm-pulse/api/iqm.pulse.playlist.channel.get_channel_properties.html",
    "description": "Internal function to get channel properties. chip_topology ( ChipTopology ) \u2013 drive_controllers ( dict [ str , SettingNode ] ) \u2013 flux_controllers ( dict [ str , SettingNode ] ) \u2013 readout_controllers (...",
    "content": "Internal function to get channel properties. chip_topology ( ChipTopology ) \u2013 drive_controllers ( dict [ str , SettingNode ] ) \u2013 flux_controllers ( dict [ str , SettingNode ] ) \u2013 readout_controllers ( dict [ str , SettingNode ] ) \u2013 tuple [ dict [ str , ChannelProperties ], dict [ str , dict [ str , str ]]] previous channel next iqm.pulse.playlist.channel.get_channel_properties_from_station_settings \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "Measure_Constant",
    "url": "/iqm-pulse/api/iqm.pulse.gates.measure.Measure_Constant.html",
    "description": "Bases: Measure_CustomWaveforms Implementation of a single-qubit projective, dispersive measurement in the Z basis. Uses a constant probe pulse. Module: iqm.pulse.gates.measure Attributes dependent_wav...",
    "content": "Bases: Measure_CustomWaveforms Implementation of a single-qubit projective, dispersive measurement in the Z basis. Uses a constant probe pulse. Module: iqm.pulse.gates.measure Attributes dependent_waves If set True , the Q channel waveform is considered to depend on the I channel's waveform so that they share the waveform parameters, (e.g. a DRAG PRX implementation). parameters Required calibration data, may be nested Methods parent ( QuantumOp ) \u2013 name ( str ) \u2013 locus ( Locus ) \u2013 calibration_data ( OILCalibrationData ) \u2013 builder ( ScheduleBuilder ) \u2013 If set True , the Q channel waveform is considered to depend on the I channel\u2019s waveform\nso that they share the waveform parameters, (e.g. a DRAG PRX implementation). If not provided,\nwill be initialised as True . Required calibration data, may be nested alias of Constant alias of Constant previous measure next Measure_CustomWaveforms \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.gate_implementation.get_waveform_parameters",
    "url": "/iqm-pulse/api/iqm.pulse.gate_implementation.get_waveform_parameters.html",
    "description": "Parameters that are required to initialize the given Waveform class. n_samples is handled separately since it is determined by the Instruction duration\nand channel sample rate, and thus is shared by a...",
    "content": "Parameters that are required to initialize the given Waveform class. n_samples is handled separately since it is determined by the Instruction duration\nand channel sample rate, and thus is shared by all the waveforms of the Instruction. wave ( type [ Waveform ] ) \u2013 waveform class label_prefix ( str ) \u2013 optional prefix for the parameter labels for providing additional information parameters of wave , in the format expected by GateImplementation.parameters . Waveform parameters\nthat have a defined default will be returned as Setting objects and those that do not have default\nas Parameter objects. dict [ str , Setting | Parameter] previous iqm.pulse.gate_implementation.PROBE_LINES_LOCUS_MAPPING next CompositeCache \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "rz",
    "url": "/iqm-pulse/api/iqm.pulse.gates.rz.html",
    "description": "Single-qubit RZ gate. The z rotation gate is defined as where the rotation angle \\(\\phi\\) is in radians. Full path: iqm.pulse.gates.rz Functions get_unitary_rz (angle) Unitary for an RZ gate. Classes ...",
    "content": "Single-qubit RZ gate. The z rotation gate is defined as where the rotation angle \\(\\phi\\) is in radians. Full path: iqm.pulse.gates.rz Functions get_unitary_rz (angle) Unitary for an RZ gate. Classes RZ_ACStarkShift Implementation of the RZ gate using an AC Stark pulse. RZ_ACStarkShift_CosineRiseFall AC stark pulse implemented as a modulated cosine rise fall pulse. RZ_Virtual Implementation of the RZ gate using the virtual z rotation technique. Inheritance previous Reset_Wait next iqm.pulse.gates.rz.get_unitary_rz \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "PRX_DRAGGaussian",
    "url": "/iqm-pulse/api/iqm.pulse.gates.prx.PRX_DRAGGaussian.html",
    "description": "Bases: PRX_CustomWaveforms PRX gate, DRAG / TruncatedGaussian IQ pulse implementation. See PRX_CustomWaveforms . Module: iqm.pulse.gates.prx Attributes dependent_waves If set True , the Q channel wave...",
    "content": "Bases: PRX_CustomWaveforms PRX gate, DRAG / TruncatedGaussian IQ pulse implementation. See PRX_CustomWaveforms . Module: iqm.pulse.gates.prx Attributes dependent_waves If set True , the Q channel waveform is considered to depend on the I channel's waveform so that they share the waveform parameters, (e.g. a DRAG PRX implementation). parameters Required calibration data, may be nested Methods parent ( QuantumOp ) \u2013 name ( str ) \u2013 locus ( Locus ) \u2013 calibration_data ( OILCalibrationData ) \u2013 builder ( ScheduleBuilder ) \u2013 If set True , the Q channel waveform is considered to depend on the I channel\u2019s waveform\nso that they share the waveform parameters, (e.g. a DRAG PRX implementation). If not provided,\nwill be initialised as True . Required calibration data, may be nested alias of TruncatedGaussian alias of TruncatedGaussianDerivative previous PRX_DRAGCosineRiseFallSX next PRX_DRAGGaussianSX \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "TimeTrace",
    "url": "/iqm-pulse/api/iqm.pulse.playlist.instructions.TimeTrace.html",
    "description": "Bases: AcquisitionMethod Capture the raw IQ signal without integration. Module: iqm.pulse.playlist.instructions Attributes duration_samples Length of the capture window, in samples. label Identifier f...",
    "content": "Bases: AcquisitionMethod Capture the raw IQ signal without integration. Module: iqm.pulse.playlist.instructions Attributes duration_samples Length of the capture window, in samples. label Identifier for the returned data, like QB1__readout.time_trace . delay_samples Delay from beginning of probe pulse to beginning of acquisition window, in samples. Methods label ( str ) \u2013 delay_samples ( int ) \u2013 duration_samples ( int ) \u2013 Length of the capture window, in samples. previous ThresholdStateDiscrimination next VirtualRZ \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "TwoQubitGate",
    "url": "/iqm-pulse/api/iqm.pulse.gates.enums.TwoQubitGate.html",
    "description": "Bases: Enum Enumerates a subset of two-qubit gates. Members of this enum can be mapped to the corresponding unitary propagator using\nthe dictionary returned by TWO_QUBIT_UNITARIES . Module: iqm.pulse....",
    "content": "Bases: Enum Enumerates a subset of two-qubit gates. Members of this enum can be mapped to the corresponding unitary propagator using\nthe dictionary returned by TWO_QUBIT_UNITARIES . Module: iqm.pulse.gates.enums Attributes CZ Controlled-Z gate. ISWAP iSWAP gate. SQRT_ISWAP Square root of the iSWAP gate. Methods Controlled-Z gate. iSWAP gate. Square root of the iSWAP gate. previous iqm.pulse.gates.enums.TWO_QUBIT_UNITARIES next XYGate \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "cz",
    "url": "/iqm-pulse/api/iqm.pulse.gates.cz.html",
    "description": "Two-qubit controlled-Z (CZ) gate. The CZ gate flips the relative phase of the \\(|11\u27e9\\) state.\nIt can be represented by the unitary matrix Full path: iqm.pulse.gates.cz Classes CZ_CRF CZ gate using a C...",
    "content": "Two-qubit controlled-Z (CZ) gate. The CZ gate flips the relative phase of the \\(|11\u27e9\\) state.\nIt can be represented by the unitary matrix Full path: iqm.pulse.gates.cz Classes CZ_CRF CZ gate using a CosineRiseFall flux pulse on the coupler. CZ_CRF_ACStarkCRF Controlled-Z two-qubit gate. CZ_GaussianSmoothedSquare CZ gate using a GaussianSmoothedSquare flux pulse on the coupler. CZ_Slepian CZ gate using a Slepian flux pulse on the coupler. CZ_Slepian_ACStarkCRF Controlled-Z two-qubit gate. CZ_Slepian_CRF CZ gate using a Slepian flux pulse on the coupler and a CosineRiseFall flux pulse on the qubit. CZ_TruncatedGaussianSmoothedSquare CZ gate using a TruncatedGaussianSmoothedSquare flux pulse on the coupler. CouplerFluxPulseQubitACStarkPulseGate Base class for CZ gates with coupler flux pulse and a qubit AC Stark pulse. FluxPulseGate Discrete two locus component gate implemented using flux pulses, virtual RZs, and the interaction mediated by the coupler. FluxPulseGate_CRF_CRF CZ gate using a CosineRiseFall flux pulse on the coupler and on the qubit. FluxPulseGate_TGSS_CRF CZ gate using a TruncatedGaussianSmoothedSquare flux pulse on the coupler and a CosineRiseFall flux pulse on the qubit. Inheritance previous CCPRX_Composite_DRAGGaussian next CZ_CRF \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.utils.normalize_angle",
    "url": "/iqm-pulse/api/iqm.pulse.utils.normalize_angle.html",
    "description": "Normalize the given angle to (-pi, pi]. angle ( float ) \u2013 angle to normalize (in radians) angle normalized to (-pi, pi] float previous iqm.pulse.utils.merge_dicts next iqm.pulse.utils.phase_transforma...",
    "content": "Normalize the given angle to (-pi, pi]. angle ( float ) \u2013 angle to normalize (in radians) angle normalized to (-pi, pi] float previous iqm.pulse.utils.merge_dicts next iqm.pulse.utils.phase_transformation \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "FluxPulseGate_CRF_CRF",
    "url": "/iqm-pulse/api/iqm.pulse.gates.cz.FluxPulseGate_CRF_CRF.html",
    "description": "Bases: FluxPulseGate CZ gate using a CosineRiseFall flux pulse on the coupler and on the qubit. Module: iqm.pulse.gates.cz Attributes parameters Required calibration data, may be nested symmetric True...",
    "content": "Bases: FluxPulseGate CZ gate using a CosineRiseFall flux pulse on the coupler and on the qubit. Module: iqm.pulse.gates.cz Attributes parameters Required calibration data, may be nested symmetric True iff the implementation is symmetric in its locus components. Methods parent ( QuantumOp ) \u2013 name ( str ) \u2013 locus ( Locus ) \u2013 calibration_data ( OILCalibrationData ) \u2013 builder ( ScheduleBuilder ) \u2013 alias of CosineRiseFall Required calibration data, may be nested alias of CosineRiseFall True iff the implementation is symmetric in its locus components.\nOnly meaningful if arity != 1 , and the locus components are of the same type. previous FluxPulseGate next FluxPulseGate_TGSS_CRF \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.gate_implementation.SINGLE_COMPONENTS_WITH_DRIVE_LOCUS_MAPPING",
    "url": "/iqm-pulse/api/iqm.pulse.gate_implementation.SINGLE_COMPONENTS_WITH_DRIVE_LOCUS_MAPPING.html",
    "description": "Locus mapping name for mapping all components that have the drive operation defined. previous iqm.pulse.gate_implementation.NestedParams next iqm.pulse.gate_implementation.SINGLE_COMPONENTS_WITH_READO...",
    "content": "Locus mapping name for mapping all components that have the drive operation defined. previous iqm.pulse.gate_implementation.NestedParams next iqm.pulse.gate_implementation.SINGLE_COMPONENTS_WITH_READOUT_LOCUS_MAPPING \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "AcquisitionMethod",
    "url": "/iqm-pulse/api/iqm.pulse.playlist.instructions.AcquisitionMethod.html",
    "description": "Bases: object Describes a way to acquire readout data. Module: iqm.pulse.playlist.instructions Attributes label Identifier for the returned data, like QB1__readout.time_trace . delay_samples Delay fro...",
    "content": "Bases: object Describes a way to acquire readout data. Module: iqm.pulse.playlist.instructions Attributes label Identifier for the returned data, like QB1__readout.time_trace . delay_samples Delay from beginning of probe pulse to beginning of acquisition window, in samples. Methods label ( str ) \u2013 delay_samples ( int ) \u2013 Identifier for the returned data, like QB1__readout.time_trace . Delay from beginning of probe pulse to beginning of acquisition window, in samples. previous instructions next Block \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "CouplerFluxPulseQubitACStarkPulseGate",
    "url": "/iqm-pulse/api/iqm.pulse.gates.cz.CouplerFluxPulseQubitACStarkPulseGate.html",
    "description": "Bases: GateImplementation Base class for CZ gates with coupler flux pulse and a qubit AC Stark pulse. Analogous to the fast qubit flux pulse, the AC Stark pulse can tune the frequency of the qubit. To...",
    "content": "Bases: GateImplementation Base class for CZ gates with coupler flux pulse and a qubit AC Stark pulse. Analogous to the fast qubit flux pulse, the AC Stark pulse can tune the frequency of the qubit. Together with the\ncoupler flux pulse, this can implement a fast qubit pulsed CZ gate. Module: iqm.pulse.gates.cz Attributes excluded_parameters Parameters names to be excluded from self.parameters . root_parameters  coupler_wave Flux pulse Waveform to be played in the coupler flux AWG. qubit_drive_wave Qubit drive pulse waveform to be played in the qubit drive AWG. Methods duration_in_seconds Duration of the Schedule of the gate implementation (in seconds). get_locus_mapping_name Get the name of the locus mapping stored in ScheduleBuilder.ChipTopology for this implementation. parent ( QuantumOp ) \u2013 name ( str ) \u2013 locus ( Locus ) \u2013 calibration_data ( OILCalibrationData ) \u2013 builder ( ScheduleBuilder ) \u2013 Flux pulse Waveform to be played in the coupler flux AWG. Qubit drive pulse waveform to be played in the qubit drive AWG. Parameters names to be excluded from self.parameters . Inheriting classes may override this if certain\nparameters are not wanted in that class (also parameters defined by the waveforms can be excluded). Returns an AC Stark pulse which consists of a modulated I and modulated Q waveform, where the Q quadrature\nhas an additional phase of -pi/2. phase ( float ) \u2013 amplitude ( float ) \u2013 phase_increment ( float ) \u2013 IQPulse The GateImplementation-specific logic for implementing a quantum operation. Inheriting classes may override this method if the default __call__() caching (based on the args & kwargs\nin the signature) is sufficient. Any additional caching may also be implemented inside this function if needed. TimeBox Duration of the Schedule of the gate implementation (in seconds). Can be left unimplemented if the duration e.g. depends on the gate arguments.\nSubclasses can reimplement this method in case it makes sense in their context. float Get the name of the locus mapping stored in ScheduleBuilder.ChipTopology for this implementation. By default, it is \"<operation_name>.<implementation_name>\" . Inheriting classes may\noverride this for different behaviour. operation_name ( str ) \u2013 name of the quantum operation. implementation_name ( str ) \u2013 name of the implementation name of the locus mapping str previous CZ_TruncatedGaussianSmoothedSquare next FluxPulseGate \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.gate_implementation.OCalibrationData",
    "url": "/iqm-pulse/api/iqm.pulse.gate_implementation.OCalibrationData.html",
    "description": "For a particular quantum operation, maps implementation names to their calibration data. alias of dict [ str , dict [ tuple [ str , \u2026] | None , dict [ str , Any ]]] previous iqm.pulse.gate_implementat...",
    "content": "For a particular quantum operation, maps implementation names to their calibration data. alias of dict [ str , dict [ tuple [ str , \u2026] | None , dict [ str , Any ]]] previous iqm.pulse.gate_implementation.OICalibrationData next iqm.pulse.gate_implementation.OpCalibrationDataTree \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "builder",
    "url": "/iqm-pulse/api/iqm.pulse.builder.html",
    "description": "Tools for building instruction schedules. Full path: iqm.pulse.builder Functions build_quantum_ops (ops) Builds the table of known quantum operations. load_config (path) Load quantum operation definit...",
    "content": "Tools for building instruction schedules. Full path: iqm.pulse.builder Functions build_quantum_ops (ops) Builds the table of known quantum operations. load_config (path) Load quantum operation definitions and calibration data from a YAML config file. validate_quantum_circuit (operations,\u00a0op_table,\u00a0*) Validate a sequence of circuit operations constituting a quantum circuit. Classes CircuitOperation Specific quantum operation applied on a specific part of the QPU, e.g. in a quantum circuit. ScheduleBuilder Builds instruction schedules out of quantum circuits or individual quantum operations. Inheritance previous pulse next iqm.pulse.builder.build_quantum_ops \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "Segment",
    "url": "/iqm-pulse/api/iqm.pulse.playlist.schedule.Segment.html",
    "description": "Bases: object Sequence of instructions, for a single channel. Basically a list[Instruction] that keeps track of the time duration of its contents. instructions ( Iterable [ Instruction ] ) \u2013 contents ...",
    "content": "Bases: object Sequence of instructions, for a single channel. Basically a list[Instruction] that keeps track of the time duration of its contents. instructions ( Iterable [ Instruction ] ) \u2013 contents of the segment duration ( int | None ) \u2013 If None, compute the sum of the durations of instructions .\nOtherwise, the time duration (in samples) of the segment, which must match\nthe aforementioned sum if the Segment is still to be modified. Module: iqm.pulse.playlist.schedule Attributes duration Sum of the durations of the instructions in the segment, in samples. Methods append Append an instruction to the end of the segment. copy Make an independent copy of the segment. extend Append all instructions from an iterable to the end of the segment. pop Remove and return the instruction at the given index of the segment. prepend Prepend an instruction to the beginning of the segment. contents total duration of the segment, in samples Make an independent copy of the segment. Mutating the original must not affect the copy, or vice versa.\nInstructions are immutable, so they need not be copied. copy of the segment Segment Append an instruction to the end of the segment. instruction ( Instruction ) \u2013 None Prepend an instruction to the beginning of the segment. instruction ( Instruction ) \u2013 None Append all instructions from an iterable to the end of the segment. instructions ( Iterable [ Instruction ] ) \u2013 None Remove and return the instruction at the given index of the segment. idx ( int ) \u2013 Instruction Sum of the durations of the instructions in the segment, in samples. previous Schedule next visualisation \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.gates.prx.get_unitary_prx",
    "url": "/iqm-pulse/api/iqm.pulse.gates.prx.get_unitary_prx.html",
    "description": "Unitary for a PRX gate. angle ( float ) \u2013 rotation angle (in rad) phase ( float ) \u2013 phase angle (in rad) 2x2 unitary representing prx(angle, phase) . ndarray previous prx next PRX_CustomWaveforms \u00a9 Co...",
    "content": "Unitary for a PRX gate. angle ( float ) \u2013 rotation angle (in rad) phase ( float ) \u2013 phase angle (in rad) 2x2 unitary representing prx(angle, phase) . ndarray previous prx next PRX_CustomWaveforms \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "sx",
    "url": "/iqm-pulse/api/iqm.pulse.gates.sx.html",
    "description": "Single-qubit sqrt(X) gate. The gate is doing pi/2 X gate, with additional Z rotation to correct phase. It rotates the qubit state in XZ plane (or around Y axis) for 90 degree. Full path: iqm.pulse.gat...",
    "content": "Single-qubit sqrt(X) gate. The gate is doing pi/2 X gate, with additional Z rotation to correct phase. It rotates the qubit state in XZ plane (or around Y axis) for 90 degree. Full path: iqm.pulse.gates.sx Classes SXGate SX gate implementation based on PRX gate, by limiting the angle to pi / 2. Inheritance previous RZ_Virtual next SXGate \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.scheduler.extend_schedule",
    "url": "/iqm-pulse/api/iqm.pulse.scheduler.extend_schedule.html",
    "description": "Extend a Schedule with another Schedule. Extends A with B , modifying both. The extension can add new channels to A . If B has a ragged left side, i.e. some of its channels begin with Nothing instruct...",
    "content": "Extend a Schedule with another Schedule. Extends A with B , modifying both. The extension can add new channels to A . If B has a ragged left side, i.e. some of its channels begin with Nothing instructions,\nthis algorithm will not always produce an optimally short schedule. A ( Schedule ) \u2013 schedule to be extended B ( Schedule ) \u2013 schedule to extend A with channels ( dict [ str , ChannelProperties ] ) \u2013 properties of the control channels TOL ( float ) \u2013 time durations equal or smaller than this are considered zero (in seconds) None previous iqm.pulse.scheduler.extend_hard_boundary_in_seconds next iqm.pulse.scheduler.extend_schedule_new \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.circuit_operations.reorder",
    "url": "/iqm-pulse/api/iqm.pulse.circuit_operations.reorder.html",
    "description": "Reorders the qubits in the n-qubit operator A according to the permutation vector perm. mat ( ndarray ) \u2013 Matrix to reorder perm ( list [ int ] ) \u2013 Permutation Reordered matrix ndarray previous iqm.pu...",
    "content": "Reorders the qubits in the n-qubit operator A according to the permutation vector perm. mat ( ndarray ) \u2013 Matrix to reorder perm ( list [ int ] ) \u2013 Permutation Reordered matrix ndarray previous iqm.pulse.circuit_operations.get_unitary_from_op next iqm.pulse.circuit_operations.reshape_unitary \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "AWGScheduleValidationData",
    "url": "/iqm-pulse/api/iqm.pulse.validation.AWGScheduleValidationData.html",
    "description": "Bases: object Controller specific validation data Module: iqm.pulse.validation Attributes sampling_rate  granularity  min_number_of_samples  compatible_instructions  Methods sampling_rate ( float ) \u2013 ...",
    "content": "Bases: object Controller specific validation data Module: iqm.pulse.validation Attributes sampling_rate  granularity  min_number_of_samples  compatible_instructions  Methods sampling_rate ( float ) \u2013 granularity ( int ) \u2013 min_number_of_samples ( int ) \u2013 compatible_instructions ( tuple [ type [ Operation ] , ... ] ) \u2013 previous iqm.pulse.validation.validate_playlist_compatibility next iqm.pulse.validation.AWGScheduleValidationError \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.circuit_operations.reshape_unitary",
    "url": "/iqm-pulse/api/iqm.pulse.circuit_operations.reshape_unitary.html",
    "description": "Extend a unitary propagator to act on a larger system. Given a unitary matrix acting on N qubits, indices of N qubits in a larger Hilbert space, and the number\nof qubits in that Hilbert space, calcula...",
    "content": "Extend a unitary propagator to act on a larger system. Given a unitary matrix acting on N qubits, indices of N qubits in a larger Hilbert space, and the number\nof qubits in that Hilbert space, calculate a unitary acting on the larger Hilbert space, which acts as\nthe given unitary on the N selected qubits and as identity on the others. unitary ( tuple [ tuple [ float , ... ] , ... ] ) \u2013 original unitary as a nested tuple for hashing & caching purposes. indices ( tuple [ int , ... ] ) \u2013 qubit indices in the larger Hilbert space, all in range(num_qubits) n_qubits ( int ) \u2013 number of qubits in the larger Hilbert space Unitary matrix acting as unitary on the selected qubits in the larger Hilbert space. ndarray previous iqm.pulse.circuit_operations.reorder next CircuitOperationList \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.builder.validate_quantum_circuit",
    "url": "/iqm-pulse/api/iqm.pulse.builder.validate_quantum_circuit.html",
    "description": "Validate a sequence of circuit operations constituting a quantum circuit. operations ( Iterable [ CircuitOperation ] ) \u2013 quantum circuit to be validated op_table ( dict [ str , QuantumOp ] ) \u2013 table c...",
    "content": "Validate a sequence of circuit operations constituting a quantum circuit. operations ( Iterable [ CircuitOperation ] ) \u2013 quantum circuit to be validated op_table ( dict [ str , QuantumOp ] ) \u2013 table containing allowed/calibrated quantum operations require_measurements ( bool ) \u2013 iff True the circuit must include at least one measurement operation ValueError \u2013 operations do not constitute a valid quantum circuit None previous iqm.pulse.builder.load_config next CircuitOperation \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "utils",
    "url": "/iqm-pulse/api/iqm.pulse.utils.html",
    "description": "Utility functions. Full path: iqm.pulse.utils Functions load_yaml (path) Load a YAML file from the given path, raise error if the file can't be loaded. map_waveform_param_types (type_hint) Map a pytho...",
    "content": "Utility functions. Full path: iqm.pulse.utils Functions load_yaml (path) Load a YAML file from the given path, raise error if the file can't be loaded. map_waveform_param_types (type_hint) Map a python typehint into EXA Parameter's (DataType, CollectionType) tuple. merge_dicts (A,\u00a0B[,\u00a0path,\u00a0merge_nones]) Merge two dictionaries recursively, leaving the originals unchanged. normalize_angle (angle) Normalize the given angle to (-pi, pi]. phase_transformation ([psi_1,\u00a0psi_2]) Implement an arbitrary (RZ, PRX, RZ) gate sequence by modifying the parameters of the IQ pulse implementing the PRX. previous TimeBox next iqm.pulse.utils.load_yaml \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.gate_implementation.Locus",
    "url": "/iqm-pulse/api/iqm.pulse.gate_implementation.Locus.html",
    "description": "Sequence of QPU component physical names a quantum operation is acting on. The order may matter. alias of tuple [ str , \u2026] previous gate_implementation next iqm.pulse.gate_implementation.OILCalibratio...",
    "content": "Sequence of QPU component physical names a quantum operation is acting on. The order may matter. alias of tuple [ str , \u2026] previous gate_implementation next iqm.pulse.gate_implementation.OILCalibrationData \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "CZ_Slepian_ACStarkCRF",
    "url": "/iqm-pulse/api/iqm.pulse.gates.cz.CZ_Slepian_ACStarkCRF.html",
    "description": "Bases: CouplerFluxPulseQubitACStarkPulseGate Controlled-Z two-qubit gate. CZ gate implemented using a slepian flux pulse for the coupler and a modulated cosine rise fall (CRF) AC Stark\npulse on one qu...",
    "content": "Bases: CouplerFluxPulseQubitACStarkPulseGate Controlled-Z two-qubit gate. CZ gate implemented using a slepian flux pulse for the coupler and a modulated cosine rise fall (CRF) AC Stark\npulse on one qubit. Module: iqm.pulse.gates.cz Attributes parameters Required calibration data, may be nested symmetric True iff the implementation is symmetric in its locus components. Methods parent ( QuantumOp ) \u2013 name ( str ) \u2013 locus ( Locus ) \u2013 calibration_data ( OILCalibrationData ) \u2013 builder ( ScheduleBuilder ) \u2013 alias of Slepian Required calibration data, may be nested alias of ModulatedCosineRiseFall True iff the implementation is symmetric in its locus components.\nOnly meaningful if arity != 1 , and the locus components are of the same type. previous CZ_Slepian next CZ_Slepian_CRF \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.gates.move.validate_move_instructions",
    "url": "/iqm-pulse/api/iqm.pulse.gates.move.validate_move_instructions.html",
    "description": "Circuit-level pass to prepare a circuit containing MOVE gates for compilation. Validates that circuit conforms to the MOVE gate constraints. instructions ( Iterable [ CircuitOperation ] ) \u2013 quantum ci...",
    "content": "Circuit-level pass to prepare a circuit containing MOVE gates for compilation. Validates that circuit conforms to the MOVE gate constraints. instructions ( Iterable [ CircuitOperation ] ) \u2013 quantum circuit to validate builder ( ScheduleBuilder ) \u2013 schedule builder, encapsulating information about the station validate_prx ( bool ) \u2013 whether to validate the circuit for PRX gates between MOVE sandwiches as well instructions , unmodified ValueError \u2013 Circuit does not conform to MOVE constraints. Iterable [ CircuitOperation ] previous iqm.pulse.gates.move.apply_move_gate_phase_corrections next MOVE_CRF_CRF \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.validation.AWGScheduleValidationError",
    "url": "/iqm-pulse/api/iqm.pulse.validation.AWGScheduleValidationError.html",
    "description": "Error raised when schedule validation for an AWG fails. previous AWGScheduleValidationData next iqm.pulse.validation.InvalidInstructionError \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025...",
    "content": "Error raised when schedule validation for an AWG fails. previous AWGScheduleValidationData next iqm.pulse.validation.InvalidInstructionError \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "PRX_DRAGCosineRiseFallSX",
    "url": "/iqm-pulse/api/iqm.pulse.gates.prx.PRX_DRAGCosineRiseFallSX.html",
    "description": "Bases: PRX_CustomWaveformsSX PRX gate, DRAG / CosineRiseFall IQ pulse with VZ implementation. See PRX_CustomWaveformsVZ . Module: iqm.pulse.gates.prx Attributes dependent_waves If set True , the Q cha...",
    "content": "Bases: PRX_CustomWaveformsSX PRX gate, DRAG / CosineRiseFall IQ pulse with VZ implementation. See PRX_CustomWaveformsVZ . Module: iqm.pulse.gates.prx Attributes dependent_waves If set True , the Q channel waveform is considered to depend on the I channel's waveform so that they share the waveform parameters, (e.g. a DRAG PRX implementation). excluded_parameters Parameters names to be excluded from self.parameters . parameters Required calibration data, may be nested Methods parent ( QuantumOp ) \u2013 name ( str ) \u2013 locus ( Locus ) \u2013 calibration_data ( OILCalibrationData ) \u2013 builder ( ScheduleBuilder ) \u2013 Parameters names to be excluded from self.parameters . Inheriting classes may override this if certain\nparameters are not wanted in that class (also parameters defined by the waveforms can be excluded). Builds a single sqrt(X) pulse from the calibration data. IQPulse If set True , the Q channel waveform is considered to depend on the I channel\u2019s waveform\nso that they share the waveform parameters, (e.g. a DRAG PRX implementation). If not provided,\nwill be initialised as True . Required calibration data, may be nested alias of CosineRiseFall alias of CosineRiseFallDerivative previous PRX_DRAGCosineRiseFall next PRX_DRAGGaussian \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "RealChannelConfig",
    "url": "/iqm-pulse/api/iqm.pulse.playlist.channel.RealChannelConfig.html",
    "description": "Bases: ChannelConfiguration Requested configuration of a real channel. Module: iqm.pulse.playlist.channel Attributes sample_rate sample rate of the instrument responsible for the channel (in Hz) Metho...",
    "content": "Bases: ChannelConfiguration Requested configuration of a real channel. Module: iqm.pulse.playlist.channel Attributes sample_rate sample rate of the instrument responsible for the channel (in Hz) Methods sample_rate ( float ) \u2013 sample rate of the instrument responsible for the channel (in Hz) previous ProbeChannelProperties next instructions \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.gates.move.apply_move_gate_phase_corrections",
    "url": "/iqm-pulse/api/iqm.pulse.gates.move.apply_move_gate_phase_corrections.html",
    "description": "Schedule-level pass applying resonator-related phase corrections in MOVE sandwiches to the moved qubit. Note Assumes the MOVE gate implementation is based on MOVE_CustomWaveforms . Processes all the M...",
    "content": "Schedule-level pass applying resonator-related phase corrections in MOVE sandwiches to the moved qubit. Note Assumes the MOVE gate implementation is based on MOVE_CustomWaveforms . Processes all the MOVE sandwiches in schedule , summing up the VirtualRZ instructions\non the resonator virtual drive channels, adding the phase difference resulting from\nqubit-resonator detuning to the total, and applying it on the qubit at the end of each sandwich. schedule ( Schedule ) \u2013 instruction schedule to process builder ( ScheduleBuilder ) \u2013 schedule builder that was used to build schedule apply_detuning_corrections ( bool ) \u2013 if True, also apply detuning phase corrections copy of schedule with the phase corrections applied Schedule previous move next iqm.pulse.gates.move.validate_move_instructions \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "Chirp",
    "url": "/iqm-pulse/api/iqm.pulse.playlist.waveforms.Chirp.html",
    "description": "Bases: Waveform Linear chirp, defined as where \\(\\omega[\\alpha, N]\\) is a cosine-tapered window. For \\(\\alpha = 1\\) it becomes rectangular,\nand for \\(\\alpha = 0\\) it becomes a Hann (or raised cosine) ...",
    "content": "Bases: Waveform Linear chirp, defined as where \\(\\omega[\\alpha, N]\\) is a cosine-tapered window. For \\(\\alpha = 1\\) it becomes rectangular,\nand for \\(\\alpha = 0\\) it becomes a Hann (or raised cosine) window. The chirp pulse is valued inside the Nyquist zone, such that \\(f_{0}\\) and \\(f_{1}\\) are constrained\nin the range \\([-0.5, 0.5]\\) . freq_start ( float ) \u2013 Initial frequency of the chirp waveform in the Nyquist zone. freq_stop ( float ) \u2013 Final frequency of the chirp waveform in the Nyquist zone. alpha ( float ) \u2013 Alpha parameter of the cosine-tapered window. Defaults to 0.05. phase ( float ) \u2013 Phase of the waveform. Defaults to 0 n_samples ( int ) \u2013 Module: iqm.pulse.playlist.waveforms Attributes alpha  phase  freq_start  freq_stop  n_samples Requested number of samples for the waveform. Methods non_timelike_attributes Mapping from waveform attributes to the units of their calibration data, unless that unit is second. Actually samples the waveform. sample_coords \u2013 coordinates of the samples to be returned array of samples (same shape as sample_coords , dtype == float ) Mapping from waveform attributes to the units of their calibration data, unless that unit is second. Used to construct the parameters for the calibration data required by the waveform.\nBy default all the waveform attributes are \u201ctimelike\u201d (the unit for their calibration data is s).\nHowever, some waveform attributes can be dimensionless, e.g. the relative amplitudes in a sum of\nconsisting of multiple terms, or frequency-like (calibration data has the unit \u2018Hz\u2019).\nIf a Waveform subclass has non-timelike attributes, it needs to redefine this method. When the Waveform is constructed, all timelike calibration data is converted to units of the\nsampling window duration, and all frequency-like calibration data into units of inverse sampling\nwindow duration. dict [ str , str ] previous waveforms next ChirpImag \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.validation.validate_channel",
    "url": "/iqm-pulse/api/iqm.pulse.validation.validate_channel.html",
    "description": "Validate a single channel. channel_description ( ChannelDescription ) \u2013 device_constraints ( ChannelProperties ) \u2013 None previous iqm.pulse.validation.validate_awg_and_schedule_compatibility next iqm.p...",
    "content": "Validate a single channel. channel_description ( ChannelDescription ) \u2013 device_constraints ( ChannelProperties ) \u2013 None previous iqm.pulse.validation.validate_awg_and_schedule_compatibility next iqm.pulse.validation.validate_instruction_and_wf_length \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "MoveMarker",
    "url": "/iqm-pulse/api/iqm.pulse.gates.move.MoveMarker.html",
    "description": "Bases: Wait Special annotation instruction to indicate the beginning and ending of MOVE gates. The same instance of this instruction will be inserted into the qubit drive channel and the\nresonator vir...",
    "content": "Bases: Wait Special annotation instruction to indicate the beginning and ending of MOVE gates. The same instance of this instruction will be inserted into the qubit drive channel and the\nresonator virtual drive channel, right before the beginning MOVE VirtualRZ instructions,\nto link the channels together (otherwise, there would be nothing explicit in the Schedule\nindicating that there is a MOVE gate happening between the qubit and the resonator). Another shared instance will be inserted to the aforementioned channels right before the ending\nMOVE VirtualRZ instruction. The VirtualRZ instructions between the markers on the resonator\nchannel will be applied to the qubit instead in a post-compilation pass. Module: iqm.pulse.gates.move Attributes duration Time duration of the instruction. qubit  resonator  detuning  Methods duration ( int ) \u2013 qubit ( str ) \u2013 resonator ( str ) \u2013 detuning ( float ) \u2013 Time duration of the instruction. In samples at the channel sample rate. previous MOVE_TGSS_CRF next prx \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "CZ_GaussianSmoothedSquare",
    "url": "/iqm-pulse/api/iqm.pulse.gates.cz.CZ_GaussianSmoothedSquare.html",
    "description": "Bases: FluxPulseGate CZ gate using a GaussianSmoothedSquare flux pulse on the coupler. Module: iqm.pulse.gates.cz Attributes parameters Required calibration data, may be nested qubit_wave Flux pulse W...",
    "content": "Bases: FluxPulseGate CZ gate using a GaussianSmoothedSquare flux pulse on the coupler. Module: iqm.pulse.gates.cz Attributes parameters Required calibration data, may be nested qubit_wave Flux pulse Waveform to be played in the qubit flux AWG. symmetric True iff the implementation is symmetric in its locus components. Methods parent ( QuantumOp ) \u2013 name ( str ) \u2013 locus ( Locus ) \u2013 calibration_data ( OILCalibrationData ) \u2013 builder ( ScheduleBuilder ) \u2013 alias of GaussianSmoothedSquare Required calibration data, may be nested Flux pulse Waveform to be played in the qubit flux AWG. True iff the implementation is symmetric in its locus components.\nOnly meaningful if arity != 1 , and the locus components are of the same type. previous CZ_CRF_ACStarkCRF next CZ_Slepian \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "CompositeGate",
    "url": "/iqm-pulse/api/iqm.pulse.gate_implementation.CompositeGate.html",
    "description": "Bases: GateImplementation Utility base class for creating gate implementations that are defined in terms of other gate implementations. Gates can be implemented using other pre-existing gate implement...",
    "content": "Bases: GateImplementation Utility base class for creating gate implementations that are defined in terms of other gate implementations. Gates can be implemented using other pre-existing gate implementations by just utilizing the ScheduleBuilder in builder in the __call__() method (e.g. by calling self.builder.get_implementation(<some gate>, <some locus>) . In this way, any such \u201cmember gates\u201d will use\nthe common calibration that exists in builder . In order for a composite gate\nimplementation to be able to calibrate its member gates with different calibration values from the common\ncalibration, it needs to know what gates it considers as its \u201cmembers\u201d. This is what the CompositeGate ABC is for. Inheriting from this class and defining e.g. registered_gates = [\"prx\", \"cz\"] allows one to calibrate the\nmember operations (i.e. \"prx\" and \"cz\" in this example) inside this composite gate differently from the\ncommon calibration. However, if no specific calibration data is provided, the gate implementation will be calibrated\nwith the common calibration. Module: iqm.pulse.gate_implementation Attributes default_implementations Mapping from operation names to the designated default implementation of that operation. registered_gates Gates that can be calibrated separately from their common calibration existing in self.builder . Methods build Construct a member gate implementation. parent ( QuantumOp ) \u2013 name ( str ) \u2013 locus ( Locus ) \u2013 calibration_data ( OILCalibrationData ) \u2013 builder ( ScheduleBuilder ) \u2013 Gates that can be calibrated separately from their common calibration existing in self.builder . The gate\nnames should correspond to the keys in self.builder.op_table . Other gates besides the ones given here can\nalso be constructed via self.builder , but these will always use the common calibration. Mapping from operation names to the designated default implementation of that operation. Filling this attribute\nallows one to define a different default implementation from the common default in self.builder.op_table to\nbe used in he context of this composite gate. If an operation is not found in this dict as a key, this\nCompositeGate will use the common default as the default implementation for it. Construct a member gate implementation. If the gate op_name is registered, a specific calibration for it in the context of this CompositeGate\nwill be sought for from self.builder.calibration . If any (non-empty) calibration values are found in self.builder.calibration[self.name][op_name][<impl_name>] they will be merged to the common calibration\n(only non-empty values will be merged). If there are no values found, the\ncommon calibration will be used. op_name ( str ) \u2013 operation name locus ( tuple [ str , ... ] ) \u2013 locus the operation acts on impl_name ( str | None ) \u2013 Implementation name. If not given, uses the default implementation defined in the class instance\nif any, and otherwise the common default in self.builder.op_table strict_locus ( bool ) \u2013 iff False, for non-symmetric implementations of symmetric ops the locus order may\nbe changed if no calibration data is available for the requested locus order Calibrated gate implementation. GateImplementation previous CompositeCache next CustomIQWaveforms \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.gate_implementation.NestedParams",
    "url": "/iqm-pulse/api/iqm.pulse.gate_implementation.NestedParams.html",
    "description": "Nested dict defining the parameters required by GateImplementation classes. alias of dict [ str , Parameter | Setting | dict ] previous iqm.pulse.gate_implementation.OpCalibrationDataTree next iqm.pul...",
    "content": "Nested dict defining the parameters required by GateImplementation classes. alias of dict [ str , Parameter | Setting | dict ] previous iqm.pulse.gate_implementation.OpCalibrationDataTree next iqm.pulse.gate_implementation.SINGLE_COMPONENTS_WITH_DRIVE_LOCUS_MAPPING \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "timebox",
    "url": "/iqm-pulse/api/iqm.pulse.timebox.html",
    "description": "Reserving QPU resources in instruction scheduling. Full path: iqm.pulse.timebox Classes MultiplexedProbeTimeBox A TimeBox that contains any number of multiplexed readout pulses for probe channels. Sch...",
    "content": "Reserving QPU resources in instruction scheduling. Full path: iqm.pulse.timebox Classes MultiplexedProbeTimeBox A TimeBox that contains any number of multiplexed readout pulses for probe channels. SchedulingAlgorithm Algorithms for resolving composite TimeBoxes into atomic ones. SchedulingStrategy Different scheduling strategies for the contents of composite TimeBoxes. TimeBox Container for one or more instruction schedule fragments, to be scheduled according to a given strategy. Inheritance previous SegmentPointer next MultiplexedProbeTimeBox \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "PRX_CustomWaveformsSX",
    "url": "/iqm-pulse/api/iqm.pulse.gates.prx.PRX_CustomWaveformsSX.html",
    "description": "Bases: PRX_SinglePulse_GateImplementation , CustomIQWaveforms ABC for PRX gates implemented using SX gate, hot-swappable waveforms and phase manipulation. If the rotation angle \\(\\theta = \\pi/2\\) , th...",
    "content": "Bases: PRX_SinglePulse_GateImplementation , CustomIQWaveforms ABC for PRX gates implemented using SX gate, hot-swappable waveforms and phase manipulation. If the rotation angle \\(\\theta = \\pi/2\\) , the timebox will consist of just the SX IQ pulse, with phase. If not, the timebox will consist of two IQ pulses, with phase. The formula for the PRX gate implemented using SX gates and z rotations is The fusing of z rotations to IQPulses is done inside the _call() method. All parameters in the pulse here is referring to the state of the qubits. Module: iqm.pulse.gates.prx Attributes dependent_waves If set True , the Q channel waveform is considered to depend on the I channel's waveform so that they share the waveform parameters, (e.g. a DRAG PRX implementation). root_parameters Parameters independent of the of Waveforms. wave_i Waveform for the I channel. wave_q Waveform for the Q channel. Methods parent ( QuantumOp ) \u2013 name ( str ) \u2013 locus ( Locus ) \u2013 calibration_data ( OILCalibrationData ) \u2013 builder ( ScheduleBuilder ) \u2013 Parameters independent of the of Waveforms. Inheriting classes may override this to include parameters common\nto all such implementations. Convert pulses into timebox, via extra Z rotations. There are exceptions while using pi/2 and pi rotation in angle, for calibration reason. The duration of the\ntimebox can be different. angle ( float ) \u2013 phase ( float ) \u2013 TimeBox Builds a single sqrt(X) pulse from the calibration data. amplitude_i ( float ) \u2013 amplitude_q ( float ) \u2013 n_samples ( int ) \u2013 IQPulse If set True , the Q channel waveform is considered to depend on the I channel\u2019s waveform\nso that they share the waveform parameters, (e.g. a DRAG PRX implementation). If not provided,\nwill be initialised as True . previous PRX_CustomWaveforms next PRX_DRAGCosineRiseFall \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.gates.expose_implementation",
    "url": "/iqm-pulse/api/iqm.pulse.gates.expose_implementation.html",
    "description": "Add the given gate implementation to the list of known implementations. implementation ( type [ GateImplementation ] ) \u2013 GateImplementation to add so that it can be found with get_implementation_class...",
    "content": "Add the given gate implementation to the list of known implementations. implementation ( type [ GateImplementation ] ) \u2013 GateImplementation to add so that it can be found with get_implementation_class() . overwrite ( bool ) \u2013 If True, does not raise an error if implementation already exists. None previous gates next iqm.pulse.gates.get_implementation_class \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.validation.validate_playlist_compatibility",
    "url": "/iqm-pulse/api/iqm.pulse.validation.validate_playlist_compatibility.html",
    "description": "Validates that the given playlist is compatible with the provided AWG data. The following requirements are validated as they are the same for all controllers. Playlist sample rate vs. Actual controlle...",
    "content": "Validates that the given playlist is compatible with the provided AWG data. The following requirements are validated as they are the same for all controllers. Playlist sample rate vs. Actual controller sample rate Instruction granularity with respect to the controllers granularity requirements Checks that no other than supported instructions are used. Checks that instruction length matches waveform length in IQ and RealPulse Checks that all instructions are at least the length of minimum number of samples Checks that Conditional instruction has the same duration in every child instruction playlist ( Playlist ) \u2013 instructions used on each channel, as well as the channel configurations device_constraints ( dict [ str , ChannelProperties ] ) \u2013 actual hardware limitations of the channels None previous iqm.pulse.validation.validate_instruction_and_wf_length next AWGScheduleValidationData \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "ComplexIntegration",
    "url": "/iqm-pulse/api/iqm.pulse.playlist.instructions.ComplexIntegration.html",
    "description": "Bases: AcquisitionMethod Perform a weighted integration of the IQ raw signal, resulting in a complex number. Module: iqm.pulse.playlist.instructions Attributes weights Integration weights. label Ident...",
    "content": "Bases: AcquisitionMethod Perform a weighted integration of the IQ raw signal, resulting in a complex number. Module: iqm.pulse.playlist.instructions Attributes weights Integration weights. label Identifier for the returned data, like QB1__readout.time_trace . delay_samples Delay from beginning of probe pulse to beginning of acquisition window, in samples. Methods label ( str ) \u2013 delay_samples ( int ) \u2013 weights ( IQPulse ) \u2013 Integration weights. previous Block next ConditionalInstruction \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "IQChannelConfig",
    "url": "/iqm-pulse/api/iqm.pulse.playlist.channel.IQChannelConfig.html",
    "description": "Bases: RealChannelConfig Requested configuration of an IQ channel. Module: iqm.pulse.playlist.channel Attributes frequency upconversion frequency for the IQ pulses (in Hz) sample_rate sample rate of t...",
    "content": "Bases: RealChannelConfig Requested configuration of an IQ channel. Module: iqm.pulse.playlist.channel Attributes frequency upconversion frequency for the IQ pulses (in Hz) sample_rate sample rate of the instrument responsible for the channel (in Hz) Methods sample_rate ( float ) \u2013 frequency ( float ) \u2013 upconversion frequency for the IQ pulses (in Hz) previous ChannelProperties next ProbeChannelProperties \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.gates.enums.TWO_QUBIT_UNITARIES",
    "url": "/iqm-pulse/api/iqm.pulse.gates.enums.TWO_QUBIT_UNITARIES.html",
    "description": "Mapping of TwoQubitGates to the corresponding U(4) matrices previous iqm.pulse.gates.enums.XYGATE_UNITARIES next TwoQubitGate \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04....",
    "content": "Mapping of TwoQubitGates to the corresponding U(4) matrices previous iqm.pulse.gates.enums.XYGATE_UNITARIES next TwoQubitGate \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "RZ_Virtual",
    "url": "/iqm-pulse/api/iqm.pulse.gates.rz.RZ_Virtual.html",
    "description": "Bases: GateImplementation Implementation of the RZ gate using the virtual z rotation technique. Implements the RZ gate on a specific qubit using a VirtualRZ instruction, which\nsimply changes the phase...",
    "content": "Bases: GateImplementation Implementation of the RZ gate using the virtual z rotation technique. Implements the RZ gate on a specific qubit using a VirtualRZ instruction, which\nsimply changes the phase of the local oscillator driving that qubit.\nThis requires no calibration data as of now.\nThe generated VirtualRZ instruction has the shortest possible duration allowed by the instruments. The virtual z rotation method is based on algebraically commuting the RZ gates towards the end\nof the circuit, until they hit a measurement operation, at which point they are eliminated. It assumes that all the multi-qubit gates in the circuit commute with arbitrary RZ gates (this holds e.g. for CZ\nsince it is diagonal), measurements are projective and happen in the z basis, so that RZ gates that immediately\nprecede them do not affect the measurement result or the state after the measurement, and thus\ncan be removed, and conjugating the single-qubit gates in the circuit with RZ is equivalent to incrementing the phase of the drive\n(holds for PRX ), which can be accomplished either by incrementing the phase of\nthe local oscillator of the drive channel, or incrementing the phases of all the IQPulse s\nfollowing it on the drive channel. If all these assumptions hold we may implement an RZ gate using a VirtualRZ instruction,\nwith phase_increment equal to the negated rotation angle. channel \u2013 name of the drive channel on which the VirtualRZ acts duration \u2013 time duration of the VirtualRZ instruction, in seconds parent ( QuantumOp ) \u2013 name ( str ) \u2013 locus ( Locus ) \u2013 calibration_data ( OILCalibrationData ) \u2013 builder ( ScheduleBuilder ) \u2013 Module: iqm.pulse.gates.rz Attributes parameters Required calibration data, may be nested Methods duration_in_seconds Duration of the Schedule of the gate implementation (in seconds). get_locus_mapping_name Get the name of the locus mapping stored in ScheduleBuilder.ChipTopology for this implementation. Z rotation gate. angle ( float ) \u2013 rotation angle (in radians) pulse schedule implementing the z rotation gate TimeBox Required calibration data, may be nested Duration of the Schedule of the gate implementation (in seconds). Can be left unimplemented if the duration e.g. depends on the gate arguments.\nSubclasses can reimplement this method in case it makes sense in their context. float Get the name of the locus mapping stored in ScheduleBuilder.ChipTopology for this implementation. By default, it is \"<operation_name>.<implementation_name>\" . Inheriting classes may\noverride this for different behaviour. operation_name ( str ) \u2013 name of the quantum operation. implementation_name ( str ) \u2013 name of the implementation name of the locus mapping str previous RZ_ACStarkShift_CosineRiseFall next sx \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "CustomIQWaveforms",
    "url": "/iqm-pulse/api/iqm.pulse.gate_implementation.CustomIQWaveforms.html",
    "description": "Bases: GateImplementation Base class for GateImplementations using custom waveform definition with IQPulses. The class contains logic for automatic gate calibration parameters handling for such gates ...",
    "content": "Bases: GateImplementation Base class for GateImplementations using custom waveform definition with IQPulses. The class contains logic for automatic gate calibration parameters handling for such gates (see the class\nattributes for more info). With given Waveform waveform definitions Something and SomethingElse ,\nan inheriting class may define the waveforms for the I and Q channels like this: class MyGate(CustomIQWaveforms, i_wave=Something, q_wave=SomethingElse) . Module: iqm.pulse.gate_implementation Attributes excluded_parameters Parameters names to be excluded from self.parameters . root_parameters Parameters independent of the of Waveforms. wave_i Waveform for the I channel. wave_q Waveform for the Q channel. dependent_waves If set True , the Q channel waveform is considered to depend on the I channel's waveform so that they share the waveform parameters, (e.g. a DRAG PRX implementation). Methods parent ( QuantumOp ) \u2013 name ( str ) \u2013 locus ( Locus ) \u2013 calibration_data ( OILCalibrationData ) \u2013 builder ( ScheduleBuilder ) \u2013 Waveform for the I channel. Waveform for the Q channel. If set True , the Q channel waveform is considered to depend on the I channel\u2019s waveform\nso that they share the waveform parameters, (e.g. a DRAG PRX implementation). If not provided,\nwill be initialised as True . Parameters independent of the of Waveforms. Inheriting classes may override this to include parameters common\nto all such implementations. Parameters names to be excluded from self.parameters . Inheriting classes may override this if certain\nparameters are not wanted in that class (also parameters defined by the waveforms can be excluded). previous CompositeGate next GateImplementation \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "ModulatedCosineRiseFall",
    "url": "/iqm-pulse/api/iqm.pulse.playlist.waveforms.ModulatedCosineRiseFall.html",
    "description": "Bases: Waveform Modulated Cosine Rise Fall waveform. This waveform takes the waveform CosineRiseFall and modulates it with a cosine signal\nwhich then has parameters frequency and phase , additional to...",
    "content": "Bases: Waveform Modulated Cosine Rise Fall waveform. This waveform takes the waveform CosineRiseFall and modulates it with a cosine signal\nwhich then has parameters frequency and phase , additional to the parameters full_width , rise_time , and center_offset , see description of TruncatedGaussianSmoothedSquare for\nfurther details. full_width ( float ) \u2013 Full width of the pulse, >= 2 * rise_time . rise_time ( float ) \u2013 Duration of the sinusoidal rise (and fall) part of the waveform, >= 0. modulation_frequency ( float ) \u2013 Modulation frequency. phase ( float ) \u2013 Phase of the modulation. center_offset ( float ) \u2013 The waveform is centered around this sampling window coordinate.\nIf zero, the pulse is placed in the middle of the sampling window. n_samples ( int ) \u2013 Module: iqm.pulse.playlist.waveforms Attributes center_offset  modulation_frequency  phase  full_width  rise_time  n_samples Requested number of samples for the waveform. Methods non_timelike_attributes Mapping from waveform attributes to the units of their calibration data, unless that unit is second. Actually samples the waveform. sample_coords ( ndarray ) \u2013 coordinates of the samples to be returned array of samples (same shape as sample_coords , dtype == float ) ndarray Mapping from waveform attributes to the units of their calibration data, unless that unit is second. Used to construct the parameters for the calibration data required by the waveform.\nBy default all the waveform attributes are \u201ctimelike\u201d (the unit for their calibration data is s).\nHowever, some waveform attributes can be dimensionless, e.g. the relative amplitudes in a sum of\nconsisting of multiple terms, or frequency-like (calibration data has the unit \u2018Hz\u2019).\nIf a Waveform subclass has non-timelike attributes, it needs to redefine this method. When the Waveform is constructed, all timelike calibration data is converted to units of the\nsampling window duration, and all frequency-like calibration data into units of inverse sampling\nwindow duration. dict [ str , str ] previous CosineRiseFallDerivative next Slepian \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "CZ_Slepian",
    "url": "/iqm-pulse/api/iqm.pulse.gates.cz.CZ_Slepian.html",
    "description": "Bases: FluxPulseGate CZ gate using a Slepian flux pulse on the coupler. Module: iqm.pulse.gates.cz Attributes parameters Required calibration data, may be nested qubit_wave Flux pulse Waveform to be p...",
    "content": "Bases: FluxPulseGate CZ gate using a Slepian flux pulse on the coupler. Module: iqm.pulse.gates.cz Attributes parameters Required calibration data, may be nested qubit_wave Flux pulse Waveform to be played in the qubit flux AWG. symmetric True iff the implementation is symmetric in its locus components. Methods parent ( QuantumOp ) \u2013 name ( str ) \u2013 locus ( Locus ) \u2013 calibration_data ( OILCalibrationData ) \u2013 builder ( ScheduleBuilder ) \u2013 alias of Slepian Required calibration data, may be nested Flux pulse Waveform to be played in the qubit flux AWG. True iff the implementation is symmetric in its locus components.\nOnly meaningful if arity != 1 , and the locus components are of the same type. previous CZ_GaussianSmoothedSquare next CZ_Slepian_ACStarkCRF \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "TimeBox",
    "url": "/iqm-pulse/api/iqm.pulse.timebox.TimeBox.html",
    "description": "Bases: object Container for one or more instruction schedule fragments, to be scheduled according to a given strategy. Each TimeBox can be labeled using a human-readable label describing it, and opera...",
    "content": "Bases: object Container for one or more instruction schedule fragments, to be scheduled according to a given strategy. Each TimeBox can be labeled using a human-readable label describing it, and operates on a number\nof locus components , using some of their control channels.  It can be either atomic or composite . An atomic box only contains a single Schedule . A composite box contains a sequence of other TimeBoxes as its children.\nThe locus components are the union of the locus components of the children.\nIf two children use the same channel so that they cannot happen simultaneously, they must\nhappen in the order they occur in the sequence. A box can be made atomic by resolving it using ScheduleBuilder.resolve_timebox .\nThe time duration of the box is determined by its contents and the way they are scheduled during the resolution. TimeBoxes can be concatenated with the following rules: Addition concatenates the children of the operands into a single TimeBox. The pipe operation groups two TimeBoxes together without concatenating. Iterables of Boxes are treated as the sum of the elements. Let a, b, c, d be TimeBoxes. Then Module: iqm.pulse.timebox Attributes scheduling Determines how the contents of a composite TimeBox are scheduled by ScheduleBuilder. scheduling_algorithm Determines the algorithm used in converting the TimeBox to a Schedule. label Description the contents of the box for users' convenience. locus_components Names of the QPU components on which this timebox operates. atom Resolved contents of the TimeBox, or None if not resolved. children Further Timeboxes inside this TimeBox. neighborhood_components Dict of neighborhood range integers mapped to sets of components neighboring the locus of this TimeBox . Methods atomic Build an atomic timebox from a schedule. composite Build a composite timebox from a sequence of timeboxes. print Print a simple representation of the contents of this box. set_alap Set the scheduling strategy to As late as possible (ALAP). set_asap Set the scheduling strategy to As soon as possible (ASAP). validate Validate the contents of the TimeBox. label ( str ) \u2013 locus_components ( set [ str ] ) \u2013 atom ( Schedule | None ) \u2013 children ( tuple [ TimeBox , ... ] ) \u2013 scheduling ( SchedulingStrategy ) \u2013 scheduling_algorithm ( SchedulingAlgorithm ) \u2013 neighborhood_components ( dict [ int , set [ str ] ] ) \u2013 Description the contents of the box for users\u2019 convenience. Has no functional effect. Names of the QPU components on which this timebox operates. These can include additional components\nto the ones included in one of the channels occupied by this TimeBox . The components included in this\nattribute will be blocked in scheduling, in addition to the ones dictated by the neighborhood range (see neighborhood_components ). Resolved contents of the TimeBox, or None if not resolved. Further Timeboxes inside this TimeBox. Determines how the contents of a composite TimeBox are scheduled by ScheduleBuilder.\nHas no meaning for an atomic TimeBox. Determines the algorithm used in converting the TimeBox to a Schedule. Dict of neighborhood range integers mapped to sets of components neighboring the locus of this TimeBox .\nThese are used in the scheduling when the corresponding neighborhood range is used.\nThe scheduling algorithm computes the neighborhood components (unless it has been already precomputed by\ne.g. the GateImplementation ) and caches them under this attribute. Neighborhood range 0 means just the components\naffected by one of the channels in self.atom + self.locus , 1 means also neighboring couplers, 2 the\ncomponents connected to those couplers, and so on. Note: range 0 may differ from self.locus_components : it can\nhave additional components that have occupied channels in self but are not defined as a part of the \u2018locus\u2019 of\nthis TimeBox for any reason. Build a composite timebox from a sequence of timeboxes. boxes ( Iterable [ TimeBox | Iterable [ TimeBox ] ] ) \u2013 contents of the new timebox. Any iterables of timeboxes will be flattened (recursively) and extended\nto the contents in the same order. label ( str ) \u2013 label of the new timebox scheduling ( SchedulingStrategy ) \u2013 scheduling strategy to use when resolving the new timebox scheduling_algorithm ( SchedulingAlgorithm ) \u2013 scheduling algorithm to use when resolving the new timebox composite timebox containing boxes as its children TimeBox Build an atomic timebox from a schedule. schedule ( Schedule ) \u2013 contents of the new timebox locus_components ( Iterable [ str ] ) \u2013 names QPU components schedule operates on label ( str ) \u2013 label of the new timebox atomic timebox containing schedule TimeBox Validate the contents of the TimeBox. path ( tuple [ str , ... ] ) \u2013 Labels of ancestor boxes, to generate a better error message. None Set the scheduling strategy to As soon as possible (ASAP). TimeBox Set the scheduling strategy to As late as possible (ALAP). TimeBox Print a simple representation of the contents of this box. _idxs ( tuple [ int , ... ] ) \u2013 None previous SchedulingStrategy next utils \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "Measure_CustomWaveforms",
    "url": "/iqm-pulse/api/iqm.pulse.gates.measure.Measure_CustomWaveforms.html",
    "description": "Bases: CustomIQWaveforms Base class for implementing dispersive measurement operations with custom probe pulse waveforms. You may define a measurement implementation that uses the Waveform instances S...",
    "content": "Bases: CustomIQWaveforms Base class for implementing dispersive measurement operations with custom probe pulse waveforms. You may define a measurement implementation that uses the Waveform instances Something and SomethingElse as the probe pulse waveforms in the\nI and Q channels as follows: class MyGate(Measure_CustomWaveforms, i_wave=Something, q_wave=SomethingElse) . The measure operation is factorizable, and its arity is 0, which together mean that it can operate\non loci of any dimensionality, but is calibrated only on single component loci. When the gate is constructed in the len(locus) > 1 , case (e.g. builder.get_implementation('measure', ('QB1', 'QB2', 'QB3'))() ) the resulting TimeBox is constructed from the calibrated single-component gates. For each measured component, the readout IQPulse will be modulated with the\nintermediate frequency (IF), computed as the difference between the readout\nfrequency of that component and the probe line center frequency, and offset in phase\nby the readout phase of the component. The measurement is implemented using a ReadoutTrigger instruction, with a duration set by the\nrequirements of the acquisition(s). Note that this is typically different from gates.measure.constant.{locus}.duration , which is the probe pulse duration. Module: iqm.pulse.gates.measure Attributes dependent_waves If set True , the Q channel waveform is considered to depend on the I channel's waveform so that they share the waveform parameters, (e.g. a DRAG PRX implementation). root_parameters Parameters independent of the of Waveforms. wave_i Waveform for the I channel. wave_q Waveform for the Q channel. Methods duration_in_seconds Duration of the Schedule of the gate implementation (in seconds). get_locus_mapping_name Get the name of the locus mapping stored in ScheduleBuilder.ChipTopology for this implementation. probe_timebox Returns a \"naked\" probe timebox that supports convenient multiplexing through MultiplexedProbeTimeBox.__add__ . time_trace Returns a multiplexed simultaneous measurement with an additional time trace acquisition. parent ( QuantumOp ) \u2013 name ( str ) \u2013 locus ( Locus ) \u2013 calibration_data ( OILCalibrationData ) \u2013 builder ( ScheduleBuilder ) \u2013 Parameters independent of the of Waveforms. Inheriting classes may override this to include parameters common\nto all such implementations. Cache for probe_timebox() . Cache for time_trace() . Builds a probe pulse and an acquisition method using the calibration data. Subclasses may override this method if needed. waveform_params ( dict [ str , Any ] ) \u2013 root_params ( dict [ str , Any ] ) \u2013 if_freq ( float ) \u2013 tuple [ IQPulse , AcquisitionMethod ] Returns a \u201cnaked\u201d probe timebox that supports convenient multiplexing through MultiplexedProbeTimeBox.__add__ . This method can be used if the user wants to control the multiplexing explicitly. With two MultiplexedProbeTimeBox``es ``A and B the result A + B has all the ReadoutTrigger instructions\non each probe channel of A and B multiplexed together and played simultaneously. key ( str ) \u2013 The readout results generated on this trigger will be assigned to f\"{qubit}__{key}\" , where qubit goes over the component names in self.locus . If empty,\nthe key \u201creadout.result\u201d will be used to maintain backwards compatibility. feedback_key ( str ) \u2013 The signals generated by this measure operation are routed using this key for\nfast feedback purposes. See __call__() . do_acquisition ( bool ) \u2013 if False, no acquisitions are added. MultiplexedProbeTimeBox containing the ReadoutTrigger instruction. MultiplexedProbeTimeBox Returns a TimeBox containing the multiplexed simultaneous measurement. If len(self.locus) == 1 , the TimeBox contains the measurement for just that component, otherwise\nthe measurements of components that belong to the same probeline are multiplexed together. The returned TimeBox instances behave like any other TimeBox in scheduling and circuit\ngeneration. With measurement TimeBoxes A and B the result A + B first plays the ReadoutTrigger instructions of A and only then those of B in each probe channel. If the multiplexing features of MultiplexedProbeTimeBox are needed, the method probe_timebox() can be used. In scheduling, the returned TimeBox blocks the locus components and the probe\nlines they are associated with. key ( str ) \u2013 Readout results generated on this trigger will be assigned to the acquisition labels f\"{qubit}__{key}\" , where qubit goes over the component names in self.locus .\nIf empty, the key \"readout.result\" will be used to maintain backwards compatibility. feedback_key ( str ) \u2013 If the readout mode is \u201cthreshold\u201d, the results generated by this measure operation\nare routed using the label f\"{qubit}__{feedback_key}\" for fast feedback purposes.\nThe signals are picked up by ConditionalInstruction`s that have the same label. The default value ` \u201d\u201d`` means the signal is not routed anywhere. TODO: currently the HW does not\nsupport multiple feedback keys per drive channel, so the actual key used will be FEEDBACK_KEY whenever any non-empty key is inputted. When the HW is improved, the actual key the user inputs\nshould be passed. TimeBox containing the ReadoutTrigger instruction. TimeBox Returns a multiplexed simultaneous measurement with an additional time trace acquisition. The returned TimeBox is the same as the one returned by __call__() except the time trace\nacquisition is appended to the acquisitions of each probe line\u2019s ReadoutTrigger instruction. key ( str ) \u2013 Readout results generated on this trigger will be used to assigned to f\"{qubit}__{key}\" , where qubit goes over the component names in self.locus , whereas\nthe recorded time traces will be assigned to f\"{probe_line}__{key}\" where probe_line goes through all the probe lines associated with self.locus .\nIf empty, the key \"readout.result\" will be used for integrated results and the key \"readout.time_trace\" for the recorded time traces. acquisition_delay ( float | None ) \u2013 optionally override the time trace acquisition delay with this value (given in\nseconds). Does not affect the acqusition delays of the integrated measurements. acquisition_duration ( float | None ) \u2013 optionally override the time trace acquisition duration with this value (given in\nseconds). Does not affect the integration lengths of the integrated measurements. feedback_key ( str ) \u2013 The signals generated by the integration are routed using this label, prefixed by\nthe component. See __call__() . TimeBox containing the ReadoutTrigger instruction. TimeBox Duration of the Schedule of the gate implementation (in seconds). Can be left unimplemented if the duration e.g. depends on the gate arguments.\nSubclasses can reimplement this method in case it makes sense in their context. float Get the name of the locus mapping stored in ScheduleBuilder.ChipTopology for this implementation. By default, it is \"<operation_name>.<implementation_name>\" . Inheriting classes may\noverride this for different behaviour. operation_name ( str ) \u2013 name of the quantum operation. implementation_name ( str ) \u2013 name of the implementation name of the locus mapping str If set True , the Q channel waveform is considered to depend on the I channel\u2019s waveform\nso that they share the waveform parameters, (e.g. a DRAG PRX implementation). If not provided,\nwill be initialised as True . previous Measure_Constant next ProbePulse_CustomWaveforms \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.quantum_ops.validate_locus_calibration",
    "url": "/iqm-pulse/api/iqm.pulse.quantum_ops.validate_locus_calibration.html",
    "description": "Validates calibration for a particular gate implementation at particular locus. cal_data ( OILCalibrationData ) \u2013 Calibration data tree for the locus. impl ( type [ GateImplementation ] ) \u2013 GateImplem...",
    "content": "Validates calibration for a particular gate implementation at particular locus. cal_data ( OILCalibrationData ) \u2013 Calibration data tree for the locus. impl ( type [ GateImplementation ] ) \u2013 GateImplementation class that defines the required parameters. op ( QuantumOp ) \u2013 QuantumOp that impl implements. impl_name ( str ) \u2013 name of the implementation, for error messages. locus ( tuple [ str , ... ] ) \u2013 Locus of the operation ValueError \u2013 there is something wrong with the calibration data None previous iqm.pulse.quantum_ops.QuantumOpTable next iqm.pulse.quantum_ops.validate_op_calibration \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "ChirpImag",
    "url": "/iqm-pulse/api/iqm.pulse.playlist.waveforms.ChirpImag.html",
    "description": "Bases: Chirp Imaginary part of the linear chirp, which sets the phase to $-pi/2$. n_samples ( int ) \u2013 freq_start ( float ) \u2013 freq_stop ( float ) \u2013 alpha ( float ) \u2013 phase ( float ) \u2013 Phase of the puls...",
    "content": "Bases: Chirp Imaginary part of the linear chirp, which sets the phase to $-pi/2$. n_samples ( int ) \u2013 freq_start ( float ) \u2013 freq_stop ( float ) \u2013 alpha ( float ) \u2013 phase ( float ) \u2013 Phase of the pulse. Defaults to $pi/2$ float Module: iqm.pulse.playlist.waveforms Attributes phase  freq_start  freq_stop  n_samples Requested number of samples for the waveform. Methods previous Chirp next Cosine \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "gates",
    "url": "/iqm-pulse/api/iqm.pulse.gates.html",
    "description": "GateImplementations for implementing quantum gates. The GateImplementation subclasses in this subpackage construct TimeBox instances to\nimplement specific native gates, using the calibration data that...",
    "content": "GateImplementations for implementing quantum gates. The GateImplementation subclasses in this subpackage construct TimeBox instances to\nimplement specific native gates, using the calibration data that the class has been initialized with.\nEach GateImplementation instance encapsulates the calibration data for a specific implementation of a specific\nnative gate acting on a specific locus. Several different implementations and calibration schemes can be supported for a given gate,\neach represented by its own GateImplementation subclass.\nLikewise, a single GateImplementation subclass can be sometimes used to implement several different gates\nthrough different calibration data. Full path: iqm.pulse.gates Functions expose_implementation (implementation[,\u00a0...]) Add the given gate implementation to the list of known implementations. get_implementation_class (class_name) Get gate implementation class by class name. register_implementation (operations,\u00a0...[,\u00a0...]) Register a new gate implementation, and a new gate if needed. Subpackages and modules barrier Barrier metaoperation. conditional Classically controlled gates. cz Two-qubit controlled-Z (CZ) gate. enums Enumerations for representing a set of important one- and two-qubit gates. measure Projective measurement in the Z basis. move Two-qubit MOVE gate. prx Single-qubit PRX gate. reset Resetting qubits to the zero state. rz Single-qubit RZ gate. sx Single-qubit sqrt(X) gate. u Single-qubit SU(2) gate. previous SinglePulseGate next iqm.pulse.gates.expose_implementation \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "PRX_SinglePulse_GateImplementation",
    "url": "/iqm-pulse/api/iqm.pulse.gates.prx.PRX_SinglePulse_GateImplementation.html",
    "description": "Bases: SinglePulseGate , PRX_GateImplementation ABC for PRX gates implemented using a single IQ pulse. This class implements phased x rotation gates on a specific qubit using an IQPulse instance, deri...",
    "content": "Bases: SinglePulseGate , PRX_GateImplementation ABC for PRX gates implemented using a single IQ pulse. This class implements phased x rotation gates on a specific qubit using an IQPulse instance, derived from the pulse calibration data provided at construction by\nthe static method _single_iq_pulse() .\nThe pulse is used to resonantly drive the qubit to effect the required rotation. The pulse calibration data consists of the parameters of an \\(x_\\pi\\) IQPulse only.\nIt is assumed that the transfer function from the AWG to the qubit is linear, i.e.,\nother rotation angles can be obtained by linearly scaling the pulse amplitude, and other phase angles can be obtained by adjusting the IQ modulation phase. The generated pulses all have the same time duration, also for identity rotations. In the special case of the\nduration being zero, the gate implementation will apply a Block(0) instruction to the qubit\u2019s drive channel. Module: iqm.pulse.gates.prx Attributes iq_pulse Alias for self.pulse for backward compatibility Methods parent ( QuantumOp ) \u2013 name ( str ) \u2013 locus ( Locus ) \u2013 calibration_data ( OILCalibrationData ) \u2013 builder ( ScheduleBuilder ) \u2013 Phased x rotation gate. angle ( float ) \u2013 rotation angle (in radians) phase ( float ) \u2013 phase angle (in radians) boxed instruction schedule implementing the phased x rotation gate TimeBox Alias for self.pulse for backward compatibility previous PRX_GateImplementation next reset \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "FluxPulseGate",
    "url": "/iqm-pulse/api/iqm.pulse.gates.cz.FluxPulseGate.html",
    "description": "Bases: GateImplementation Discrete two locus component gate implemented using flux pulses, virtual RZs,\nand the interaction mediated by the coupler. Does not take any parameters since it is discrete. ...",
    "content": "Bases: GateImplementation Discrete two locus component gate implemented using flux pulses, virtual RZs,\nand the interaction mediated by the coupler. Does not take any parameters since it is discrete. The two locus components of the gate must be coupled by a tunable coupler. Consists of a flux pulse for the coupler, and possibly another one for the first locus component,\nassumed to be a qubit, both with arbitrary waveforms, and virtual RZs on both components.\nInherit from this class and assign\nwaveforms to the coupler_wave and qubit_wave pulse slots to create a specific implementation. Can be used as a base class for both CZ and MOVE gate implementations. Note: the coupler and qubit pulses typically have the same duration (given in the calibration data), and in the\nspecial case of the duration being zero, the gate implementation will apply Block(0) instructions\nto all the channels where it would otherwise apply flux pulses or virtual z rotations. flux_pulses \u2013 mapping from flux channel name to its flux pulse rz \u2013 mapping from drive channel name to the virtual z rotation angle, in radians, that should be performed on it parent ( QuantumOp ) \u2013 name ( str ) \u2013 locus ( Locus ) \u2013 calibration_data ( OILCalibrationData ) \u2013 builder ( ScheduleBuilder ) \u2013 Module: iqm.pulse.gates.cz Attributes excluded_parameters Parameters names to be excluded from self.parameters . root_parameters Parameters shared by all FluxPulseGate classes. coupler_wave Flux pulse Waveform to be played in the coupler flux AWG. qubit_wave Flux pulse Waveform to be played in the qubit flux AWG. Methods duration_in_seconds Duration of the Schedule of the gate implementation (in seconds). get_locus_mapping_name Get the name of the locus mapping stored in ScheduleBuilder.ChipTopology for this implementation. Flux pulse Waveform to be played in the coupler flux AWG. Flux pulse Waveform to be played in the qubit flux AWG. Parameters shared by all FluxPulseGate classes. Inheriting classes may override this if there\u2019s\na need for additional calibration parameters. Parameters names to be excluded from self.parameters . Inheriting classes may override this if certain\nparameters are not wanted in that class (also parameters defined by the waveforms can be excluded). The GateImplementation-specific logic for implementing a quantum operation. Inheriting classes may override this method if the default __call__() caching (based on the args & kwargs\nin the signature) is sufficient. Any additional caching may also be implemented inside this function if needed. TimeBox Duration of the Schedule of the gate implementation (in seconds). Can be left unimplemented if the duration e.g. depends on the gate arguments.\nSubclasses can reimplement this method in case it makes sense in their context. float Get the name of the locus mapping stored in ScheduleBuilder.ChipTopology for this implementation. By default, it is \"<operation_name>.<implementation_name>\" . Inheriting classes may\noverride this for different behaviour. operation_name ( str ) \u2013 name of the quantum operation. implementation_name ( str ) \u2013 name of the implementation name of the locus mapping str previous CouplerFluxPulseQubitACStarkPulseGate next FluxPulseGate_CRF_CRF \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "VirtualRZ",
    "url": "/iqm-pulse/api/iqm.pulse.playlist.instructions.VirtualRZ.html",
    "description": "Bases: Instruction Change the upconversion phase reference. The phase change can be done either by updating the phase of the local oscillator directly using\na hardware instruction, or algebraically by...",
    "content": "Bases: Instruction Change the upconversion phase reference. The phase change can be done either by updating the phase of the local oscillator directly using\na hardware instruction, or algebraically by incrementing IQPulse.phase of all the IQPulses\nfollowing the VirtualRZ instruction in the Segment . Module: iqm.pulse.playlist.instructions Attributes phase_increment Phase increment for the local oscillator of a drive channel, in radians. duration Time duration of the instruction. Methods duration ( int ) \u2013 phase_increment ( float ) \u2013 Phase increment for the local oscillator of a drive channel, in radians. previous TimeTrace next Wait \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.validation.PlaylistValidationError",
    "url": "/iqm-pulse/api/iqm.pulse.validation.PlaylistValidationError.html",
    "description": "Error raised when Playlist validation fails. previous iqm.pulse.validation.InvalidInstructionError next Changelog \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04....",
    "content": "Error raised when Playlist validation fails. previous iqm.pulse.validation.InvalidInstructionError next Changelog \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.utils.map_waveform_param_types",
    "url": "/iqm-pulse/api/iqm.pulse.utils.map_waveform_param_types.html",
    "description": "Map a python typehint into EXA Parameter\u2019s (DataType, CollectionType) tuple. type \u2013 python typehint. type_hint ( type ) \u2013 A (DataType, CollectionType) tuple ValueError \u2013 for a non-supported type. tupl...",
    "content": "Map a python typehint into EXA Parameter\u2019s (DataType, CollectionType) tuple. type \u2013 python typehint. type_hint ( type ) \u2013 A (DataType, CollectionType) tuple ValueError \u2013 for a non-supported type. tuple [ DataType , CollectionType ] previous iqm.pulse.utils.load_yaml next iqm.pulse.utils.merge_dicts \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "SinglePulseGate",
    "url": "/iqm-pulse/api/iqm.pulse.gate_implementation.SinglePulseGate.html",
    "description": "Bases: GateImplementation Base class for GateImplementations that play a single pulse on a single channel. The pulse is created in _get_pulse() and the channel is specified in _get_pulse_channel() .\nT...",
    "content": "Bases: GateImplementation Base class for GateImplementations that play a single pulse on a single channel. The pulse is created in _get_pulse() and the channel is specified in _get_pulse_channel() .\nThe base class also implements a basic _call() method that just inserts the specified pulse into the specified\nchannel, and a method for computing the pulse\u2019s duration. All of these methods can be overridden in subclasses. Module: iqm.pulse.gate_implementation Attributes Methods duration_in_seconds Duration of the Schedule of the gate implementation (in seconds). parent ( QuantumOp ) \u2013 name ( str ) \u2013 locus ( Locus ) \u2013 calibration_data ( OILCalibrationData ) \u2013 builder ( ScheduleBuilder ) \u2013 The GateImplementation-specific logic for implementing a quantum operation. Inheriting classes may override this method if the default __call__() caching (based on the args & kwargs\nin the signature) is sufficient. Any additional caching may also be implemented inside this function if needed. TimeBox Return the channel for the pulse. The default is the drive channel for a single qubit locus. str Return pulse based on the provided calibration data. Instruction Duration of the Schedule of the gate implementation (in seconds). Can be left unimplemented if the duration e.g. depends on the gate arguments.\nSubclasses can reimplement this method in case it makes sense in their context. float previous GateImplementation next gates \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "IQPulse",
    "url": "/iqm-pulse/api/iqm.pulse.playlist.instructions.IQPulse.html",
    "description": "Bases: Instruction Play an upconverted pulse that contains real in-phase and quadrature waveforms. Module: iqm.pulse.playlist.instructions Attributes modulation_frequency Modulation frequency of the w...",
    "content": "Bases: Instruction Play an upconverted pulse that contains real in-phase and quadrature waveforms. Module: iqm.pulse.playlist.instructions Attributes modulation_frequency Modulation frequency of the waveforms, in units of the sampling rate. phase Phase of the pulse relative to the channel frequency, in radians. phase_increment Relative phase increment to the phase in the carrier frequency of this pulse and all pulses that are played after it. scale_i Scaling factor for the I quadrature. scale_q Scaling factor for the Q quadrature. wave_i I quadrature envelope. wave_q Q quadrature envelope. duration Time duration of the instruction. Methods get_waveforms Returns all the waveforms the Instruction contains. validate Validate the instruction attributes. duration ( int ) \u2013 wave_i ( Waveform ) \u2013 wave_q ( Waveform ) \u2013 scale_i ( float ) \u2013 scale_q ( float ) \u2013 phase ( float ) \u2013 modulation_frequency ( float ) \u2013 phase_increment ( float ) \u2013 I quadrature envelope. Q quadrature envelope. Scaling factor for the I quadrature. Scaling factor for the Q quadrature. Phase of the pulse relative to the channel frequency, in radians. Modulation frequency of the waveforms, in units of the sampling rate.\nThis modulation is additional to the channel frequency.\nThe default value of 0.0 does not modulate.\nNote that the phase of this modulation resets for every instruction, that is, successive instances of the same\nmodulated pulse are not phase coherent. Relative phase increment to the phase in the carrier frequency of this pulse and all pulses that\nare played after it. Unit: rad. Validate the instruction attributes. ValueError \u2013 something about the instruction is not ok Returns all the waveforms the Instruction contains. tuple [ Waveform , \u2026] previous ConditionalInstruction next Instruction \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.utils.load_yaml",
    "url": "/iqm-pulse/api/iqm.pulse.utils.load_yaml.html",
    "description": "Load a YAML file from the given path, raise error if the file can\u2019t be loaded. path ( str ) \u2013 path to a YAML file contents of the YAML file as Python types dict [ str , Any ] previous utils next iqm.p...",
    "content": "Load a YAML file from the given path, raise error if the file can\u2019t be loaded. path ( str ) \u2013 path to a YAML file contents of the YAML file as Python types dict [ str , Any ] previous utils next iqm.pulse.utils.map_waveform_param_types \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "ChannelConfiguration",
    "url": "/iqm-pulse/api/iqm.pulse.playlist.channel.ChannelConfiguration.html",
    "description": "Bases: object Base class for configuring channels. Module: iqm.pulse.playlist.channel Methods previous iqm.pulse.playlist.channel.get_channel_properties_from_station_settings next ChannelDescription \u00a9...",
    "content": "Bases: object Base class for configuring channels. Module: iqm.pulse.playlist.channel Methods previous iqm.pulse.playlist.channel.get_channel_properties_from_station_settings next ChannelDescription \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "MOVE_TGSS_CRF",
    "url": "/iqm-pulse/api/iqm.pulse.gates.move.MOVE_TGSS_CRF.html",
    "description": "Bases: MOVE_CustomWaveforms Qubit-resonator MOVE gate using the TGSS waveform for the coupler flux pulse and the\nCRF waveform for the qubit flux pulse. Module: iqm.pulse.gates.move Attributes paramete...",
    "content": "Bases: MOVE_CustomWaveforms Qubit-resonator MOVE gate using the TGSS waveform for the coupler flux pulse and the\nCRF waveform for the qubit flux pulse. Module: iqm.pulse.gates.move Attributes parameters Required calibration data, may be nested symmetric True iff the implementation is symmetric in its locus components. Methods parent ( QuantumOp ) \u2013 name ( str ) \u2013 locus ( Locus ) \u2013 calibration_data ( OILCalibrationData ) \u2013 builder ( ScheduleBuilder ) \u2013 alias of TruncatedGaussianSmoothedSquare Required calibration data, may be nested alias of CosineRiseFall True iff the implementation is symmetric in its locus components.\nOnly meaningful if arity != 1 , and the locus components are of the same type. previous MOVE_CustomWaveforms next MoveMarker \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "CZ_TruncatedGaussianSmoothedSquare",
    "url": "/iqm-pulse/api/iqm.pulse.gates.cz.CZ_TruncatedGaussianSmoothedSquare.html",
    "description": "Bases: FluxPulseGate CZ gate using a TruncatedGaussianSmoothedSquare flux pulse on the coupler. Module: iqm.pulse.gates.cz Attributes parameters Required calibration data, may be nested qubit_wave Flu...",
    "content": "Bases: FluxPulseGate CZ gate using a TruncatedGaussianSmoothedSquare flux pulse on the coupler. Module: iqm.pulse.gates.cz Attributes parameters Required calibration data, may be nested qubit_wave Flux pulse Waveform to be played in the qubit flux AWG. symmetric True iff the implementation is symmetric in its locus components. Methods parent ( QuantumOp ) \u2013 name ( str ) \u2013 locus ( Locus ) \u2013 calibration_data ( OILCalibrationData ) \u2013 builder ( ScheduleBuilder ) \u2013 alias of TruncatedGaussianSmoothedSquare Required calibration data, may be nested Flux pulse Waveform to be played in the qubit flux AWG. True iff the implementation is symmetric in its locus components.\nOnly meaningful if arity != 1 , and the locus components are of the same type. previous CZ_Slepian_CRF next CouplerFluxPulseQubitACStarkPulseGate \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "instructions",
    "url": "/iqm-pulse/api/iqm.pulse.playlist.instructions.html",
    "description": "Instructions for control instruments. Full path: iqm.pulse.playlist.instructions Classes AcquisitionMethod Describes a way to acquire readout data. Block Behave strictly as if outputting zero-valued s...",
    "content": "Instructions for control instruments. Full path: iqm.pulse.playlist.instructions Classes AcquisitionMethod Describes a way to acquire readout data. Block Behave strictly as if outputting zero-valued samples for the duration of the instruction. ComplexIntegration Perform a weighted integration of the IQ raw signal, resulting in a complex number. ConditionalInstruction Choice between multiple Instructions, depending on a condition. IQPulse Play an upconverted pulse that contains real in-phase and quadrature waveforms. Instruction Command that can be executed by the quantum computer on a control channel. MultiplexedIQPulse Instruction to simultaneously play multiple IQ pulses. ReadoutTrigger Instruction for playing a probe pulse and acquiring the associated readout results. RealPulse Play a real-valued pulse. ThresholdStateDiscrimination Perform a weighted integration of the IQ raw signal and compare the real part of the result against a threshold value, resulting in a boolean. TimeTrace Capture the raw IQ signal without integration. VirtualRZ Change the upconversion phase reference. Wait Behave as if outputting zero-valued samples for the duration of the instruction. Inheritance previous RealChannelConfig next AcquisitionMethod \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.gates.enums.XYGATE_UNITARIES",
    "url": "/iqm-pulse/api/iqm.pulse.gates.enums.XYGATE_UNITARIES.html",
    "description": "Mapping of XYGates to the corresponding SU(2) matrices previous enums next iqm.pulse.gates.enums.TWO_QUBIT_UNITARIES \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04....",
    "content": "Mapping of XYGates to the corresponding SU(2) matrices previous enums next iqm.pulse.gates.enums.TWO_QUBIT_UNITARIES \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "playlist",
    "url": "/iqm-pulse/api/iqm.pulse.playlist.html",
    "description": "Control pulses and pulse sequences for quantum processors. Full path: iqm.pulse.playlist Subpackages and modules channel Control channel properties. instructions Instructions for control instruments. ...",
    "content": "Control pulses and pulse sequences for quantum processors. Full path: iqm.pulse.playlist Subpackages and modules channel Control channel properties. instructions Instructions for control instruments. playlist Sequences of instruction schedules to execute. schedule Instruction schedules for controlling the instruments. visualisation  waveforms Waveform definitions. previous UGate next channel \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "ThresholdStateDiscrimination",
    "url": "/iqm-pulse/api/iqm.pulse.playlist.instructions.ThresholdStateDiscrimination.html",
    "description": "Bases: ComplexIntegration Perform a weighted integration of the IQ raw signal and compare the real part of the result\nagainst a threshold value, resulting in a boolean. Module: iqm.pulse.playlist.inst...",
    "content": "Bases: ComplexIntegration Perform a weighted integration of the IQ raw signal and compare the real part of the result\nagainst a threshold value, resulting in a boolean. Module: iqm.pulse.playlist.instructions Attributes feedback_signal_label In fast feedback routing, the transmitted signals are associated with this label. threshold The real part of the integration result is compared against this. weights Integration weights. label Identifier for the returned data, like QB1__readout.time_trace . delay_samples Delay from beginning of probe pulse to beginning of acquisition window, in samples. Methods label ( str ) \u2013 delay_samples ( int ) \u2013 weights ( IQPulse ) \u2013 threshold ( float ) \u2013 feedback_signal_label ( str ) \u2013 The real part of the integration result is compared against this. In fast feedback routing, the transmitted signals are associated with this label.\nConditionalInstructions whose \u201ccondition\u201d field has the string value of feedback_signal_label will receive the signal from this ThresholdStateDiscrimination.\nEmpty string (default) means the signal is not routed anywhere.\nThe same feedback_signal_label may not be used multiple times within the same ReadoutTrigger.\nThe same feedback_signal_label can be used in different ReadoutTriggers and different segments. previous RealPulse next TimeTrace \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.gate_implementation.SINGLE_COMPONENTS_WITH_READOUT_LOCUS_MAPPING",
    "url": "/iqm-pulse/api/iqm.pulse.gate_implementation.SINGLE_COMPONENTS_WITH_READOUT_LOCUS_MAPPING.html",
    "description": "Locus mapping name for mapping all components that have the readout operation defined. previous iqm.pulse.gate_implementation.SINGLE_COMPONENTS_WITH_DRIVE_LOCUS_MAPPING next iqm.pulse.gate_implementat...",
    "content": "Locus mapping name for mapping all components that have the readout operation defined. previous iqm.pulse.gate_implementation.SINGLE_COMPONENTS_WITH_DRIVE_LOCUS_MAPPING next iqm.pulse.gate_implementation.SINGLE_COMPONENTS_WITH_FLUX_AWG_LOCUS_MAPPING \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "RZ_ACStarkShift_CosineRiseFall",
    "url": "/iqm-pulse/api/iqm.pulse.gates.rz.RZ_ACStarkShift_CosineRiseFall.html",
    "description": "Bases: RZ_ACStarkShift AC stark pulse implemented as a modulated cosine rise fall pulse. Constructs an instance of the AC Stark pulse for the given locus. Module: iqm.pulse.gates.rz Attributes paramet...",
    "content": "Bases: RZ_ACStarkShift AC stark pulse implemented as a modulated cosine rise fall pulse. Constructs an instance of the AC Stark pulse for the given locus. Module: iqm.pulse.gates.rz Attributes parameters Required calibration data, may be nested symmetric True iff the implementation is symmetric in its locus components. Methods parent ( QuantumOp ) \u2013 name ( str ) \u2013 locus ( Locus ) \u2013 calibration_data ( OILCalibrationData ) \u2013 builder ( ScheduleBuilder ) \u2013 alias of ModulatedCosineRiseFall Required calibration data, may be nested True iff the implementation is symmetric in its locus components.\nOnly meaningful if arity != 1 , and the locus components are of the same type. previous RZ_ACStarkShift next RZ_Virtual \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "quantum_ops",
    "url": "/iqm-pulse/api/iqm.pulse.quantum_ops.html",
    "description": "Quantum operations. Full path: iqm.pulse.quantum_ops Module Attributes QuantumOpTable Type for representing tables of known quantum operations, maps names of the ops to their definitions. Functions va...",
    "content": "Quantum operations. Full path: iqm.pulse.quantum_ops Module Attributes QuantumOpTable Type for representing tables of known quantum operations, maps names of the ops to their definitions. Functions validate_locus_calibration (cal_data,\u00a0impl,\u00a0...) Validates calibration for a particular gate implementation at particular locus. validate_op_calibration (calibration,\u00a0ops) Validates quantum operation calibration data against the known quantum operations. Classes QuantumOp Describes a native quantum operation type. Inheritance previous Slepian next iqm.pulse.quantum_ops.QuantumOpTable \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "ChannelDescription",
    "url": "/iqm-pulse/api/iqm.pulse.playlist.channel.ChannelDescription.html",
    "description": "Bases: object Channel specific data, including tables for the instructions and waveforms used. name ( str ) \u2013 name of the controller handling the channel, also the name of the channel config ( RealCha...",
    "content": "Bases: object Channel specific data, including tables for the instructions and waveforms used. name ( str ) \u2013 name of the controller handling the channel, also the name of the channel config ( RealChannelConfig ) \u2013 properties of the channel instruction_table \u2013 mapping of the instructions to be executed on this channel. Each\ninstruction should be unique. waveform_table \u2013 Contains mapping of the waveforms to be executed on this channel. Each\nwaveform should be unique. Module: iqm.pulse.playlist.channel Attributes name  config  instruction_table  waveform_table  Methods add_instruction Add an instruction to the channel. Add an instruction to the channel. Each unique instruction in a channel gets assigned an integer index that can be used to refer to it.\nIf the instruction has associated Waveform s, they are indexed in a similar manner. instruction ( Instruction ) \u2013 instruction to be added index of the instruction int previous ChannelConfiguration next ChannelProperties \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.validation.validate_instruction_and_wf_length",
    "url": "/iqm-pulse/api/iqm.pulse.validation.validate_instruction_and_wf_length.html",
    "description": "Validate that instruction and waveform lengths match instruction ( Instruction ) \u2013 The IQPulse or RealPulse to be validated previous iqm.pulse.validation.validate_channel next iqm.pulse.validation.val...",
    "content": "Validate that instruction and waveform lengths match instruction ( Instruction ) \u2013 The IQPulse or RealPulse to be validated previous iqm.pulse.validation.validate_channel next iqm.pulse.validation.validate_playlist_compatibility \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "MultiplexedProbeTimeBox",
    "url": "/iqm-pulse/api/iqm.pulse.timebox.MultiplexedProbeTimeBox.html",
    "description": "Bases: TimeBox A TimeBox that contains any number of multiplexed readout pulses for probe channels. A MultiplexedProbeTimeBox \u2019s atom contains exactly one ReadoutTrigger for each probe channel. Module...",
    "content": "Bases: TimeBox A TimeBox that contains any number of multiplexed readout pulses for probe channels. A MultiplexedProbeTimeBox \u2019s atom contains exactly one ReadoutTrigger for each probe channel. Module: iqm.pulse.timebox Attributes label Description the contents of the box for users' convenience. locus_components Names of the QPU components on which this timebox operates. atom Resolved contents of the TimeBox, or None if not resolved. children Further Timeboxes inside this TimeBox. neighborhood_components Dict of neighborhood range integers mapped to sets of components neighboring the locus of this TimeBox . Methods from_readout_trigger Build an atomic MultiplexedProbeTimeBox` from a single ``ReadoutTrigger instruction. label ( str ) \u2013 locus_components ( set [ str ] ) \u2013 atom ( Schedule | None ) \u2013 children ( tuple [ TimeBox , ... ] ) \u2013 scheduling ( SchedulingStrategy ) \u2013 scheduling_algorithm ( SchedulingAlgorithm ) \u2013 neighborhood_components ( dict [ int , set [ str ] ] ) \u2013 Build an atomic MultiplexedProbeTimeBox` from a single ``ReadoutTrigger instruction. readout_trigger ( ReadoutTrigger ) \u2013 Readout trigger instruction. probe_channel ( str ) \u2013 Name of the probe channel to play readout_trigger in. locus_components ( Iterable [ str ] ) \u2013 Locus components. label ( str ) \u2013 Label of the new timebox. block_channels ( Iterable [ str ] ) \u2013 Names of channels to block. block_duration ( int ) \u2013 Duration of the required blocking (in samples). atomic timebox containing readout_trigger in the channel probe_channel . MultiplexedProbeTimeBox previous timebox next SchedulingAlgorithm \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "SXGate",
    "url": "/iqm-pulse/api/iqm.pulse.gates.sx.SXGate.html",
    "description": "Bases: CompositeGate SX gate implementation based on PRX gate, by limiting the angle to pi / 2. Module: iqm.pulse.gates.sx Attributes registered_gates Gates that can be calibrated separately from thei...",
    "content": "Bases: CompositeGate SX gate implementation based on PRX gate, by limiting the angle to pi / 2. Module: iqm.pulse.gates.sx Attributes registered_gates Gates that can be calibrated separately from their common calibration existing in self.builder . Methods parent ( QuantumOp ) \u2013 name ( str ) \u2013 locus ( Locus ) \u2013 calibration_data ( OILCalibrationData ) \u2013 builder ( ScheduleBuilder ) \u2013 Gates that can be calibrated separately from their common calibration existing in self.builder . The gate\nnames should correspond to the keys in self.builder.op_table . Other gates besides the ones given here can\nalso be constructed via self.builder , but these will always use the common calibration. Call PRX gate with angle equals to pi / 2. TimeBox previous sx next u \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "Reset_Wait",
    "url": "/iqm-pulse/api/iqm.pulse.gates.reset.Reset_Wait.html",
    "description": "Bases: GateImplementation Reset operation by relaxation (idling for a time comparable to the relaxation time of the component). Adds a Wait pulse for all the (non-virtual) channels of the locus compon...",
    "content": "Bases: GateImplementation Reset operation by relaxation (idling for a time comparable to the relaxation time of the component). Adds a Wait pulse for all the (non-virtual) channels of the locus components. In addition, blocks all the probes\nassociated with the locus and in case the locus is connected via couplers, blocks them as well. The operation\nis factorizable, so that the calibration data it uses (i.e. the wait duration in seconds) is defined for each\ncomponent, and when acting on multiple components, the maximum of the associated wait durations will be applied. Reset by relaxation is intended to be used in the circuit initialisation between shots / segments.\nIt also can be called on specific qubits inside a segment, but as it works by\nwaiting longer than the qubit relaxation time, the states of all the other qubits\nwill likely have been destroyed as well by the time the reset has finished. Module: iqm.pulse.gates.reset Attributes parameters Required calibration data, may be nested Methods duration_in_seconds Duration of the Schedule of the gate implementation (in seconds). get_custom_locus_mapping Supported loci: all components that have channels. wait_box TimeBox that contains Wait instructions for all non-virtual channels associated with self.locus . parent ( QuantumOp ) \u2013 name ( str ) \u2013 locus ( Locus ) \u2013 calibration_data ( OILCalibrationData ) \u2013 builder ( ScheduleBuilder ) \u2013 Required calibration data, may be nested TimeBox that contains Wait instructions for all non-virtual channels associated with self.locus . Does not block any additional components beside the locus itself. TimeBox The GateImplementation-specific logic for implementing a quantum operation. Inheriting classes may override this method if the default __call__() caching (based on the args & kwargs\nin the signature) is sufficient. Any additional caching may also be implemented inside this function if needed. TimeBox Duration of the Schedule of the gate implementation (in seconds). Can be left unimplemented if the duration e.g. depends on the gate arguments.\nSubclasses can reimplement this method in case it makes sense in their context. float Supported loci: all components that have channels. chip_topology ( ChipTopology ) \u2013 component_to_channels ( dict [ str , Iterable [ str ] ] ) \u2013 dict [ tuple [ str , \u2026] | frozenset [ str ], tuple [ str , \u2026]] | None previous Reset_Conditional next rz \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "SchedulingAlgorithm",
    "url": "/iqm-pulse/api/iqm.pulse.timebox.SchedulingAlgorithm.html",
    "description": "Bases: Enum Algorithms for resolving composite TimeBoxes into atomic ones. Module: iqm.pulse.timebox Attributes HARD_BOUNDARY Respects the TimeBox boundary such that the longest channel with a box def...",
    "content": "Bases: Enum Algorithms for resolving composite TimeBoxes into atomic ones. Module: iqm.pulse.timebox Attributes HARD_BOUNDARY Respects the TimeBox boundary such that the longest channel with a box defines its boundary and all other channels are padded to this length (using the specified SchedulingStrategy ). TETRIS Will pack the schedule as tightly as possible while respecting the defined scheduling neighborhood. Methods Respects the TimeBox boundary such that the longest channel with a box defines\nits boundary and all other channels are padded to this length (using the specified SchedulingStrategy ). Will pack the schedule as tightly as possible while respecting the defined scheduling neighborhood. previous MultiplexedProbeTimeBox next SchedulingStrategy \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "UGate",
    "url": "/iqm-pulse/api/iqm.pulse.gates.u.UGate.html",
    "description": "Bases: CompositeGate SU(2) gate implemented using PRX. Assumes the chosen PRX implementation uses resonant driving, and that the virtual RZ technique can be used. Module: iqm.pulse.gates.u Attributes ...",
    "content": "Bases: CompositeGate SU(2) gate implemented using PRX. Assumes the chosen PRX implementation uses resonant driving, and that the virtual RZ technique can be used. Module: iqm.pulse.gates.u Attributes registered_gates Gates that can be calibrated separately from their common calibration existing in self.builder . Methods parent ( QuantumOp ) \u2013 name ( str ) \u2013 locus ( Locus ) \u2013 calibration_data ( OILCalibrationData ) \u2013 builder ( ScheduleBuilder ) \u2013 Gates that can be calibrated separately from their common calibration existing in self.builder . The gate\nnames should correspond to the keys in self.builder.op_table . Other gates besides the ones given here can\nalso be constructed via self.builder , but these will always use the common calibration. Convert pulses into timebox, via Euler decomposition. theta ( float ) \u2013 phi ( float ) \u2013 lam ( float ) \u2013 TimeBox previous iqm.pulse.gates.u.get_unitary_u next playlist \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.gates.get_implementation_class",
    "url": "/iqm-pulse/api/iqm.pulse.gates.get_implementation_class.html",
    "description": "Get gate implementation class by class name. class_name ( str ) \u2013 type [ GateImplementation ] | None previous iqm.pulse.gates.expose_implementation next iqm.pulse.gates.register_implementation \u00a9 Copyr...",
    "content": "Get gate implementation class by class name. class_name ( str ) \u2013 type [ GateImplementation ] | None previous iqm.pulse.gates.expose_implementation next iqm.pulse.gates.register_implementation \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "ProbeChannelProperties",
    "url": "/iqm-pulse/api/iqm.pulse.playlist.channel.ProbeChannelProperties.html",
    "description": "Bases: ChannelProperties ChannelProperties for probe line channels. Module: iqm.pulse.playlist.channel Attributes center_frequency Center frequency for the channel. integration_start_dead_time Dead ti...",
    "content": "Bases: ChannelProperties ChannelProperties for probe line channels. Module: iqm.pulse.playlist.channel Attributes center_frequency Center frequency for the channel. integration_start_dead_time Dead time samples before integration. integration_stop_dead_time Dead time samples after integration. sample_rate sample rate of the instrument responsible for the channel (in Hz) instruction_duration_granularity all instruction durations on this channel must be multiples of this granularity (in samples) instruction_duration_min all instruction durations on this channel must at least this long (in samples) compatible_instructions instruction types that are allowed on this channel Methods sample_rate ( float ) \u2013 instruction_duration_granularity ( int ) \u2013 instruction_duration_min ( int ) \u2013 compatible_instructions ( tuple [ type [ Instruction ] , ... ] ) \u2013 is_iq ( bool ) \u2013 is_virtual ( bool ) \u2013 blocks_component ( bool ) \u2013 center_frequency ( float ) \u2013 integration_start_dead_time ( int ) \u2013 integration_stop_dead_time ( int ) \u2013 Center frequency for the channel. Dead time samples before integration. Dead time samples after integration. previous IQChannelConfig next RealChannelConfig \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.playlist.schedule.TOLERANCE",
    "url": "/iqm-pulse/api/iqm.pulse.playlist.schedule.TOLERANCE.html",
    "description": "remove when COMP-1281 is done. TODO previous schedule next Nothing \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04....",
    "content": "remove when COMP-1281 is done. TODO previous schedule next Nothing \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.validation.validate_awg_and_schedule_compatibility",
    "url": "/iqm-pulse/api/iqm.pulse.validation.validate_awg_and_schedule_compatibility.html",
    "description": "Validates that the given playlist is compatible with the provided AWG data.\nThe following requirements are validated as they are the same for all controllers. Playlist sampling rate vs. Actual control...",
    "content": "Validates that the given playlist is compatible with the provided AWG data.\nThe following requirements are validated as they are the same for all controllers. Playlist sampling rate vs. Actual controller sampling rate Instruction granularity with respect to the controllers granularity requirements Checks that no other than supported instructions are used. Checks that instruction length matches waveform length in IQ and RealPulse Checks that all instructions are at least the length of minimum number of samples Checks that Conditional instruction has the same duration in every child instruction channel_description ( ChannelDescription ) \u2013 Contains instructions used as well as the channel specific configuration from playlist device_constraints ( AWGScheduleValidationData ) \u2013 Contains the actual hardware limitations previous validation next iqm.pulse.validation.validate_channel \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.scheduler.extend_hard_boundary_in_seconds",
    "url": "/iqm-pulse/api/iqm.pulse.scheduler.extend_hard_boundary_in_seconds.html",
    "description": "The same as extend_hard_boundary , but the scheduling is done in seconds. Used when the probe channel sampling rate differs from the other channels\u2019 rate.\nThe incoming schedules measure Instruction du...",
    "content": "The same as extend_hard_boundary , but the scheduling is done in seconds. Used when the probe channel sampling rate differs from the other channels\u2019 rate.\nThe incoming schedules measure Instruction durations in samples, but component_durations is in seconds. schedule ( Schedule ) \u2013 Schedule that should be extended with child_schedule . Modified in place. child_schedule ( Schedule ) \u2013 Child schedule to be added. child_components ( set [ str ] ) \u2013 Components (qubits, couplers, computational_resonators) that have at least\none channel in child_schedule . neighborhood_components ( set [ str ] ) \u2013 Components neighboring the child_components that should\nadditionally be blocked in the scheduling. component_durations ( dict [ str , float ] ) \u2013 Blocked durations for each component in schedule .\nThese act as the earliest starting points for new segment added to any of the channels\nof a given component, but will also block the component even if it has no occupied channels\nin the schedule yet or ever (e.g. a computational resonator).\nThe durations are in seconds. Modified in place. is_alap ( bool ) \u2013 Whether the scheduling strategy is ALAP (As Late As Possible). channel_properties ( dict [ str , ChannelProperties ] ) \u2013 Mapping from channel name to its properties (e.g. the sample rates\nand granularities). None previous iqm.pulse.scheduler.extend_hard_boundary next iqm.pulse.scheduler.extend_schedule \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "move",
    "url": "/iqm-pulse/api/iqm.pulse.gates.move.html",
    "description": "Two-qubit MOVE gate. The MOVE gate is a population exchange operation between a qubit and a resonator,\nmediated by a coupler, that has the following properties: MOVE is unitary. The effect of MOVE is ...",
    "content": "Two-qubit MOVE gate. The MOVE gate is a population exchange operation between a qubit and a resonator,\nmediated by a coupler, that has the following properties: MOVE is unitary. The effect of MOVE is only defined in the invariant\nsubspace \\(S = \\text{span}\\{|00\\rangle, |01\\rangle, |10\\rangle\\}\\) , where it swaps the populations of the states \\(|01\\rangle\\) and \\(|10\\rangle\\) . Anything may happen in the orthogonal subspace as long as it is unitary and\ninvariant. In the subspace where it is defined, MOVE is an involution: \\(\\text{MOVE}_S^2 = I_S\\) . Thus MOVE has the following presentation in the subspace \\(S\\) : where \\(a\\) is an undefined complex phase. This degree of freedom (in addition to the undefined effect of the gate\nin the orthogonal subspace) means there is a continuum of different MOVE gates, all equally valid.\nThe phase \\(a\\) is canceled when the MOVE gate is applied a second time due to the involution property. Full path: iqm.pulse.gates.move Functions apply_move_gate_phase_corrections (schedule,\u00a0...) Schedule-level pass applying resonator-related phase corrections in MOVE sandwiches to the moved qubit. validate_move_instructions (instructions,\u00a0builder) Circuit-level pass to prepare a circuit containing MOVE gates for compilation. Classes MOVE_CRF_CRF Qubit-resonator MOVE gate using the CRF waveform for the coupler and the qubit flux pulse. MOVE_CustomWaveforms Qubit-resonator MOVE gate using flux pulses on both components. MOVE_TGSS_CRF Qubit-resonator MOVE gate using the TGSS waveform for the coupler flux pulse and the CRF waveform for the qubit flux pulse. MoveMarker Special annotation instruction to indicate the beginning and ending of MOVE gates. Inheritance previous ProbePulse_CustomWaveforms next iqm.pulse.gates.move.apply_move_gate_phase_corrections \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "conditional",
    "url": "/iqm-pulse/api/iqm.pulse.gates.conditional.html",
    "description": "Classically controlled gates. Full path: iqm.pulse.gates.conditional Classes CCPRX_Composite Classically controlled PRX gate. CCPRX_Composite_DRAGCosineRiseFall Conditional drag_crf pulse. CCPRX_Compo...",
    "content": "Classically controlled gates. Full path: iqm.pulse.gates.conditional Classes CCPRX_Composite Classically controlled PRX gate. CCPRX_Composite_DRAGCosineRiseFall Conditional drag_crf pulse. CCPRX_Composite_DRAGGaussian Conditional drag_gaussian pulse. Inheritance previous Barrier next CCPRX_Composite \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "u",
    "url": "/iqm-pulse/api/iqm.pulse.gates.u.html",
    "description": "Single-qubit SU(2) gate. The SU(2) matrix in the computational basis is parametrized using Euler angles: where the angles \\(\\theta\\) , \\(\\phi\\) and \\(\\lambda\\) are in radians. They are the angles of s...",
    "content": "Single-qubit SU(2) gate. The SU(2) matrix in the computational basis is parametrized using Euler angles: where the angles \\(\\theta\\) , \\(\\phi\\) and \\(\\lambda\\) are in radians. They are the angles of subsequent\nZ, Y and Z Euler rotations: It rotates the qubit state around an arbitrary axis on the Bloch sphere. Some common single-qubit gates expressed as U gates: References https://openqasm.com/language/gates.html#built-in-gates Full path: iqm.pulse.gates.u Functions get_unitary_u (theta,\u00a0phi,\u00a0lam) Unitary for an SU(2) gate. Classes UGate SU(2) gate implemented using PRX. Inheritance previous SXGate next iqm.pulse.gates.u.get_unitary_u \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.gate_implementation.OICalibrationData",
    "url": "/iqm-pulse/api/iqm.pulse.gate_implementation.OICalibrationData.html",
    "description": "For a particular implementation of a particular quantum operation, maps operation loci to their calibration data. alias of dict [ tuple [ str , \u2026] | None , dict [ str , Any ]] previous iqm.pulse.gate_...",
    "content": "For a particular implementation of a particular quantum operation, maps operation loci to their calibration data. alias of dict [ tuple [ str , \u2026] | None , dict [ str , Any ]] previous iqm.pulse.gate_implementation.OILCalibrationData next iqm.pulse.gate_implementation.OCalibrationData \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.gate_implementation.SINGLE_COMPONENTS_WITH_FLUX_AWG_LOCUS_MAPPING",
    "url": "/iqm-pulse/api/iqm.pulse.gate_implementation.SINGLE_COMPONENTS_WITH_FLUX_AWG_LOCUS_MAPPING.html",
    "description": "Locus mapping name for mapping all components that have the flux operation defined and the flux controller\nhas an AWG. previous iqm.pulse.gate_implementation.SINGLE_COMPONENTS_WITH_READOUT_LOCUS_MAPPI...",
    "content": "Locus mapping name for mapping all components that have the flux operation defined and the flux controller\nhas an AWG. previous iqm.pulse.gate_implementation.SINGLE_COMPONENTS_WITH_READOUT_LOCUS_MAPPING next iqm.pulse.gate_implementation.PROBE_LINES_LOCUS_MAPPING \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.scheduler.extend_hard_boundary",
    "url": "/iqm-pulse/api/iqm.pulse.scheduler.extend_hard_boundary.html",
    "description": "Merge two Schedules together such that the timebox boundary is respected. This scheduling algorithm treats the Schedules as hard, rectangular boxes where any ragged edges\nwill be padded with Waits, an...",
    "content": "Merge two Schedules together such that the timebox boundary is respected. This scheduling algorithm treats the Schedules as hard, rectangular boxes where any ragged edges\nwill be padded with Waits, and the boxes are not allowed to overlap. The algorithm is as follows: 1. When adding child_schedule to schedule , the longest channel in schedule that overlaps with the\nchannels present in child determines the earliest possible starting time for the child_schedule , and all other\nchannels in schedule are padded with Wait to the aforementioned max length. 2. An occupied channel in schedule will always occupy all channels of the corresponding component (qubit,\ncoupler, \u2026). This is handled by keeping track of occupied durations for each component (no unnecessary padding\nis added to channels which do not have an actual physical pulse). 3. After the schedules are combined, all the common channels of schedule and child_schedule are blocked\nup to their common maximum length. This algorithm should not be used with variable sampling rates in the schedule channels. In that case, use extend_hard_boundary_in_seconds() instead. schedule ( Schedule ) \u2013 Schedule that should be extended with child_schedule . Modified in place. child_schedule ( Schedule ) \u2013 Child schedule to be added. child_components ( set [ str ] ) \u2013 Components (qubits, couplers, computational_resonators) that have at least\none channel in child_schedule . neighborhood_components ( set [ str ] ) \u2013 QPU components neighboring the child_components that should\nadditionally be blocked in the scheduling. component_durations ( dict [ str , int ] ) \u2013 Blocked durations for each component used by schedule .\nThese act as the earliest starting points for a new segment added to any of the channels\nof the component, but will also block the component even if it has no occupied channels\nin the schedule yet or ever (e.g. a computational resonator).\nModified in place. is_alap ( bool ) \u2013 Whether the scheduling strategy is ALAP (As Late As Possible). None previous iqm.pulse.scheduler.BLOCKING next iqm.pulse.scheduler.extend_hard_boundary_in_seconds \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.builder.build_quantum_ops",
    "url": "/iqm-pulse/api/iqm.pulse.builder.build_quantum_ops.html",
    "description": "Builds the table of known quantum operations. Hardcoded default native ops table is extended by the ones in ops .\nIn case of name collisions, the content of ops takes priority over the defaults. ops (...",
    "content": "Builds the table of known quantum operations. Hardcoded default native ops table is extended by the ones in ops .\nIn case of name collisions, the content of ops takes priority over the defaults. ops ( dict [ str , Any ] ) \u2013 Contents of the gate_definitions section defining the quantum operations in the\nconfiguration YAML file. Modified by the function. Mapping from quantum operation name to its definition dict [ str , QuantumOp ] previous builder next iqm.pulse.builder.load_config \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "Wait",
    "url": "/iqm-pulse/api/iqm.pulse.playlist.instructions.Wait.html",
    "description": "Bases: Instruction Behave as if outputting zero-valued samples for the duration of the instruction. Used to idle QPU components. However, may be replaced with a dynamical decoupling sequence\nafter the...",
    "content": "Bases: Instruction Behave as if outputting zero-valued samples for the duration of the instruction. Used to idle QPU components. However, may be replaced with a dynamical decoupling sequence\nafter the scheduling step. If you want to make sure that this does not happen, use Block instead. Module: iqm.pulse.playlist.instructions Attributes duration Time duration of the instruction. Methods duration ( int ) \u2013 previous VirtualRZ next playlist \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.circuit_operations.get_unitary_from_op",
    "url": "/iqm-pulse/api/iqm.pulse.circuit_operations.get_unitary_from_op.html",
    "description": "Unitary matrix representing an operation within the context of the circuit. First, fetches the unitary corresponding to the correct operation from the QuantumOpTable. If that unitary\nis a function, ge...",
    "content": "Unitary matrix representing an operation within the context of the circuit. First, fetches the unitary corresponding to the correct operation from the QuantumOpTable. If that unitary\nis a function, gets the matrix by calling the function with values of quantum operation params stored\nin the operation. Checks whether the size of the unitary is correct. Then, optionally extends that unitary to act\non the Hilbert space of the entire circuit. op ( CircuitOperation ) \u2013 quantum operation instance table ( dict [ str , QuantumOp ] ) \u2013 registered quantum operations qubits ( list [ str ] ) \u2013 qubits of the whole circuit, in big-endian order Unitary matrix representing op on the Hilbert space of the circuit. ndarray previous iqm.pulse.circuit_operations.get_unitary_from_circuit next iqm.pulse.circuit_operations.reorder \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "RealPulse",
    "url": "/iqm-pulse/api/iqm.pulse.playlist.instructions.RealPulse.html",
    "description": "Bases: Instruction Play a real-valued pulse. Module: iqm.pulse.playlist.instructions Attributes wave Shape of the pulse. scale Scaling factor for the waveform. duration Time duration of the instructio...",
    "content": "Bases: Instruction Play a real-valued pulse. Module: iqm.pulse.playlist.instructions Attributes wave Shape of the pulse. scale Scaling factor for the waveform. duration Time duration of the instruction. Methods get_waveforms Returns all the waveforms the Instruction contains. validate Validate the instruction attributes. duration ( int ) \u2013 wave ( Waveform ) \u2013 scale ( float ) \u2013 Shape of the pulse. Scaling factor for the waveform. Validate the instruction attributes. ValueError \u2013 something about the instruction is not ok Returns all the waveforms the Instruction contains. tuple [ Waveform , \u2026] previous ReadoutTrigger next ThresholdStateDiscrimination \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "CircuitOperationList",
    "url": "/iqm-pulse/api/iqm.pulse.circuit_operations.CircuitOperationList.html",
    "description": "Bases: list A list of iqm.pulse.builder.CircuitOperation objects with methods to add, remove and transform them. The class is used to work with CircuitOperation s directly. It is mostly meant as\nconve...",
    "content": "Bases: list A list of iqm.pulse.builder.CircuitOperation objects with methods to add, remove and transform them. The class is used to work with CircuitOperation s directly. It is mostly meant as\nconvenience to enable easy creation of circuits, calculations of their properties, and mapping them onto physical\nqubits. In addition to the list of contents, this class has two important attributes: qubits and table .\nThe former defines the list of qubits which are allowed to be in the loci of all the CircuitOperation s present in the list. Think about it as the qiskit\u2019s Quantum\nRegister. The latter is a iqm.pulse.quantum_ops.QuantumOpTable , which contains all the QuantumOp s which are allowed to be in the circuit. In most cases, the table is\nsimply taken to contain all the default operations defined in iqm-pulse. If using this class in the context of a ScheduleBuilder , it is good practice to set table = builder.op_table . The QuantumOpTable is mutable, so any additional registered gates will automatically\nbe possible to be used in any CircuitOperationList associated with that ScheduleBuilder instance. The fundamental use of the class would be to first define a new instance: The num_qubits parameter populates the .qubits argument with qubits QB1-QBn, in this case ['QB1', 'QB2'] . Alternatively, you can use qubits directly: To add your own QuantumOpTable, initialize like this: Remembering that the table is mutable. If you already have a list of CircuitOperations, you can initialize with it: Calling the find_qubits() populates the qubits attribute with the qubits found in loci of\nthe operations included in the original circuit. If the list is empty, it will set qubits to an empty list,\nwhich most of the time is not what you want to do. The class has the add, multiply, and get_item methods redefined, which means all the following: circuit * 3 , circuit1 + circuit2 , and circuit[0:4] will produce a CircuitOperationList with the same qubits and table attributes as the original. To add a prx operation to the list, call: The class also has shortcut methods defined, so the above can be shortened to: Which is exactly the same syntax as in qiskit + implementation name, which usually does not need to be used. The\nnames of the shortcut methods are taken from the attached table at init. All the operations with non-zero arity\nwill be added as shortcuts. If all the operations in the circuit are unitary, you can quickly calculate the unitary of the entire circuit\nby calling: The dimension of the unitary will always be defined by the qubits attribute. In particular, if your circuit\ncontains 3 qubits, 'QB1', 'QB2', 'QB3' , but you only add gates to the first two, the resulting unitary will\nstill be an 8x8 matrix, corresponding to the three qubits 'QB1', 'QB2', 'QB3' , in the big endian convention.\nWith no operations affecting 'QB3' , you should expect the action of the unitary on this qubit to be an identity. To map the circuit onto physical qubits, all you need to do is call: This will create a copy of the circuit, with all the placeholder qubits replaced by the physical qubits, with the\norder defined by the qubits attribute. For example, if qubits = ['QB1', 'QB2', 'QB3'] , and physical_qubits = ['QB2', 'QB5', 'QB10'] , all occurrences of 'QB1' will be mapped to 'QB2' , 'QB2' to 'QB5' and 'QB3' to 'QB10' . The original circuit is not modified, so you can create many copies with\ndifferent physical qubits, which is helpful when running parallel experiments on a large chip. args \u2013 a list of CircuitOperation objects. Can be empty. qubits ( list [ str ] ) \u2013 a list of qubits allowed to be in the circuit. num_qubits ( int ) \u2013 the number of qubits allowed to be in the circuit. Ignored if qubits is given. table ( QuantumOpTable | None ) \u2013 table containing allowed quantum operations. Module: iqm.pulse.circuit_operations Attributes qubits  Methods add_op Adds a new CircuitOperation to the circuit. add_qubits Adds generic placeholder qubits from 1 to n. barrier Add barrier to the circuit compose A safer way to add circuits together, but will probably take time. count_ops Count each type of operation in the circuit. find_qubits Set attribute qubits to qubits in the loci of operations in the list. get_unitary Calculate the overall unitary implemented by a sequence of CircuitOperations. map_loci Creates a new list of CircuitOperation s with locus mapped onto physical qubits. Set attribute qubits to qubits in the loci of operations in the list. None Adds generic placeholder qubits from 1 to n. n ( int ) \u2013 None Calculate the overall unitary implemented by a sequence of CircuitOperations. self \u2013 list of CircuitOperations in order qubit_names ( list [ str ] | None ) \u2013 Optionally, the ordering of the qubits. Array describing the action of the circuit in big endian convention. ndarray Adds a new CircuitOperation to the circuit. Appends a new CircuitOperation at the end of the list. The CircuitOperation is created using a QuantumOp name from the\nQuantumOpTable attached to the CircuitOperationList. The locus of that CircuitOperation is built from the qubits stored in qubits , by selecting\nthe qubits at indices given by locus_indices . For example, if qubits is ['QB1', 'QB2', 'QB4'] , and the locus_indices is [2, 1] , the locus of the new CircuitOperation will be ('QB4', 'QB2') . All arguments for the values of the\nparams of the requested QuantumOp need to be provided. name ( str ) \u2013 Name of the QuantumOp which will generate a new CircuitOperation . locus_indices ( Sequence [ int ] ) \u2013 Indices of the qubits in the attribute .qubits which will become the locus of the operation. args \u2013 Any arguments the CircuitOperation needs, must correspond to the params of the QuantumOp . impl_name ( str | None ) \u2013 Name of the implementation to use when converting the CircuitOperation into\na Timebox later. None Add barrier to the circuit None A safer way to add circuits together, but will probably take time. All the CircuitOperation s from the 'other' list are appended to the end of\nthis list. The wire k of the second circuit is connected to wire locus_indices[k] of the first. This\nis achieved by mapping the locus of each operation in the second circuit onto the qubits of the first. For example, if the qubits of the first list are ['QB1', 'QB2'] , the second list has ['QB3', 'QB4'] , and the locus_indices argument is [1,0] , all the operations in the second list will have\ntheir 'QB3' mapped to 'QB2' and 'QB4' mapped to 'QB1' . other \u2013 Second CircuitOperationList. Must have less or equal qubits than this one. locus_indices ( list [ int ] | None ) \u2013 Indices of the qubits in this CircuitOperationList onto which the qubits in the second\ncircuit ar mapped. Self, with new operations added. Self Count each type of operation in the circuit. Counter mapping operation names to numbers of times they occur in the circuit. Counter Creates a new list of CircuitOperation s with locus mapped onto physical qubits. Creates a fresh list of fresh CircuitOperation s with fresh arguments. If locus is provided, it needs to have the same length as the total number of qubits across the circuit,\nand the qubits will then be mapped onto the new locus. If it is not provided, this is identical to a deepcopy\nof the original list. locus ( list [ str ] | None ) \u2013 List of new qubits to replace the qubits in the loci of the operations in the circuit. make_circuit ( bool ) \u2013 If True, creates a CircuitOperationList . If False, it is just a list. New CircuitOperationList with loci mapped onto new locus. CircuitOperationList | list [ CircuitOperation ] Add the convenience methods for adding new operations, based on the default QuantumOpTable . name ( str ) \u2013 None previous iqm.pulse.circuit_operations.reshape_unitary next gate_implementation \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "SegmentPointer",
    "url": "/iqm-pulse/api/iqm.pulse.scheduler.SegmentPointer.html",
    "description": "Bases: object Tool for working with Segments. Serves as a time pointer inside the Segment. Module: iqm.pulse.scheduler Attributes frac time, in seconds, after the start of the current instruction rema...",
    "content": "Bases: object Tool for working with Segments. Serves as a time pointer inside the Segment. Module: iqm.pulse.scheduler Attributes frac time, in seconds, after the start of the current instruction remainder Remaining duration of the current instruction (in seconds). source contents of the Segment idx index of the current instruction TOL time durations equal or smaller than this tolerance are considered zero (in seconds) Methods cut_tail Cut the source of the pointer at the current index. fastforward Move the pointer forward by duration seconds. get Current instruction. next Move to the beginning of the next instruction. rewind Move the pointer back by duration seconds. tail Instructions from the current index onwards. source ( list [ Instruction ] ) \u2013 idx ( int ) \u2013 TOL ( float ) \u2013 frac ( float ) \u2013 contents of the Segment index of the current instruction time durations equal or smaller than this tolerance are considered zero (in seconds) time, in seconds, after the start of the current instruction Current instruction. Instruction Remaining duration of the current instruction (in seconds). Move to the beginning of the next instruction. bool Cut the source of the pointer at the current index. Truncate source at idx , make self point to\nthe cut tail part only. frac is not changed. Note: modifies source . None Instructions from the current index onwards. Sequence [ Instruction ] Move the pointer back by duration seconds. duration ( float ) \u2013 None Move the pointer forward by duration seconds. duration ( float ) \u2013 bool previous iqm.pulse.scheduler.extend_schedule_new next timebox \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "CZ_CRF_ACStarkCRF",
    "url": "/iqm-pulse/api/iqm.pulse.gates.cz.CZ_CRF_ACStarkCRF.html",
    "description": "Bases: CouplerFluxPulseQubitACStarkPulseGate Controlled-Z two-qubit gate. CZ gate implemented using a cosine rise fall flux pulse for the coupler and a modulated\ncosine rise fall (CRF) AC Stark pulse ...",
    "content": "Bases: CouplerFluxPulseQubitACStarkPulseGate Controlled-Z two-qubit gate. CZ gate implemented using a cosine rise fall flux pulse for the coupler and a modulated\ncosine rise fall (CRF) AC Stark pulse on one qubit. Module: iqm.pulse.gates.cz Attributes parameters Required calibration data, may be nested symmetric True iff the implementation is symmetric in its locus components. Methods parent ( QuantumOp ) \u2013 name ( str ) \u2013 locus ( Locus ) \u2013 calibration_data ( OILCalibrationData ) \u2013 builder ( ScheduleBuilder ) \u2013 alias of CosineRiseFall Required calibration data, may be nested alias of ModulatedCosineRiseFall True iff the implementation is symmetric in its locus components.\nOnly meaningful if arity != 1 , and the locus components are of the same type. previous CZ_CRF next CZ_GaussianSmoothedSquare \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "CircuitOperation",
    "url": "/iqm-pulse/api/iqm.pulse.builder.CircuitOperation.html",
    "description": "Bases: object Specific quantum operation applied on a specific part of the QPU, e.g. in a quantum circuit. Module: iqm.pulse.builder Attributes implementation name of the implementation name name of t...",
    "content": "Bases: object Specific quantum operation applied on a specific part of the QPU, e.g. in a quantum circuit. Module: iqm.pulse.builder Attributes implementation name of the implementation name name of the quantum operation locus names of the information-bearing QPU components (qubits, computational resonators...) the operation acts on args arguments for the operation Methods validate Validate the operation against a table of operation definitions. name ( str ) \u2013 locus ( tuple [ str , ... ] ) \u2013 args ( dict [ str , Any ] ) \u2013 implementation ( str | None ) \u2013 name of the quantum operation names of the information-bearing QPU components (qubits, computational resonators\u2026) the operation acts on arguments for the operation name of the implementation Validate the operation against a table of operation definitions. op_table ( dict [ str , QuantumOp ] ) \u2013 table containing allowed quantum operations ValueError \u2013 operation is not valid None previous iqm.pulse.builder.validate_quantum_circuit next ScheduleBuilder \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "XYGate",
    "url": "/iqm-pulse/api/iqm.pulse.gates.enums.XYGate.html",
    "description": "Bases: IntEnum Enumerate all single-qubit Clifford gates whose rotation axis is in the XY plane. Members of this enum can be mapped to the corresponding unitary propagator using XYGATE_UNITARIES . Onl...",
    "content": "Bases: IntEnum Enumerate all single-qubit Clifford gates whose rotation axis is in the XY plane. Members of this enum can be mapped to the corresponding unitary propagator using XYGATE_UNITARIES . Only used in the tomography experiments. Module: iqm.pulse.gates.enums Attributes IDENTITY  X_90  X_180  X_M90  Y_90  Y_180  Y_M90  Methods previous TwoQubitGate next measure \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "visualisation",
    "url": "/iqm-pulse/api/iqm.pulse.playlist.visualisation.html",
    "description": "Full path: iqm.pulse.playlist.visualisation Subpackages and modules base Function for visualising playlists. previous Segment next base \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-0...",
    "content": "Full path: iqm.pulse.playlist.visualisation Subpackages and modules base Function for visualising playlists. previous Segment next base \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "MOVE_CustomWaveforms",
    "url": "/iqm-pulse/api/iqm.pulse.gates.move.MOVE_CustomWaveforms.html",
    "description": "Bases: FluxPulseGate Qubit-resonator MOVE gate using flux pulses on both components. This class implements the extra phase bookkeeping logic required to make the MOVE\ngates work as intended. Due to th...",
    "content": "Bases: FluxPulseGate Qubit-resonator MOVE gate using flux pulses on both components. This class implements the extra phase bookkeeping logic required to make the MOVE\ngates work as intended. Due to the unknown phase in the MOVE gate definition, the MOVEs\nneed to be applied in pairs, i.e. the resonator state is always moved back to the qubit\nit came from. Between this pair of MOVE gates you can apply any number of other two-component\ngates (CZs for example) between the resonator and other qubits. This sequence of\ngates acting on the resonator is called a MOVE sandwich . At the end of a sandwich we have\nto apply a local phase correction (z rotation) on the state that was moved back to the qubit. The __call__() method of this class uses the MoveMarker annotation instruction\nto mark the beginning and end of each MOVE sandwich, in order to enable the calculation of the\nangle of the z rotation to be applied on the moved qubit at the end of the sandwich to\ncounteract the phase accumulation during the sandwich relative to the computational frame of\nthe qubit.\nThe phase accumulation has two sources: Phase due to the frequency detuning between the qubit and the resonator,\nproportional to the time duration the MOVE sandwich. Phase due to the virtual z rotations applied on the resonator as\ngates are applied between it and another qubit, which need to be summed up.\nBy convention the resonator VirtualRZ angle of the MOVE implementation itself is currently\nalways zero (since only the sum of the resonator and qubit z rotation angles matters for MOVE),\nbut we also include it in the sum for completeness. The phases are calculated and applied on the qubits using apply_move_gate_phase_corrections() . Module: iqm.pulse.gates.move Attributes coupler_wave Flux pulse Waveform to be played in the coupler flux AWG. parameters Required calibration data, may be nested qubit_wave Flux pulse Waveform to be played in the qubit flux AWG. root_parameters Include the frequency difference between qubit and resonator in the gate parameters for phase tracking. symmetric True iff the implementation is symmetric in its locus components. Methods parent ( QuantumOp ) \u2013 name ( str ) \u2013 locus ( Locus ) \u2013 calibration_data ( OILCalibrationData ) \u2013 builder ( ScheduleBuilder ) \u2013 Include the frequency difference between qubit and resonator in the gate parameters for phase tracking. The GateImplementation-specific logic for implementing a quantum operation. Inheriting classes may override this method if the default __call__() caching (based on the args & kwargs\nin the signature) is sufficient. Any additional caching may also be implemented inside this function if needed. TimeBox Flux pulse Waveform to be played in the coupler flux AWG. Required calibration data, may be nested Flux pulse Waveform to be played in the qubit flux AWG. True iff the implementation is symmetric in its locus components.\nOnly meaningful if arity != 1 , and the locus components are of the same type. previous MOVE_CRF_CRF next MOVE_TGSS_CRF \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.gate_implementation.OpCalibrationDataTree",
    "url": "/iqm-pulse/api/iqm.pulse.gate_implementation.OpCalibrationDataTree.html",
    "description": "Maps quantum operation names to their calibration data. alias of dict [ str , dict [ str , dict [ tuple [ str , \u2026] | None , dict [ str , Any ]]]] previous iqm.pulse.gate_implementation.OCalibrationDat...",
    "content": "Maps quantum operation names to their calibration data. alias of dict [ str , dict [ str , dict [ tuple [ str , \u2026] | None , dict [ str , Any ]]]] previous iqm.pulse.gate_implementation.OCalibrationData next iqm.pulse.gate_implementation.NestedParams \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "scheduler",
    "url": "/iqm-pulse/api/iqm.pulse.scheduler.html",
    "description": "Tools for merging instruction schedules in time. Under the idealized, noiseless, crosstalk-less computational model, the scheduling algorithms\nshould preserve the effect of the schedules on the comput...",
    "content": "Tools for merging instruction schedules in time. Under the idealized, noiseless, crosstalk-less computational model, the scheduling algorithms\nshould preserve the effect of the schedules on the computational subspace, i.e.\nexecuting Schedule A immediately followed by B should be equivalent to\nexecuting the merged schedule A+B . The merging is always done so that in A+B all the channels of B start\ntheir execution simultaneously, and remain in sync. Nothing instructions can be added\nas spacers between the channels of A and B as necessary to make this happen. Typically the scheduling algorithms also try to minimize the total duration of the merged schedule. Full path: iqm.pulse.scheduler Module Attributes NONSOLID Instructions that can be converted to Wait after scheduling. BLOCKING Nonsolid Instructions that nevertheless block. Functions extend_hard_boundary (schedule,\u00a0...) Merge two Schedules together such that the timebox boundary is respected. extend_hard_boundary_in_seconds (schedule,\u00a0...) The same as extend_hard_boundary , but the scheduling is done in seconds. extend_schedule (A,\u00a0B,\u00a0channels,\u00a0*[,\u00a0TOL]) Extend a Schedule with another Schedule. extend_schedule_new (A,\u00a0B,\u00a0channels,\u00a0*[,\u00a0TOL]) Extend a Schedule with another Schedule. Classes SegmentPointer Tool for working with Segments. Inheritance previous QuantumOp next iqm.pulse.scheduler.NONSOLID \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "Schedule",
    "url": "/iqm-pulse/api/iqm.pulse.playlist.schedule.Schedule.html",
    "description": "Bases: object Set of synchronously executed AWG/readout programs that start on a single trigger. Consists of a number of channels , each containing a Segment of Instruction s for a specific controller...",
    "content": "Bases: object Set of synchronously executed AWG/readout programs that start on a single trigger. Consists of a number of channels , each containing a Segment of Instruction s for a specific controller.  For each channel, maps the channel name to\nits Segment of Instructions. Mutable. To make an independent copy, use copy() . contents ( Mapping [ str , Iterable [ Instruction ] ] | None ) \u2013 mapping from channel name to a list of Instructions for that channel duration ( int | None ) \u2013 Optional precomputed duration (in samples). In cases where the duration is known and performance\nis critical, the duration can be given in the constructor, allowing one to skip computing it. Module: iqm.pulse.playlist.schedule Attributes duration The maximum duration of the Schedule's channels, in samples. Methods add_channels Add new empty channels to the schedule. append Append a single Instruction to a specific channel in the Schedule. channels The channels occupied in self . cleanup Cleans up the schedule by removing things that do not affect the execution. copy Make an independent copy of the schedule. duration_in_seconds Schedule duration in seconds, taking into account the sample rates of the channels. extend Append given Instruction to a specific channel in the Schedule. front_pad Modifies the schedule in place by front-padding it with Wait instructions. front_pad_in_seconds Modifies the schedule in place by front-padding it with Wait instructions. has_content_in Returns True if self has content in any of the given channels, otherwise False . items Iterator over the schedule channel names and segments. pad_to_hard_box Pad channels in self to the maximum channel length found within with Wait instructions. pad_to_hard_box_in_seconds Pad channels in self to the maximum channel length (seconds) found within with Wait instructions. pprint Fixed-width character graphics representation of the Schedule. reverse Copy of the schedule with the order of the instructions in each channel reversed. reverse_hard_box Copy of the schedule with the order of the instructions in each channel reversed. validate Validate the contents of the schedule. The maximum duration of the Schedule\u2019s channels, in samples. Computed only when needed and cached for performance. Schedule duration in seconds, taking into account the sample rates of the channels. channel_properties ( dict [ str , ChannelProperties ] ) \u2013 channel properties. schedule duration (in seconds) float Fixed-width character graphics representation of the Schedule. Assumes the Instruction.duration s are in samples. time_unit ( int ) \u2013 unit of time represented by a single symbol (in samples) str Iterator over the schedule channel names and segments. The channels occupied in self . KeysView Make an independent copy of the schedule. Mutating the original must not affect the copy, or vice versa.\nInstructions are immutable, so they need not be copied. copy of the schedule Schedule Add new empty channels to the schedule. If a given channel (identified by its controller name) already exist in the schedule,\nit is unchanged. Modifies self . channel_names ( Iterable [ str ] ) \u2013 names of the controllers for which empty channels are added None Append a single Instruction to a specific channel in the Schedule. channel ( str ) \u2013 name of the channel to append the instruction to instruction ( Instruction ) \u2013 instruction to append None Append given Instruction to a specific channel in the Schedule. channel ( str ) \u2013 name of the channel to append the instructions to instructions ( Iterable [ Instruction ] ) \u2013 instructions to append None Modifies the schedule in place by front-padding it with Wait instructions. NOTE: this method cannot be used when there are variable sampling rates present in the schedule. In that\ncase, use the method front_pad_in_seconds . to_duration ( int ) \u2013 duration of the resulting schedule, in samples self , with the padding Schedule Modifies the schedule in place by front-padding it with Wait instructions. The new duration is given in seconds, and this method works also with variable sample rates. channel_properties ( dict [ str , ChannelProperties ] ) \u2013 channel properties. to_duration ( float ) \u2013 self , with the padding Pad channels in self to the maximum channel length found within with Wait instructions. The Wait``s are appended to the end of the segments. NOTE: this method cannot be used when there are variable sampling rates present in the schedule. In that case, use the method ``pad_to_hard_box_in_seconds . None Pad channels in self to the maximum channel length (seconds) found within with Wait instructions. The Waits are appended to the end of the segments. The segment durations are compared in seconds, so this\nmethod works in the case of variable sampling rates as well. The padding is added to a channel only if the\ndifference between the channel\u2019s duration and the maximum duration is larger than the smallest possible\ninstruction duration for that channel. channel_properties ( dict [ str , ChannelProperties ] ) \u2013 channel properties (containing the sampling rates and granularities). None Copy of the schedule with the order of the instructions in each channel reversed. NOTE: this method cannot be used when there are variable sampling rates present in the schedule. To preserve synchronization of the channels, the channels are first rear-padded\nwith Nothing instructions. Schedule Copy of the schedule with the order of the instructions in each channel reversed. No additional time-synchronisation logic is implemented, so this method will break the synchronisation\nif self is not a schedule with matching durations in all segments. Schedule Cleans up the schedule by removing things that do not affect the execution. Removes empty channels, and channels that only have idling instructions. Modifies self . Schedule Validate the contents of the schedule. path ( tuple [ str , ... ] ) \u2013 None Returns True if self has content in any of the given channels, otherwise False . channel_names ( Iterable [ str ] ) \u2013 bool previous Nothing next Segment \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "Barrier",
    "url": "/iqm-pulse/api/iqm.pulse.gates.barrier.Barrier.html",
    "description": "Bases: GateImplementation GateImplementation for the n-qudit barrier metaoperation. Returns a schedule with zero-duration Block metainstructions.\nWhen this is appended to another Schedule ,\nit causes ...",
    "content": "Bases: GateImplementation GateImplementation for the n-qudit barrier metaoperation. Returns a schedule with zero-duration Block metainstructions.\nWhen this is appended to another Schedule ,\nit causes the affected channels to be padded with Wait instructions to the same length,\nwhich in turn imposes a definite temporal order for the operations on different sides of\nthe barrier (the ones preceding it are always executed first). Note Assumes that all instructions involve either the drive, flux or probe channels of the locus QPU components. channels \u2013 channels related to the locus QPU components, to be blocked parent ( QuantumOp ) \u2013 name ( str ) \u2013 locus ( Locus ) \u2013 calibration_data ( OILCalibrationData ) \u2013 builder ( ScheduleBuilder ) \u2013 Module: iqm.pulse.gates.barrier Attributes symmetric True iff the implementation is symmetric in its locus components. Methods duration_in_seconds Duration of the Schedule of the gate implementation (in seconds). True iff the implementation is symmetric in its locus components.\nOnly meaningful if arity != 1 , and the locus components are of the same type. The GateImplementation-specific logic for implementing a quantum operation. Inheriting classes may override this method if the default __call__() caching (based on the args & kwargs\nin the signature) is sufficient. Any additional caching may also be implemented inside this function if needed. TimeBox Duration of the Schedule of the gate implementation (in seconds). Can be left unimplemented if the duration e.g. depends on the gate arguments.\nSubclasses can reimplement this method in case it makes sense in their context. float previous barrier next conditional \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "CCPRX_Composite_DRAGGaussian",
    "url": "/iqm-pulse/api/iqm.pulse.gates.conditional.CCPRX_Composite_DRAGGaussian.html",
    "description": "Bases: CCPRX_Composite Conditional drag_gaussian pulse. Module: iqm.pulse.gates.conditional Attributes default_implementations Mapping from operation names to the designated default implementation of ...",
    "content": "Bases: CCPRX_Composite Conditional drag_gaussian pulse. Module: iqm.pulse.gates.conditional Attributes default_implementations Mapping from operation names to the designated default implementation of that operation. Methods parent ( QuantumOp ) \u2013 name ( str ) \u2013 locus ( Locus ) \u2013 calibration_data ( OILCalibrationData ) \u2013 builder ( ScheduleBuilder ) \u2013 Mapping from operation names to the designated default implementation of that operation. Filling this attribute\nallows one to define a different default implementation from the common default in self.builder.op_table to\nbe used in he context of this composite gate. If an operation is not found in this dict as a key, this\nCompositeGate will use the common default as the default implementation for it. previous CCPRX_Composite_DRAGCosineRiseFall next cz \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.gates.reset.RESET_MEASUREMENT_KEY",
    "url": "/iqm-pulse/api/iqm.pulse.gates.reset.RESET_MEASUREMENT_KEY.html",
    "description": "Constant measurement key for the measure operation required in the fast-feedback reset gate (the double underscore\nemphasizes the fact that this label should not be manually used in fast feedback). pr...",
    "content": "Constant measurement key for the measure operation required in the fast-feedback reset gate (the double underscore\nemphasizes the fact that this label should not be manually used in fast feedback). previous reset next iqm.pulse.gates.reset.RESET_FEEDBACK_KEY \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "Reset_Conditional",
    "url": "/iqm-pulse/api/iqm.pulse.gates.reset.Reset_Conditional.html",
    "description": "Bases: CompositeGate Conditional reset operation. Uses a measurement followed by a conditional PRX gate with angle \\(\\pi\\) .\nIt is assumed the measurement projects the state into the computational bas...",
    "content": "Bases: CompositeGate Conditional reset operation. Uses a measurement followed by a conditional PRX gate with angle \\(\\pi\\) .\nIt is assumed the measurement projects the state into the computational basis. The conditional PRX implementation handles any necessary waits to accommodate for the feedback result propagation\ndelay. This reset implementation is factorizable. It can act upon any set of locus components, and the measurement\nused in the conditional reset will be multiplexed to those components. However, only locus components that have\nreadout and drive can be reset via conditional reset. Otherwise, locus components will just have their channels\nblocked. Module: iqm.pulse.gates.reset Attributes registered_gates Gates that can be calibrated separately from their common calibration existing in self.builder . Methods get_locus_mapping_name Get the name of the locus mapping stored in ScheduleBuilder.ChipTopology for this implementation. parent ( QuantumOp ) \u2013 name ( str ) \u2013 locus ( Locus ) \u2013 calibration_data ( OILCalibrationData ) \u2013 builder ( ScheduleBuilder ) \u2013 Gates that can be calibrated separately from their common calibration existing in self.builder . The gate\nnames should correspond to the keys in self.builder.op_table . Other gates besides the ones given here can\nalso be constructed via self.builder , but these will always use the common calibration. The GateImplementation-specific logic for implementing a quantum operation. Inheriting classes may override this method if the default __call__() caching (based on the args & kwargs\nin the signature) is sufficient. Any additional caching may also be implemented inside this function if needed. TimeBox Get the name of the locus mapping stored in ScheduleBuilder.ChipTopology for this implementation. By default, it is \"<operation_name>.<implementation_name>\" . Inheriting classes may\noverride this for different behaviour. operation_name ( str ) \u2013 name of the quantum operation. implementation_name ( str ) \u2013 name of the implementation name of the locus mapping str previous iqm.pulse.gates.reset.RESET_FEEDBACK_KEY next Reset_Wait \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "Instruction",
    "url": "/iqm-pulse/api/iqm.pulse.playlist.instructions.Instruction.html",
    "description": "Bases: object Command that can be executed by the quantum computer on a control channel. Has a well-specified time duration. Module: iqm.pulse.playlist.instructions Attributes duration Time duration o...",
    "content": "Bases: object Command that can be executed by the quantum computer on a control channel. Has a well-specified time duration. Module: iqm.pulse.playlist.instructions Attributes duration Time duration of the instruction. Methods copy Make a copy of the Instruction with the given changes applied to its contents. get_child_instructions Returns all the child Instructions the Instruction contains. get_waveforms Returns all the waveforms the Instruction contains. validate Validate the instruction attributes. duration ( int ) \u2013 Time duration of the instruction. In samples at the channel sample rate. Validate the instruction attributes. ValueError \u2013 something about the instruction is not ok None Make a copy of the Instruction with the given changes applied to its contents. Instruction Returns all the child Instructions the Instruction contains. tuple [ Instruction , \u2026] Returns all the waveforms the Instruction contains. tuple [ Waveform , \u2026] previous IQPulse next MultiplexedIQPulse \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.gates.rz.get_unitary_rz",
    "url": "/iqm-pulse/api/iqm.pulse.gates.rz.get_unitary_rz.html",
    "description": "Unitary for an RZ gate. angle ( float ) \u2013 rotation angle (in rad) 2x2 unitary representing rz(angle) . ndarray previous rz next RZ_ACStarkShift \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2...",
    "content": "Unitary for an RZ gate. angle ( float ) \u2013 rotation angle (in rad) 2x2 unitary representing rz(angle) . ndarray previous rz next RZ_ACStarkShift \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.scheduler.BLOCKING",
    "url": "/iqm-pulse/api/iqm.pulse.scheduler.BLOCKING.html",
    "description": "Nonsolid Instructions that nevertheless block. previous iqm.pulse.scheduler.NONSOLID next iqm.pulse.scheduler.extend_hard_boundary \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04....",
    "content": "Nonsolid Instructions that nevertheless block. previous iqm.pulse.scheduler.NONSOLID next iqm.pulse.scheduler.extend_hard_boundary \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "base",
    "url": "/iqm-pulse/api/iqm.pulse.playlist.visualisation.base.html",
    "description": "Function for visualising playlists. Full path: iqm.pulse.playlist.visualisation.base Functions inspect_playlist (playlist[,\u00a0segments]) Creates an HTML string from the given playlist and segments. prev...",
    "content": "Function for visualising playlists. Full path: iqm.pulse.playlist.visualisation.base Functions inspect_playlist (playlist[,\u00a0segments]) Creates an HTML string from the given playlist and segments. previous visualisation next iqm.pulse.playlist.visualisation.base.inspect_playlist \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.quantum_ops.QuantumOpTable",
    "url": "/iqm-pulse/api/iqm.pulse.quantum_ops.QuantumOpTable.html",
    "description": "Type for representing tables of known quantum operations, maps names of the ops to their definitions. alias of dict [ str , QuantumOp ] previous quantum_ops next iqm.pulse.quantum_ops.validate_locus_c...",
    "content": "Type for representing tables of known quantum operations, maps names of the ops to their definitions. alias of dict [ str , QuantumOp ] previous quantum_ops next iqm.pulse.quantum_ops.validate_locus_calibration \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "PRX_DRAGCosineRiseFall",
    "url": "/iqm-pulse/api/iqm.pulse.gates.prx.PRX_DRAGCosineRiseFall.html",
    "description": "Bases: PRX_CustomWaveforms PRX gate, DRAG / CosineRiseFall IQ pulse implementation. See PRX_CustomWaveforms . Module: iqm.pulse.gates.prx Attributes dependent_waves If set True , the Q channel wavefor...",
    "content": "Bases: PRX_CustomWaveforms PRX gate, DRAG / CosineRiseFall IQ pulse implementation. See PRX_CustomWaveforms . Module: iqm.pulse.gates.prx Attributes dependent_waves If set True , the Q channel waveform is considered to depend on the I channel's waveform so that they share the waveform parameters, (e.g. a DRAG PRX implementation). excluded_parameters Parameters names to be excluded from self.parameters . parameters Required calibration data, may be nested Methods parent ( QuantumOp ) \u2013 name ( str ) \u2013 locus ( Locus ) \u2013 calibration_data ( OILCalibrationData ) \u2013 builder ( ScheduleBuilder ) \u2013 Parameters names to be excluded from self.parameters . Inheriting classes may override this if certain\nparameters are not wanted in that class (also parameters defined by the waveforms can be excluded). Builds an x_pi pulse out of the calibration data. IQPulse If set True , the Q channel waveform is considered to depend on the I channel\u2019s waveform\nso that they share the waveform parameters, (e.g. a DRAG PRX implementation). If not provided,\nwill be initialised as True . Required calibration data, may be nested alias of CosineRiseFall alias of CosineRiseFallDerivative previous PRX_CustomWaveformsSX next PRX_DRAGCosineRiseFallSX \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "SchedulingStrategy",
    "url": "/iqm-pulse/api/iqm.pulse.timebox.SchedulingStrategy.html",
    "description": "Bases: Enum Different scheduling strategies for the contents of composite TimeBoxes. Module: iqm.pulse.timebox Attributes ASAP TimeBox contents are scheduled as soon as possible within the box. ALAP T...",
    "content": "Bases: Enum Different scheduling strategies for the contents of composite TimeBoxes. Module: iqm.pulse.timebox Attributes ASAP TimeBox contents are scheduled as soon as possible within the box. ALAP TimeBox contents are scheduled as late as possible within the box. Methods TimeBox contents are scheduled as soon as possible within the box. TimeBox contents are scheduled as late as possible within the box. previous SchedulingAlgorithm next TimeBox \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "pulse",
    "url": "/iqm-pulse/api/iqm.pulse.html",
    "description": "Control pulses and pulse sequences for quantum processors. Full path: iqm.pulse Subpackages and modules builder Tools for building instruction schedules. circuit_operations Methods for operating on li...",
    "content": "Control pulses and pulse sequences for quantum processors. Full path: iqm.pulse Subpackages and modules builder Tools for building instruction schedules. circuit_operations Methods for operating on lists of CircuitOperation objects. gate_implementation Factories for implementing quantum operations in terms of instruction schedules. gates GateImplementations for implementing quantum gates. playlist Control pulses and pulse sequences for quantum processors. quantum_ops Quantum operations. scheduler Tools for merging instruction schedules in time. timebox Reserving QPU resources in instruction scheduling. utils Utility functions. validation Validation of Schedule related data. previous API Reference next builder \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "ConditionalInstruction",
    "url": "/iqm-pulse/api/iqm.pulse.playlist.instructions.ConditionalInstruction.html",
    "description": "Bases: Instruction Choice between multiple Instructions, depending on a condition. Module: iqm.pulse.playlist.instructions Attributes condition can be evaluated to an integer >= 0 outcomes maps possib...",
    "content": "Bases: Instruction Choice between multiple Instructions, depending on a condition. Module: iqm.pulse.playlist.instructions Attributes condition can be evaluated to an integer >= 0 outcomes maps possible outcomes of the condition to the corresponding instructions duration Time duration of the instruction. Methods get_child_instructions Returns all the child Instructions the Instruction contains. validate Validate the instruction attributes. duration ( int ) \u2013 condition ( str ) \u2013 outcomes ( tuple [ Instruction , ... ] ) \u2013 can be evaluated to an integer >= 0 maps possible outcomes of the condition to the corresponding instructions Validate the instruction attributes. ValueError \u2013 something about the instruction is not ok Returns all the child Instructions the Instruction contains. tuple [ Instruction , \u2026] previous ComplexIntegration next IQPulse \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "validation",
    "url": "/iqm-pulse/api/iqm.pulse.validation.html",
    "description": "Validation of Schedule related data. Full path: iqm.pulse.validation Functions validate_awg_and_schedule_compatibility (...) Validates that the given playlist is compatible with the provided AWG data....",
    "content": "Validation of Schedule related data. Full path: iqm.pulse.validation Functions validate_awg_and_schedule_compatibility (...) Validates that the given playlist is compatible with the provided AWG data. validate_channel (channel_description,\u00a0...) Validate a single channel. validate_instruction_and_wf_length (instruction) Validate that instruction and waveform lengths match validate_playlist_compatibility (playlist,\u00a0...) Validates that the given playlist is compatible with the provided AWG data. Classes AWGScheduleValidationData Controller specific validation data Exceptions AWGScheduleValidationError Error raised when schedule validation for an AWG fails. InvalidInstructionError (instruction[,\u00a0...]) Error raised when encountering an invalid instruction. PlaylistValidationError Error raised when Playlist validation fails. Inheritance previous iqm.pulse.utils.phase_transformation next iqm.pulse.validation.validate_awg_and_schedule_compatibility \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "MultiplexedIQPulse",
    "url": "/iqm-pulse/api/iqm.pulse.playlist.instructions.MultiplexedIQPulse.html",
    "description": "Bases: Instruction Instruction to simultaneously play multiple IQ pulses. Each component pulse can have an arbitrary delay from the beginning of this instruction.\nOutside the interval of the Multiplex...",
    "content": "Bases: Instruction Instruction to simultaneously play multiple IQ pulses. Each component pulse can have an arbitrary delay from the beginning of this instruction.\nOutside the interval of the MultiplexedIQPulse, the component pulses are truncated.\nWhere overlapping, samples of component pulse entries are summed.\nWhere the interval of a MultiplexedIQPulse does not overlap with any of its component pulses,\nits samples are zeroes. Module: iqm.pulse.playlist.instructions Attributes entries ( pulse , offset ) pairs. duration Time duration of the instruction. Methods duration ( int ) \u2013 entries ( tuple [ tuple [ IQPulse , int ] , ... ] ) \u2013 ( pulse , offset ) pairs. offset is the number of samples pulse is delayed from the beginning of the instruction.\nIt has no granularity constraints. Negative values are allowed, but beginning will be truncated. previous Instruction next ReadoutTrigger \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "Cosine",
    "url": "/iqm-pulse/api/iqm.pulse.playlist.waveforms.Cosine.html",
    "description": "Bases: Waveform Periodic sinusoidal waveform which defaults to cosine. The use case for this waveform is to do manual modulation of other waveforms. where \\(f\\) is the frequency, and \\(\\phi\\) the phas...",
    "content": "Bases: Waveform Periodic sinusoidal waveform which defaults to cosine. The use case for this waveform is to do manual modulation of other waveforms. where \\(f\\) is the frequency, and \\(\\phi\\) the phase of the wave. frequency ( float ) \u2013 frequency of the wave, in units of inverse sampling window duration phase ( float ) \u2013 phase of the wave, in radians n_samples ( int ) \u2013 Module: iqm.pulse.playlist.waveforms Attributes phase  frequency  n_samples Requested number of samples for the waveform. Methods non_timelike_attributes Mapping from waveform attributes to the units of their calibration data, unless that unit is second. Actually samples the waveform. sample_coords ( ndarray ) \u2013 coordinates of the samples to be returned array of samples (same shape as sample_coords , dtype == float ) ndarray Mapping from waveform attributes to the units of their calibration data, unless that unit is second. Used to construct the parameters for the calibration data required by the waveform.\nBy default all the waveform attributes are \u201ctimelike\u201d (the unit for their calibration data is s).\nHowever, some waveform attributes can be dimensionless, e.g. the relative amplitudes in a sum of\nconsisting of multiple terms, or frequency-like (calibration data has the unit \u2018Hz\u2019).\nIf a Waveform subclass has non-timelike attributes, it needs to redefine this method. When the Waveform is constructed, all timelike calibration data is converted to units of the\nsampling window duration, and all frequency-like calibration data into units of inverse sampling\nwindow duration. dict [ str , str ] previous ChirpImag next CosineRiseFallDerivative \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.utils.phase_transformation",
    "url": "/iqm-pulse/api/iqm.pulse.utils.phase_transformation.html",
    "description": "Implement an arbitrary (RZ, PRX, RZ) gate sequence by modifying the parameters of the\nIQ pulse implementing the PRX. By commutation rules we have Hence an arbitrary (RZ, PRX, RZ) gate sequence is equi...",
    "content": "Implement an arbitrary (RZ, PRX, RZ) gate sequence by modifying the parameters of the\nIQ pulse implementing the PRX. By commutation rules we have Hence an arbitrary (RZ, PRX, RZ) gate sequence is equivalent to (RZ, PRX) with adjusted angles. Use case: with resonant driving, the PRX gate can be implemented using an IQPulse instance,\nand the preceding RZ can be handled by decrementing the local oscillator phase beforehand (something\nthe IQPulse instruction can also do), which is equivalent to rotating the local computational frame\naround the z axis in the opposite direction of the required quantum state rotation. psi_1 ( float ) \u2013 RZ angle before the PRX (in rad) psi_2 ( float ) \u2013 RZ angle after the PRX (in rad) change to the PRX phase angle (in rad),\nphase increment for the IQ pulse that implements the remaining RZ (in rad) tuple [ float , float ] previous iqm.pulse.utils.normalize_angle next validation \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.gates.register_implementation",
    "url": "/iqm-pulse/api/iqm.pulse.gates.register_implementation.html",
    "description": "Register a new gate implementation, and a new gate if needed. TODO: split the method for adding a new gate implementation and a new gate + implementation operations ( dict [ str , QuantumOp ] ) \u2013 Know...",
    "content": "Register a new gate implementation, and a new gate if needed. TODO: split the method for adding a new gate implementation and a new gate + implementation operations ( dict [ str , QuantumOp ] ) \u2013 Known operations, mapping gate names to QuantumOps. A new QuantumOp is inserted here. gate_name ( str ) \u2013 The gate name for which to register a new implementation. impl_name ( str ) \u2013 The \u201chuman-readable\u201d name with which the new gate implementation will be found e.g. in settings. impl_class ( type [ GateImplementation ] ) \u2013 The python class of the new gate implementation to be addded. set_as_default ( bool ) \u2013 Whether to set the new implementation as the default implementation for the gate. overwrite ( bool ) \u2013 If True, allows replacing any existing implementation of the same name. quantum_op_specs ( QuantumOp | dict | None ) \u2013 The quantum operation this gate represents. If a QuantumOp is given, it is used as is.\nIf None is given and the same gate has been registered before, the previously registered properties are\nused.\nOtherwise, the given dict values are given to the constructor of QuantumOp .\nFor any missing constructor values, some defaults suitable for a 1-QB gate are used. None previous iqm.pulse.gates.get_implementation_class next barrier \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.gate_implementation.PROBE_LINES_LOCUS_MAPPING",
    "url": "/iqm-pulse/api/iqm.pulse.gate_implementation.PROBE_LINES_LOCUS_MAPPING.html",
    "description": "Locus mapping name for mapping all probe lines. previous iqm.pulse.gate_implementation.SINGLE_COMPONENTS_WITH_FLUX_AWG_LOCUS_MAPPING next iqm.pulse.gate_implementation.get_waveform_parameters \u00a9 Copyri...",
    "content": "Locus mapping name for mapping all probe lines. previous iqm.pulse.gate_implementation.SINGLE_COMPONENTS_WITH_FLUX_AWG_LOCUS_MAPPING next iqm.pulse.gate_implementation.get_waveform_parameters \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "FluxPulseGate_TGSS_CRF",
    "url": "/iqm-pulse/api/iqm.pulse.gates.cz.FluxPulseGate_TGSS_CRF.html",
    "description": "Bases: FluxPulseGate CZ gate using a TruncatedGaussianSmoothedSquare flux pulse on the coupler and a CosineRiseFall\nflux pulse on the qubit. Module: iqm.pulse.gates.cz Attributes parameters Required c...",
    "content": "Bases: FluxPulseGate CZ gate using a TruncatedGaussianSmoothedSquare flux pulse on the coupler and a CosineRiseFall\nflux pulse on the qubit. Module: iqm.pulse.gates.cz Attributes parameters Required calibration data, may be nested symmetric True iff the implementation is symmetric in its locus components. Methods parent ( QuantumOp ) \u2013 name ( str ) \u2013 locus ( Locus ) \u2013 calibration_data ( OILCalibrationData ) \u2013 builder ( ScheduleBuilder ) \u2013 alias of TruncatedGaussianSmoothedSquare Required calibration data, may be nested alias of CosineRiseFall True iff the implementation is symmetric in its locus components.\nOnly meaningful if arity != 1 , and the locus components are of the same type. previous FluxPulseGate_CRF_CRF next enums \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "ReadoutTrigger",
    "url": "/iqm-pulse/api/iqm.pulse.playlist.instructions.ReadoutTrigger.html",
    "description": "Bases: Instruction Instruction for playing a probe pulse and acquiring the associated readout results. Module: iqm.pulse.playlist.instructions Attributes probe_pulse Probe pulse to play, usually a Mul...",
    "content": "Bases: Instruction Instruction for playing a probe pulse and acquiring the associated readout results. Module: iqm.pulse.playlist.instructions Attributes probe_pulse Probe pulse to play, usually a MultiplexedIQPulse. acquisitions Active readout acquisition methods associated with this trigger instance. duration Time duration of the instruction. Methods duration ( int ) \u2013 probe_pulse ( MultiplexedIQPulse ) \u2013 acquisitions ( tuple [ AcquisitionMethod , ... ] ) \u2013 Probe pulse to play, usually a MultiplexedIQPulse. Active readout acquisition methods associated with this trigger instance. previous MultiplexedIQPulse next RealPulse \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "channel",
    "url": "/iqm-pulse/api/iqm.pulse.playlist.channel.html",
    "description": "Control channel properties. Full path: iqm.pulse.playlist.channel Functions get_channel_properties (chip_topology,\u00a0...) Internal function to get channel properties. get_channel_properties_from_station...",
    "content": "Control channel properties. Full path: iqm.pulse.playlist.channel Functions get_channel_properties (chip_topology,\u00a0...) Internal function to get channel properties. get_channel_properties_from_station_settings (...) Get channel properties from Station Control controller settings following the standard convention. Classes ChannelConfiguration Base class for configuring channels. ChannelDescription Channel specific data, including tables for the instructions and waveforms used. ChannelProperties Defines the properties of a control or measurement channel. IQChannelConfig Requested configuration of an IQ channel. ProbeChannelProperties ChannelProperties for probe line channels. RealChannelConfig Requested configuration of a real channel. Inheritance previous playlist next iqm.pulse.playlist.channel.get_channel_properties \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "ChannelProperties",
    "url": "/iqm-pulse/api/iqm.pulse.playlist.channel.ChannelProperties.html",
    "description": "Bases: object Defines the properties of a control or measurement channel. All ZI instruments (HDAWG, UHFQA, SHFSG, SHFQA) can handle control pulses and waits where the\nnumber of samples is 32 + n * 16...",
    "content": "Bases: object Defines the properties of a control or measurement channel. All ZI instruments (HDAWG, UHFQA, SHFSG, SHFQA) can handle control pulses and waits where the\nnumber of samples is 32 + n * 16 , where n in {0, 1, 2, ...} . TODO Some of them might be more capable (at least some SHFQA commands can handle 4 + n * 4 ) ? Module: iqm.pulse.playlist.channel Attributes blocks_component Whether content in this channel should block the entire component that it is associated with in the scheduling. is_iq HACK, True iff this is an IQ channel. is_virtual Virtual channels are only used on the frontend side during compilation and scheduling. sample_rate sample rate of the instrument responsible for the channel (in Hz) instruction_duration_granularity all instruction durations on this channel must be multiples of this granularity (in samples) instruction_duration_min all instruction durations on this channel must at least this long (in samples) compatible_instructions instruction types that are allowed on this channel Methods duration_to_int_samples Convert a time duration to an integer number of samples at the channel sample rate. duration_to_samples Convert a time duration to number of samples at the channel sample rate. duration_to_seconds Convert a time duration in samples at the channel sample rate to seconds. round_duration_to_granularity Round a time duration to the channel granularity. sample_rate ( float ) \u2013 instruction_duration_granularity ( int ) \u2013 instruction_duration_min ( int ) \u2013 compatible_instructions ( tuple [ type [ Instruction ] , ... ] ) \u2013 is_iq ( bool ) \u2013 is_virtual ( bool ) \u2013 blocks_component ( bool ) \u2013 sample rate of the instrument responsible for the channel (in Hz) all instruction durations on this channel must be multiples of this granularity (in samples) all instruction durations on this channel must at least this long (in samples) instruction types that are allowed on this channel HACK, True iff this is an IQ channel. TODO do better Virtual channels are only used on the frontend side during compilation and scheduling.\nThey are removed from the Schedule before it is sent to Station\nControl. For example, virtual drive channels of computational resonators. Whether content in this channel should block the entire component that it is associated with in the scheduling.\nTypically all physical channels should block their components, but certain virtual channels might not\nrequire this. Convert a time duration to number of samples at the channel sample rate. duration ( float ) \u2013 time duration in s duration in samples float Convert a time duration in samples at the channel sample rate to seconds. duration ( float ) \u2013 time duration in samples duration in seconds float Convert a time duration to an integer number of samples at the channel sample rate. duration must be sufficiently close to an integer number of samples, and\nthat number must be something the channel can handle. duration ( float ) \u2013 time duration in s message ( str ) \u2013 message identifying the duration we are testing check_min_samples ( bool ) \u2013 If True, check that the output is at least instruction_duration_min . duration as an integer number of samples ValueError \u2013 duration is not close to an integer number of samples, or is\n    otherwise unacceptable to the channel int Round a time duration to the channel granularity. duration ( float ) \u2013 time duration in s round_up ( bool ) \u2013 whether to round the durations up to the closest granularity force_min_duration ( bool ) \u2013 whether to force the duration to be at least self.instruction_duration_min in\nseconds duration rounded to channel granularity, in s float previous ChannelDescription next IQChannelConfig \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "PRX_CustomWaveforms",
    "url": "/iqm-pulse/api/iqm.pulse.gates.prx.PRX_CustomWaveforms.html",
    "description": "Bases: PRX_SinglePulse_GateImplementation , CustomIQWaveforms ABC for PRX gates implemented using a single IQ pulse and hot-swappable waveforms. Module: iqm.pulse.gates.prx Attributes dependent_waves ...",
    "content": "Bases: PRX_SinglePulse_GateImplementation , CustomIQWaveforms ABC for PRX gates implemented using a single IQ pulse and hot-swappable waveforms. Module: iqm.pulse.gates.prx Attributes dependent_waves If set True , the Q channel waveform is considered to depend on the I channel's waveform so that they share the waveform parameters, (e.g. a DRAG PRX implementation). root_parameters Parameters independent of the of Waveforms. wave_i Waveform for the I channel. wave_q Waveform for the Q channel. Methods parent ( QuantumOp ) \u2013 name ( str ) \u2013 locus ( Locus ) \u2013 calibration_data ( OILCalibrationData ) \u2013 builder ( ScheduleBuilder ) \u2013 Parameters independent of the of Waveforms. Inheriting classes may override this to include parameters common\nto all such implementations. Builds an x_pi pulse out of the calibration data. amplitude_i ( float ) \u2013 amplitude_q ( float ) \u2013 n_samples ( int ) \u2013 IQPulse If set True , the Q channel waveform is considered to depend on the I channel\u2019s waveform\nso that they share the waveform parameters, (e.g. a DRAG PRX implementation). If not provided,\nwill be initialised as True . previous iqm.pulse.gates.prx.get_unitary_prx next PRX_CustomWaveformsSX \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.playlist.visualisation.base.inspect_playlist",
    "url": "/iqm-pulse/api/iqm.pulse.playlist.visualisation.base.inspect_playlist.html",
    "description": "Creates an HTML string from the given playlist and segments. The output can be viewed in a browser or in a Jupyter notebook using IPython.core.display.HTML . playlist ( Playlist ) \u2013 The Playlist to be...",
    "content": "Creates an HTML string from the given playlist and segments. The output can be viewed in a browser or in a Jupyter notebook using IPython.core.display.HTML . playlist ( Playlist ) \u2013 The Playlist to be visualised segments ( Sequence [ int ] ) \u2013 Indices of the Playlist segments to inspect. The generated raw HTML string. str previous base next waveforms \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "MOVE_CRF_CRF",
    "url": "/iqm-pulse/api/iqm.pulse.gates.move.MOVE_CRF_CRF.html",
    "description": "Bases: MOVE_CustomWaveforms Qubit-resonator MOVE gate using the CRF waveform for the coupler and the qubit flux pulse. Module: iqm.pulse.gates.move Attributes parameters Required calibration data, may...",
    "content": "Bases: MOVE_CustomWaveforms Qubit-resonator MOVE gate using the CRF waveform for the coupler and the qubit flux pulse. Module: iqm.pulse.gates.move Attributes parameters Required calibration data, may be nested symmetric True iff the implementation is symmetric in its locus components. Methods parent ( QuantumOp ) \u2013 name ( str ) \u2013 locus ( Locus ) \u2013 calibration_data ( OILCalibrationData ) \u2013 builder ( ScheduleBuilder ) \u2013 alias of CosineRiseFall Required calibration data, may be nested alias of CosineRiseFall True iff the implementation is symmetric in its locus components.\nOnly meaningful if arity != 1 , and the locus components are of the same type. previous iqm.pulse.gates.move.validate_move_instructions next MOVE_CustomWaveforms \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.scheduler.extend_schedule_new",
    "url": "/iqm-pulse/api/iqm.pulse.scheduler.extend_schedule_new.html",
    "description": "Extend a Schedule with another Schedule. Extends A with B , modifying A . The extension can add new channels to A . Can also handle cases where B has a ragged left side, i.e. some of its channels begi...",
    "content": "Extend a Schedule with another Schedule. Extends A with B , modifying A . The extension can add new channels to A . Can also handle cases where B has a ragged left side, i.e. some of its channels begin\nwith Nothing instructions. A ( Schedule ) \u2013 schedule to be extended B ( Schedule ) \u2013 schedule to extend A with channels ( dict [ str , ChannelProperties ] ) \u2013 properties of the control channels TOL ( float ) \u2013 time durations equal or smaller than this are considered zero (in seconds) None previous iqm.pulse.scheduler.extend_schedule next SegmentPointer \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "ScheduleBuilder",
    "url": "/iqm-pulse/api/iqm.pulse.builder.ScheduleBuilder.html",
    "description": "Bases: object Builds instruction schedules out of quantum circuits or individual quantum operations. Encapsulates known quantum ops, the calibration information for them, QPU components and their\ntopo...",
    "content": "Bases: object Builds instruction schedules out of quantum circuits or individual quantum operations. Encapsulates known quantum ops, the calibration information for them, QPU components and their\ntopology, and controller properties. op_table ( QuantumOpTable ) \u2013 definitions of known quantum ops calibration ( OpCalibrationDataTree ) \u2013 calibration data tree for the quantum ops chip_topology ( ChipTopology ) \u2013 Chip topology derived from the CHAD. channels ( dict [ str , ChannelProperties ] ) \u2013 mapping of controller names to the configurations of their channels component_channels ( dict [ str , dict [ str , str ] ] ) \u2013 Mapping from QPU component name to a mapping of ('drive', 'flux', 'readout') to the name of the control channel responsible for that function of the component. Module: iqm.pulse.builder Attributes composite_cache Cache for the CompositeGate TimeBoxes. Methods build_playlist Build a playlist from a number of instruction schedules. circuit_to_timebox Convert a quantum circuit to a TimeBox. get_calibration Calibration data for the given quantum operation, implementation and locus. get_control_channels Control channels that directly affect quantum operations at the given locus. get_drive_channel Drive channel for the given QPU component. get_flux_channel Flux channel for the given QPU component. get_implementation Provide an implementation for a quantum operation at a given locus. get_implementation_class Implementation class for the given operation. get_probe_channel Probe line channel for the probe line component belongs to. get_virtual_feedback_channel_for Get virtual feedback channel for feedback to a given AWG from a given probe line. get_virtual_feedback_channels All virtual feedback signal channels for the given QPU component. has_calibration Is there calibration data for the given quantum operation, implementation and locus? inject_calibration Inject new calibration data, changing self.calibration after the ScheduleBuilder initialisation. resolve_timebox Resolve a TimeBox. timebox_to_schedule Convert a TimeBox to a finished instruction schedule, ready for execution. timeboxes_to_front_padded_playlist Temporary helper function, for converting a sequence of TimeBoxes to a Playlist. timeboxes_to_playlist Convert a sequence of TimeBoxes to a Playlist. validate_calibration Check that the calibration data matches the known quantum operations. validate_quantum_circuit Validate a sequence of circuit operations constituting a quantum circuit. wait Utility method for applying Block instructions on every channel of the given locus. Cached GateImplementations. The tree has the same structure as OpCalibrationDataTree. Cache for the CompositeGate TimeBoxes. Flushed whenever ANY calibration data is injected into the builder. self.component_channels mapping inverted cached for scheduling algorithm performance. This mapping is\nused in the scheduling to determine the components to block based on their associated channels. Only\nblocking channels are included in this mapping, non-blocking channels (e.g. certain virtual channels) do not\nblock their components, just themselves. Cache the probe and non-probe channel names for the scheduling algorithm performance Whether to require scheduling of probe instructions in seconds instead of in samples. This can happen for two\nreasons: 1) the probe channel has a different sampling rate to the other channels (e.g. with UHFQA) or\n2) the probe channels have a different instruction granularity to some of the other channels (e.g. with\nmixed stations that have the RO device from a different vendor than some of the AWGs). Cache representative channel properties for a probe and a non-probe channel for the scheduling algorithm\nperformance. Inject new calibration data, changing self.calibration after the ScheduleBuilder initialisation. Invalidates the gate_implementation cache for the affected operations/implementations/loci. Also invalidates\nthe cache for any factorizable gate implementation, if any of its locus components was affected. partial_calibration ( dict [ str , dict [ str , dict [ tuple [ str , ... ] | None , dict [ str , Any ] ] ] ] ) \u2013 data to be injected. Must have the same structure as self.calibration but does not\nhave to contain all operations/implementations/loci/values. Only the parts of the data that are\nfound will be merged into self.calibration (including any None values). self._cache will\nbe invalidated for the found operations/implementations/loci and only if the new calibration data\nactually differs from the previous. None Check that the calibration data matches the known quantum operations. ValueError \u2013 there is something wrong with the calibration data None Drive channel for the given QPU component. component ( str ) \u2013 name of a QPU component Name of the drive channel for component , if it exists. KeyError \u2013 if component does not exist or does not have a drive channel str Flux channel for the given QPU component. See get_drive_channel() . component ( str ) \u2013 str Probe line channel for the probe line component belongs to. See get_drive_channel() . component ( str ) \u2013 str All virtual feedback signal channels for the given QPU component. A virtual feedback channel between a source and a destination exists if the station configuration allows it. component can be either the source or the destination of the signal. component ( str ) \u2013 name of a QPU component Names of the virtual channels. list [ str ] Get virtual feedback channel for feedback to a given AWG from a given probe line. awg_name ( str ) \u2013 name of the awg node that receives the feedback bit. feedback_qubit ( str ) \u2013 which qubit\u2019s measurement resulted in the feedback bit The virtual feedback channel name. ValueError \u2013 if the given AWG does not support fast feedback from the given probe line. str Control channel name for the given QPU component and operation. name of the channel KeyError \u2013 if component does not exist or does not have the operation component ( str ) \u2013 operation ( str ) \u2013 str Is there calibration data for the given quantum operation, implementation and locus? op_name ( str ) \u2013 name of the quantum operation impl_name ( str ) \u2013 name of the implementation locus ( tuple [ str , ... ] ) \u2013 locus of the operation True iff requested calibration data was found bool Calibration data for the given quantum operation, implementation and locus. op_name ( str ) \u2013 name of the quantum operation impl_name ( str ) \u2013 name of the implementation locus ( tuple [ str , ... ] ) \u2013 locus of the operation requested calibration data ValueError \u2013 requested calibration data was not found dict [ str , Any ] Control channels that directly affect quantum operations at the given locus. Includes the probe, drive and flux channels of the locus QPU components.\nDoes not include e.g. any neighboring coupler channels, these will have to be added\nseparately in the TimeBox resolution phase. Will only return channels that are known to exist, i.e. are found in ScheduleBuilder.channels . locus ( Iterable [ str ] ) \u2013 locus on which the operation acts names of the control channels that directly affect the operation tuple [ str , \u2026] Utility method for applying Block instructions on every channel of the given locus. The Block instructions guarantee the locus components to idle for the given duration,\nand cannot e.g. be replaced with e.g. dynamical decoupling sequences.\nThey are treated the same as any other TimeBox contents: Blocks on different channels remain aligned in time during scheduling. The actual waiting time on a particular channel may thus be >= duration ,\nif the other channels have less non-blocking space on either side. Note TODO For now, this method can round duration to the nearest value allowed by each\nchannel if requested. This is for the benefit of EXA sweeping over waiting durations.\nIn the future, EXA sweep generation should be responsible for doing the rounding. locus ( Iterable [ str ] ) \u2013 locus components that should experience the wait duration ( float ) \u2013 how long to wait (in seconds) rounding ( bool ) \u2013 Iff True, for each channel separately, duration will be rounded to the\nnearest value allowed by the granularity of that channel. The Waits will start\nsimultaneously. box containing Block instructions on every control channel of locus TimeBox Provide an implementation for a quantum operation at a given locus. op_name ( str ) \u2013 name of the quantum operation locus ( Iterable [ str ] ) \u2013 locus of the operation impl_name ( str | None ) \u2013 name of the implementation ( None means the implementation is chosen automatically\nusing the logic described below) strict_locus ( bool ) \u2013 iff False, for non-symmetric implementations of symmetric ops the locus order may\nbe changed if no calibration data is available for the requested locus order use_priority_order ( bool ) \u2013 Only has an effect if impl_name is None . Iff False , QuantumOp.get_default_implementation_for_locus() is used. Otherwise, the first implementation in\nthe priority order that has calibration data for locus is chosen. The priority order is as follows:\n1. The locus-specific priority defined in QuantumOp.defaults_for_locus[locus] if any.\n2. The global priority order defined in QuantumOp.implementations . priority_calibration ( dict [ str , Any ] | None ) \u2013 Calibration data from which to load the calibration instead of the common calibration\ndata in calibration . If no calibration is found for the given implementation or priority_calibration is None , the common calibration is used. Any non-empty\nvalues found in priority_calibration will be merged to the common calibration. Note:\nusing priority_calibration will prevent saving/loading via the cache. requested implementation ValueError \u2013 requested implementation could not be provided GateImplementation Find an implementation and locus for the given quantum operation instance compatible\nwith the calibration data. op ( QuantumOp ) \u2013 quantum operation impl_name ( str | None ) \u2013 Name of the implementation. None means use the highest-priority implementation for\nwhich we have calibration data. locus ( tuple [ str , ... ] ) \u2013 locus of the operation strict_locus ( bool ) \u2013 iff False, for non-symmetric implementations of symmetric ops the locus order may\nbe changed to an equivalent one if no calibration data is available for the requested locus order chosen implementation name, locus ValueError \u2013 requested implementation could not be found ValueError \u2013 requested implementation had no calibration data for this locus ValueError \u2013 no specific implementation was requested, but no known implementation had\n    calibration data for this locus tuple [ str , tuple [ str , \u2026]] Build a factory class for the given quantum operation, implementation and locus. The GateImplementations are built when they are first requested, and cached for later use. op ( QuantumOp ) \u2013 quantum operation impl_name ( str | None ) \u2013 Name of the implementation. None means use the highest-priority implementation for\nwhich we have calibration data. locus ( tuple [ str , ... ] ) \u2013 locus of the operation strict_locus ( bool ) \u2013 iff False, for non-symmetric implementations of symmetric ops the locus order may\nbe changed if no calibration data is available for the requested locus order priority_calibration ( dict [ str , Any ] | None ) \u2013 Calibration data from which to load the calibration instead of the common\ncalibration data. Priority calibration should be either a dict of the type OILCalibrationData ,\ni.e. containing the operation name, implementation name, and locus, or just a dict containing\nthe calibration data for the locus implied by the args op , impl_name and locus . requested implementation ValueError \u2013 requested implementation could not be provided or had no calibration data for this locus GateImplementation Implementation class for the given operation. op_name ( str ) \u2013 name of the quantum operation impl_name ( str | None ) \u2013 name of the implementation ( None means use the default implementation) requested implementation class type [ GateImplementation ] Validate a sequence of circuit operations constituting a quantum circuit. operations ( Iterable [ CircuitOperation ] ) \u2013 quantum circuit to be validated require_measurements ( bool ) \u2013 iff True the circuit must include at least one measurement operation ValueError \u2013 operations do not constitute a valid quantum circuit None Convert a quantum circuit to a TimeBox. circuit ( Iterable [ CircuitOperation ] ) \u2013 quantum circuit name ( str ) \u2013 name of the circuit scheduling_algorithm ( SchedulingAlgorithm ) \u2013 scheduling algorithm to be used in resolving the TimeBoxes. locus_mapping ( dict [ str , str ] | None ) \u2013 optional mapping of placeholder component names to the physical component names used\nwhile resolving the circuit into a TimeBox. unresolved TimeBox that implements circuit TimeBox Temporary helper function, for converting a sequence of TimeBoxes to a Playlist. Each individual TimeBox in boxes is resolved into a Schedule, and then\neach schedules is front-padded with Wait instructions on each channel\nsuch that the resulting Schedules have equal durations. This is required since\nfor now in Station Control the delay before the final measurement is the same for\nall the Schedules in a Playlist, and we do not wish to lose coherence waiting for\nthe measurement after each Schedule is done. TODO Once Station Control can handle measurements better, this method should be removed,\nand timeboxes_to_playlist() be used instead. boxes ( Iterable [ TimeBox ] ) \u2013 TimeBoxes to include in the playlist neighborhood ( int ) \u2013 During scheduling, block neighboring channels of the used components this far. By default,\nblocks only the defined locus components and any other components which have occupied channels. playlist that implements boxes , padded schedule duration in seconds tuple [ Playlist , float ] Convert a sequence of TimeBoxes to a Playlist. Resolves the boxes, converts them to Schedules, removes unnecessary channels, and then packs\nthe Schedules into a Playlist. Assumes all the TimeBoxes refer to the same QPU and its control channels. boxes ( Iterable [ TimeBox ] ) \u2013 TimeBoxes to include in the playlist neighborhood ( int ) \u2013 During scheduling, block neighboring channels of the used components this far.\nThe default value ensures that quantum operations work as intended, assuming the station\nis properly calibrated. Higher values may help defend against crosstalk, at the expense\nof a longer instruction schedule and thus more decoherence. playlist that implements boxes Playlist Convert a TimeBox to a finished instruction schedule, ready for execution. Resolves the box, then converts the durations of the instructions in the schedule to samples\nat the channel sample_rate. box ( TimeBox ) \u2013 TimeBox to resolve neighborhood ( int ) \u2013 During scheduling, block neighboring channels of the used components this far.\nThe default value ensures that quantum operations work as intended, assuming the station\nis properly calibrated. Higher values may help defend against crosstalk, at the expense\nof a longer instruction schedule and thus more decoherence. finished schedule that implements box Schedule Finishes the instruction schedule. filters out zero-duration Blocks and Waits converts all spacer instructions used during scheduling to Waits merges consequent Waits removes channels that only have Waits in them This should be the final step of the schedule building process, after this the\nresulting Schedule can no longer be consistently extended with another (since\nall the spacer instructions are gone). schedule ( Schedule ) \u2013 schedule to finish finished copy of schedule Schedule Resolve a TimeBox. Resolves recursively each of the children of the box, and then concatenates the resulting\nSchedules into a new one using a specific scheduling strategy and algorithm. The supported algorithms are HARD_BOUNDARY , which treats each composite TimeBox as a solid rectangle (the\nlongest channel within defines the duration) and TETRIS , which packs the schedule as tightly as possible\n(solid instructions still cannot overlap) regardless of the TimeBox boundaries. Modifies box so that it becomes atomic, if it isn\u2019t already. box ( TimeBox ) \u2013 TimeBox to resolve neighborhood ( int ) \u2013 During scheduling, block control channels of neighboring QPU components this far\nfrom the locus. Values higher than 0 may help defend against crosstalk, at the expense\nof a longer instruction schedule and thus more decoherence. compute_neighborhood_hard_boundary ( bool ) \u2013 Whether to precompute the neighborhood components while resolving\na composite TimeBox in the HARD_BOUNDARY algorithm. Typically one does not want to do this on\nthe top layer composite TimeBox , since it would be unused. The algorithm sets this True on\nlower layers, where it improves the performance as the neighborhood components are needed in scheduling. instruction schedule that implements box Schedule Resolves a TimeBox using the HARD_BOUNDARY algorithm, which treats each composite TimeBox as a solid\nrectangle (the longest channel within defines the duration). box ( TimeBox ) \u2013 neighborhood ( int ) \u2013 compute_neighborhood ( bool ) \u2013 Schedule Computes and caches the blocking neighborhoods for HARD_BOUNDARY algorithm. box ( TimeBox ) \u2013 Atomic TimeBox whose neighborhood to compute. neighborhood ( int ) \u2013 Return QPU components this far from the locus. QPU components (plus maybe channels?) belonging the the given neighborhood of box . set [ str ] Resolves a TimeBox using the TETRIS algorithm, which packs the schedule as tightly as possible\n(solid instructions still cannot overlap) regardless of the TimeBox boundaries. box ( TimeBox ) \u2013 neighborhood ( int ) \u2013 Schedule Add additional blocked channels to the schedule, preventing their use during the schedule. In the idealized computational model we assume that in a (correctly calibrated) quantum computer\nthere is no effective interaction between QPU components (in the computational frame and subspace) while\na Wait instruction is acting on the flux channel of the coupler connecting those components\n(i.e., the coupler is idling).\nHence a QPU component experiences no effective evolution if Wait instructions are\nacting on its drive, flux and probe channels, and the flux channels of all its couplers. Of course, in reality the QPU will experience at least some decoherence during a Wait, and\npossibly some crosstalk.\nIn some applications, e.g. decoherence experiments, it is essential to Wait for a specific time,\nsince it\u2019s precisely the decoherence that we are interested in. However, if we are only interested in applying well-defined local quantum operations on specific\nloci, it is essential to shut down all unwanted dynamics by adding Block instructions on\ncontrol channels of the unused and neighboring channels.\nThey act like Waits (and are converted into Waits at the end of the scheduling), but are allowed\nto overlap in time, since we are only interested in blocking those channels for the duration of the\nquantum operation. schedule ( Schedule ) \u2013 instruction schedule to modify locus ( set [ str ] ) \u2013 information-carrying QPU components schedule is meant to operate on (does not include couplers) neighborhood ( int ) \u2013 How far should we block neighboring QPU components?\nZero means just the locus qubits, one means neighboring couplers, two means their neighboring\nqubits etc. schedule , with added Block instructions on all the neighbor channels,\nfor the duration of the schedule None Build a playlist from a number of instruction schedules. This involves compressing the schedules so that no duplicate information\nneeds to be transferred to Station Control. All virtual channels are dropped at this point. schedules ( Iterable [ Schedule ] ) \u2013 finished instruction schedules to include in the playlist finish_schedules ( bool ) \u2013 whether to finalise the schedules before building the playlist. Should be set True unless some process has already finalised them before calling this function. playlist containing the schedules ValueError \u2013 if the schedules contain channels with non-uniform sampling rates Playlist Create shortcut for self.get_implementation(<op_name>, \u2026) as self.<op_name>(\u2026) . If there is a name collision with another attribute in self , the shortcut method won\u2019t be added and\na warning is raised. op_name ( str ) \u2013 None previous CircuitOperation next circuit_operations \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "ProbePulse_CustomWaveforms",
    "url": "/iqm-pulse/api/iqm.pulse.gates.measure.ProbePulse_CustomWaveforms.html",
    "description": "Bases: CustomIQWaveforms Base class for implementing a probe line measurement pulse with custom waveforms in the I and Q channels. With given Waveform waveform definitions Something and SomethingElse ...",
    "content": "Bases: CustomIQWaveforms Base class for implementing a probe line measurement pulse with custom waveforms in the I and Q channels. With given Waveform waveform definitions Something and SomethingElse ,\nyou may define a measurement implementation that uses them as follows: class MyGate(ProbePulse_CustomWaveforms, i_wave=Something, q_wave=SomethingElse) . Contrary to the Measure_CustomWaveforms class, this implementation acts on proble lines directly (i.e. its locus is a single probe line). The measurement IQPulse instruction will not be automatically modulated\nby any frequency, so any modulations should be included in the I and Q waveforms themselves. Module: iqm.pulse.gates.measure Attributes dependent_waves If set True , the Q channel waveform is considered to depend on the I channel's waveform so that they share the waveform parameters, (e.g. a DRAG PRX implementation). root_parameters Parameters independent of the of Waveforms. wave_i Waveform for the I channel. wave_q Waveform for the Q channel. Methods duration_in_seconds Duration of the Schedule of the gate implementation (in seconds). get_locus_mapping_name Get the name of the locus mapping stored in ScheduleBuilder.ChipTopology for this implementation. parent ( QuantumOp ) \u2013 name ( str ) \u2013 locus ( Locus ) \u2013 calibration_data ( OILCalibrationData ) \u2013 builder ( ScheduleBuilder ) \u2013 Parameters independent of the of Waveforms. Inheriting classes may override this to include parameters common\nto all such implementations. Builds a probe pulse and acquisition methods using the calibration data. Subclasses may override this method if needed. waveform_params ( dict [ str , Any ] ) \u2013 root_params ( dict [ str , Any ] ) \u2013 tuple [ IQPulse , tuple [ AcquisitionMethod , AcquisitionMethod ]] Returns a TimeBox containing the probe pulse measurement. In scheduling, the returned TimeBox blocks only the probe line ( self.locus[0] ). key ( str ) \u2013 The time trace results generated on this trigger will be used to assigned to f\"{probe_line}__{key}\" , where probe_line is the one that handles self.locus[0] . If empty,\nthe key \u201creadout.time_trace\u201d is used. TimeBox containing the ReadoutTrigger instruction. TimeBox If set True , the Q channel waveform is considered to depend on the I channel\u2019s waveform\nso that they share the waveform parameters, (e.g. a DRAG PRX implementation). If not provided,\nwill be initialised as True . Duration of the Schedule of the gate implementation (in seconds). Can be left unimplemented if the duration e.g. depends on the gate arguments.\nSubclasses can reimplement this method in case it makes sense in their context. float Get the name of the locus mapping stored in ScheduleBuilder.ChipTopology for this implementation. By default, it is \"<operation_name>.<implementation_name>\" . Inheriting classes may\noverride this for different behaviour. operation_name ( str ) \u2013 name of the quantum operation. implementation_name ( str ) \u2013 name of the implementation name of the locus mapping str previous Measure_CustomWaveforms next move \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "reset",
    "url": "/iqm-pulse/api/iqm.pulse.gates.reset.html",
    "description": "Resetting qubits to the zero state. The reset operation is a non-unitary quantum channel that sets the state of a qubit to \\(|0\\rangle\\) . Full path: iqm.pulse.gates.reset Module Attributes RESET_MEAS...",
    "content": "Resetting qubits to the zero state. The reset operation is a non-unitary quantum channel that sets the state of a qubit to \\(|0\\rangle\\) . Full path: iqm.pulse.gates.reset Module Attributes RESET_MEASUREMENT_KEY Constant measurement key for the measure operation required in the fast-feedback reset gate (the double underscore emphasizes the fact that this label should not be manually used in fast feedback). RESET_FEEDBACK_KEY The feedback key used in fast-feedback reset gate (the double underscore emphasizes the fact that this label should not be manually used in fast feedback). Classes Reset_Conditional Conditional reset operation. Reset_Wait Reset operation by relaxation (idling for a time comparable to the relaxation time of the component). Inheritance previous PRX_SinglePulse_GateImplementation next iqm.pulse.gates.reset.RESET_MEASUREMENT_KEY \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "circuit_operations",
    "url": "/iqm-pulse/api/iqm.pulse.circuit_operations.html",
    "description": "Methods for operating on lists of CircuitOperation objects. Full path: iqm.pulse.circuit_operations Functions get_unitary_from_circuit (circuit[,\u00a0table,\u00a0...]) Calculate the overall unitary implemented...",
    "content": "Methods for operating on lists of CircuitOperation objects. Full path: iqm.pulse.circuit_operations Functions get_unitary_from_circuit (circuit[,\u00a0table,\u00a0...]) Calculate the overall unitary implemented by a sequence of CircuitOperations. get_unitary_from_op (op,\u00a0table,\u00a0qubits) Unitary matrix representing an operation within the context of the circuit. reorder (mat,\u00a0perm) Reorders the qubits in the n-qubit operator A according to the permutation vector perm. reshape_unitary (unitary,\u00a0indices,\u00a0n_qubits) Extend a unitary propagator to act on a larger system. Classes CircuitOperationList A list of iqm.pulse.builder.CircuitOperation objects with methods to add, remove and transform them. Inheritance previous ScheduleBuilder next iqm.pulse.circuit_operations.get_unitary_from_circuit \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "measure",
    "url": "/iqm-pulse/api/iqm.pulse.gates.measure.html",
    "description": "Projective measurement in the Z basis. Full path: iqm.pulse.gates.measure Classes Measure_Constant Implementation of a single-qubit projective, dispersive measurement in the Z basis. Measure_CustomWav...",
    "content": "Projective measurement in the Z basis. Full path: iqm.pulse.gates.measure Classes Measure_Constant Implementation of a single-qubit projective, dispersive measurement in the Z basis. Measure_CustomWaveforms Base class for implementing dispersive measurement operations with custom probe pulse waveforms. ProbePulse_CustomWaveforms Base class for implementing a probe line measurement pulse with custom waveforms in the I and Q channels. Inheritance previous XYGate next Measure_Constant \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "enums",
    "url": "/iqm-pulse/api/iqm.pulse.gates.enums.html",
    "description": "Enumerations for representing a set of important one- and two-qubit gates. Full path: iqm.pulse.gates.enums Module Attributes XYGATE_UNITARIES Mapping of XYGates to the corresponding SU(2) matrices TW...",
    "content": "Enumerations for representing a set of important one- and two-qubit gates. Full path: iqm.pulse.gates.enums Module Attributes XYGATE_UNITARIES Mapping of XYGates to the corresponding SU(2) matrices TWO_QUBIT_UNITARIES Mapping of TwoQubitGates to the corresponding U(4) matrices Classes TwoQubitGate Enumerates a subset of two-qubit gates. XYGate Enumerate all single-qubit Clifford gates whose rotation axis is in the XY plane. Inheritance previous FluxPulseGate_TGSS_CRF next iqm.pulse.gates.enums.XYGATE_UNITARIES \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "Nothing",
    "url": "/iqm-pulse/api/iqm.pulse.playlist.schedule.Nothing.html",
    "description": "Bases: Instruction Used to extend a control channel in time, without blocking it, during scheduling. Can overlap with any other Instruction.\nConverted to a Wait instruction at the end of scheduling. M...",
    "content": "Bases: Instruction Used to extend a control channel in time, without blocking it, during scheduling. Can overlap with any other Instruction.\nConverted to a Wait instruction at the end of scheduling. Module: iqm.pulse.playlist.schedule Attributes duration Time duration of the instruction. Methods duration ( int ) \u2013 previous iqm.pulse.playlist.schedule.TOLERANCE next Schedule \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "waveforms",
    "url": "/iqm-pulse/api/iqm.pulse.playlist.waveforms.html",
    "description": "Waveform definitions. This module defines some waveforms that don\u2019t have special serialization, and reimports\nwaveforms that do from iqm.models.playlist.waveforms .\nSee the link for documentation of w...",
    "content": "Waveform definitions. This module defines some waveforms that don\u2019t have special serialization, and reimports\nwaveforms that do from iqm.models.playlist.waveforms .\nSee the link for documentation of waveforms that don\u2019t appear here. Full path: iqm.pulse.playlist.waveforms Classes Chirp Linear chirp, defined as ChirpImag Imaginary part of the linear chirp, which sets the phase to $-pi/2$. Cosine Periodic sinusoidal waveform which defaults to cosine. CosineRiseFallDerivative Derivative of a waveform that has a sinusoidal rise and fall, and a constant part in between. ModulatedCosineRiseFall Modulated Cosine Rise Fall waveform. Slepian Slepian waveform, which minimizes non-adiabatic errors during a gate. Inheritance previous iqm.pulse.playlist.visualisation.base.inspect_playlist next Chirp \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.circuit_operations.get_unitary_from_circuit",
    "url": "/iqm-pulse/api/iqm.pulse.circuit_operations.get_unitary_from_circuit.html",
    "description": "Calculate the overall unitary implemented by a sequence of CircuitOperations. Iterate through the list of operations, skipping over barrier operations, and calculate the unitary\nfor each operation, an...",
    "content": "Calculate the overall unitary implemented by a sequence of CircuitOperations. Iterate through the list of operations, skipping over barrier operations, and calculate the unitary\nfor each operation, and then calculate the matrix product of all of them. The unitary definition must be present\nin the QuantumOpTable given as the second argument. circuit ( list [ CircuitOperation ] ) \u2013 list of CircuitOperations in order table ( dict [ str , QuantumOp ] | None ) \u2013 Table of all registered quantum ops. qubit_names ( list [ str ] | None ) \u2013 Optionally, the ordering of the qubits. Array describing the action of the circuit in big endian convention. ndarray previous circuit_operations next iqm.pulse.circuit_operations.get_unitary_from_op \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "CCPRX_Composite",
    "url": "/iqm-pulse/api/iqm.pulse.gates.conditional.CCPRX_Composite.html",
    "description": "Bases: CompositeGate Classically controlled PRX gate. Applies a PRX gate conditioned on a discriminated readout result obtained in the same segment (active feedback).\nApplies a PRX gate if the result ...",
    "content": "Bases: CompositeGate Classically controlled PRX gate. Applies a PRX gate conditioned on a discriminated readout result obtained in the same segment (active feedback).\nApplies a PRX gate if the result is 1, and a Wait of equal duration if the result is 0.\nUses the default implementation of PRX underneath, so no extra calibration is needed. Not usable in the \u201clegacy\u201d readout programming mode. Module: iqm.pulse.gates.conditional Attributes parameters control_delays contains the times it takes for the classical control signal from each probe line (readout instrument) to become usable for the drive AWG implementing the PRX gate. Methods parent ( QuantumOp ) \u2013 name ( str ) \u2013 locus ( Locus ) \u2013 calibration_data ( OILCalibrationData ) \u2013 builder ( ScheduleBuilder ) \u2013 control_delays contains the times it takes for the classical control signal from each\nprobe line (readout instrument) to become usable for the drive AWG implementing the PRX gate.\nThe delays must be in the same order as the probe lines are listed in\nthe {drive_controller}.awg.feedback_sources station setting. Two TimeBoxes that together implement the classically controlled PRX gate. The first Timebox is for the control signal delay, and the second has a ConditionalInstruction.\nThe delay TimeBox operates only on a virtual channel and is used to block the pulse TimeBox\nuntil there has been enough time for the control signal to arrive.\nThe delay is specified by the control_delays gate parameter. In normal operation, the boxes can be placed sequentially without causing unnecessary delays.\nTo care of the timing yourself, simply ignore the first TimeBox. angle ( float ) \u2013 The PRX rotation angle (rad). phase ( float ) \u2013 The PRX rotation phase (rad). feedback_qubit ( str ) \u2013 The qubit that was measured to create the feedback bit. feedback_key ( str ) \u2013 Identifies the feedback signal if feedback_qubit was measured multiple times.\nThe feedback label is then f\"{feedback_qubit}__{feedback_key}\" .\nTODO: currently the HW does not support multiple feedback keys per drive channel, so this argument has\nno effect. The conditional prx will always listen feedback from the label f\"{feedback_qubit}__{FEEDBACK_KEY}\" . When the HW is improved, the actual key the user inputs\nshould be used. A TimeBox for the signal delay, and a TimeBox with a ConditionalInstruction inside. list [ TimeBox ] previous conditional next CCPRX_Composite_DRAGCosineRiseFall \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "gate_implementation",
    "url": "/iqm-pulse/api/iqm.pulse.gate_implementation.html",
    "description": "Factories for implementing quantum operations in terms of instruction schedules. Note Note the conceptual difference between quantum operations (ops) and instruction schedules . Ops represent abstract...",
    "content": "Factories for implementing quantum operations in terms of instruction schedules. Note Note the conceptual difference between quantum operations (ops) and instruction schedules . Ops represent abstract, ideal computational\noperations, whereas instruction schedules represent concrete control signal sequences for the\nquantum computer. One can (approximately) implement an op using a number of different\ninstruction schedules. Full path: iqm.pulse.gate_implementation Module Attributes Locus Sequence of QPU component physical names a quantum operation is acting on. OILCalibrationData Calibration data for a particular implementation of a particular quantum operation at a particular locus. OICalibrationData For a particular implementation of a particular quantum operation, maps operation loci to their calibration data. OCalibrationData For a particular quantum operation, maps implementation names to their calibration data. OpCalibrationDataTree Maps quantum operation names to their calibration data. NestedParams Nested dict defining the parameters required by GateImplementation classes. SINGLE_COMPONENTS_WITH_DRIVE_LOCUS_MAPPING Locus mapping name for mapping all components that have the drive operation defined. SINGLE_COMPONENTS_WITH_READOUT_LOCUS_MAPPING Locus mapping name for mapping all components that have the readout operation defined. SINGLE_COMPONENTS_WITH_FLUX_AWG_LOCUS_MAPPING Locus mapping name for mapping all components that have the flux operation defined and the flux controller has an AWG. PROBE_LINES_LOCUS_MAPPING Locus mapping name for mapping all probe lines. Functions get_waveform_parameters (wave[,\u00a0label_prefix]) Parameters that are required to initialize the given Waveform class. Classes CompositeCache Cache for CompositeGate TimeBoxes. CompositeGate Utility base class for creating gate implementations that are defined in terms of other gate implementations. CustomIQWaveforms Base class for GateImplementations using custom waveform definition with IQPulses. GateImplementation ABC for implementing quantum gates and other quantum operations using instruction schedules. SinglePulseGate Base class for GateImplementations that play a single pulse on a single channel. Inheritance previous CircuitOperationList next iqm.pulse.gate_implementation.Locus \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "prx",
    "url": "/iqm-pulse/api/iqm.pulse.gates.prx.html",
    "description": "Single-qubit PRX gate. The phased x rotation (PRX) gate is defined as where the rotation angle \\(\\theta\\) and the phase angle \\(\\phi\\) are in radians. It rotates the qubit state around an axis that li...",
    "content": "Single-qubit PRX gate. The phased x rotation (PRX) gate is defined as where the rotation angle \\(\\theta\\) and the phase angle \\(\\phi\\) are in radians. It rotates the qubit state around an axis that lies in the XY plane of the Bloch sphere. Full path: iqm.pulse.gates.prx Functions get_unitary_prx (angle,\u00a0phase) Unitary for a PRX gate. Classes PRX_CustomWaveforms ABC for PRX gates implemented using a single IQ pulse and hot-swappable waveforms. PRX_CustomWaveformsSX ABC for PRX gates implemented using SX gate, hot-swappable waveforms and phase manipulation. PRX_DRAGCosineRiseFall PRX gate, DRAG / CosineRiseFall IQ pulse implementation. PRX_DRAGCosineRiseFallSX PRX gate, DRAG / CosineRiseFall IQ pulse with VZ implementation. PRX_DRAGGaussian PRX gate, DRAG / TruncatedGaussian IQ pulse implementation. PRX_DRAGGaussianSX PRX gate, DRAG / Gaussian IQ pulse with VZ implementation. PRX_GateImplementation ABC for different implementations of the PRX gate. PRX_SinglePulse_GateImplementation ABC for PRX gates implemented using a single IQ pulse. Inheritance previous MoveMarker next iqm.pulse.gates.prx.get_unitary_prx \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "barrier",
    "url": "/iqm-pulse/api/iqm.pulse.gates.barrier.html",
    "description": "Barrier metaoperation. The barrier is an n-qubit metaoperation that forces a specific temporal ordering on the quantum\noperations on different sides of it (the ones preceding the barrier are always ex...",
    "content": "Barrier metaoperation. The barrier is an n-qubit metaoperation that forces a specific temporal ordering on the quantum\noperations on different sides of it (the ones preceding the barrier are always executed first). Full path: iqm.pulse.gates.barrier Classes Barrier GateImplementation for the n-qudit barrier metaoperation. Inheritance previous iqm.pulse.gates.register_implementation next Barrier \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "CompositeCache",
    "url": "/iqm-pulse/api/iqm.pulse.gate_implementation.CompositeCache.html",
    "description": "Bases: object Cache for CompositeGate TimeBoxes. Result from CompositeGate.__call__`() (or other methods returning a TimeBox) cannot be stored in the normal\ncache GateImplementation._timebox_cache as ...",
    "content": "Bases: object Cache for CompositeGate TimeBoxes. Result from CompositeGate.__call__`() (or other methods returning a TimeBox) cannot be stored in the normal\ncache GateImplementation._timebox_cache as composites can include any gates in their calls, and we cannot trust\nthat the cache is flushed correctly just based on if the composite itself has its own calibration data changed\n(we would have to flush also when any of the composite\u2019s members get new calibration, and this cannot consistently\nbe deduced). For this reason, CompositeCache will be flushed whenever ANY gate implementation gets new calibration\ndata. Module: iqm.pulse.gate_implementation Methods flush Flush the CompositeCache. get Get a TimeBox from the cache. set Set a TimeBox into the cache. Set a TimeBox into the cache. gate_implementation ( GateImplementation ) \u2013 gate implementation that created the TimeBox. cache_key ( tuple [ Any , ... ] ) \u2013 hashable key identifying the TimeBox (usually the CompositeGate.__call__() arguments cast\ninto a tuple). timebox ( TimeBox ) \u2013 TimeBox that will be added to the cache. extra_id ( str ) \u2013 extra string id for further identifying the result if needed (for example if the TimeBox did not\ncome from the call method, but some other method, this could be the method\u2019s name). None Get a TimeBox from the cache. gate_implementation ( GateImplementation ) \u2013 gate implementation that created the TimeBox. cache_key ( tuple [ Any , ... ] ) \u2013 hashable key identifying the TimeBox (usually the CompositeGate.__call__() arguments cast\ninto a tuple). extra_id ( str ) \u2013 extra string id for further identifying the result (for example if the TimeBox did not come\nfrom the call method, but some other method, this could be the method\u2019s name). The cached TimeBox or None if not fund for this gate_implementation , cache_key , and extra_id . TimeBox | None Flush the CompositeCache. None previous iqm.pulse.gate_implementation.get_waveform_parameters next CompositeGate \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "QuantumOp",
    "url": "/iqm-pulse/api/iqm.pulse.quantum_ops.QuantumOp.html",
    "description": "Bases: object Describes a native quantum operation type. Quantum operations (or \u201cops\u201d in short), are simple, abstract, self-contained actions one can\nexecute on a station as parts of a quantum circuit...",
    "content": "Bases: object Describes a native quantum operation type. Quantum operations (or \u201cops\u201d in short), are simple, abstract, self-contained actions one can\nexecute on a station as parts of a quantum circuit. They include quantum gates, measurements,\nand resets. They must have an unambiguous definition in terms of their intended effect on the\ncomputational subspace of the quantum subsystems (qubits, qudits, qumodes\u2026) they act on.\nThey are implemented on the hardware using instruction schedules . A QuantumOp can also be a metaoperation , which (in an idealized picture) has no effect on the\nquantum state, but affects the scheduling of the other ops. Execution barriers are an example of a metaoperation. The ops can have any number of named parameters. For example, PRX is a two-parameter\nquantum gate family, whereas CZ is a single gate with no parameters. A locus (plural: loci) is a tuple[str, ...] (an ordered sequence) of CHAD component names\nan instance of a quantum operation acts on. The locus consists of those QPU components that store the\nquantum information the operation acts on. For example, a CZ gate implemented using a flux\npulse on the coupler connecting the qubits does not include the coupler in its locus, since the\ncoupler is simply an implementation detail. In a quantum circuit each operation type normally has several different loci. For example, you\ncould have a PRX gate being used on qubits {('QB1',), ('QB2',), ('QB5',)} , or a CZ gate used on qubit pairs {('QB1', 'QB3'), ('QB3', 'QB5',), ('QB1', 'QB5',)} . Each quantum operation can have any number of named implementations , each represented by a GateImplementation subclass. For example, we may have two implementations of the CZ gate,\none with just a single flux pulse applied to the coupler, and another one with additional flux\npulses applied to the qubits as well. operation defines the abstract intention (what) implementation defines the concrete method (how) locus defines the target of the operation (where) The quantum operations are typically calibrated using specific calibration experiments that\noutput the required calibration data. Each implementation of each operation can require\nits own, independent set of calibration data for each locus. Module: iqm.pulse.quantum_ops Attributes default_implementation Name of the default implementation (the global default). factorizable True iff the operation is always factorizable to independent single-subsystem operations, which is also how it is implemented, for example parallel single-qubit measurements. params Names of required operation parameters, if any. symmetric True iff the effect of operation is symmetric in the quantum subsystems it acts on. unitary Unitary matrix that represents the effect of this quantum operation in the computational basis, or None if the quantum operation is not unitary or the exact unitary is not known. name Unique name of the operation. arity Number of locus components the operation acts on. implementations Maps implementation names to GateImplementation classes that provide them. defaults_for_locus Optionally define the implementation default individually per each locus. Methods copy Make a copy of self with the given changes applied to the contents. get_default_implementation_for_locus Get the default (highest priority) implementation for the given locus. set_default_implementation Sets the given implementation as the default. set_default_implementation_for_locus Set the locus-specific default implementation. name ( str ) \u2013 arity ( int ) \u2013 params ( tuple [ str , ... ] ) \u2013 implementations ( dict [ str , type [ GateImplementation ] ] ) \u2013 symmetric ( bool ) \u2013 factorizable ( bool ) \u2013 defaults_for_locus ( dict [ tuple [ str , ... ] , str ] ) \u2013 unitary ( Callable [ ... , np.ndarray ] | None ) \u2013 Unique name of the operation. Number of locus components the operation acts on.\nEach locus component corresponds to a quantum subsystem in the definition of the operation.\nThe computational subspace always consists of the lowest two levels of the subsystem.\nZero means the operation can be applied on any number of locus components. Names of required operation parameters, if any. Maps implementation names to GateImplementation classes that provide them.\nEach such class should describe the implementation in detail in its docstring.\nThe implementations are in the dict in priority order, highest-priority (default) first. This global priority\norder can be overridden per locus by the attribute defaults_for_locus . True iff the effect of operation is symmetric in the quantum subsystems it acts on.\nOnly meaningful if self.arity != 1 . True iff the operation is always factorizable to independent single-subsystem operations, which\nis also how it is implemented, for example parallel single-qubit measurements.\nIn this case the operation calibration data is for individual subsystems as well. Optionally define the implementation default individually per each locus. Maps the locus to the default\ngate implementation name. If a locus is not found in this dict (by default, the dict is empty), falls back to the\nglobal order defined in implementations . The implementations must be first registered in implementations . Unitary matrix that represents the effect of this quantum operation in the computational basis, or None if the quantum operation is not unitary or the exact unitary is not known.\nThe Callable needs to take exactly the arguments given in params , for example if params=('angle','phase') , the function must have signature f(angle:float, phase: float) -> np.ndarray .\nFor operations acting on more than 1 qubit, unitary should be given in the big-endian order, i.e. in the basis np.kron(first_qubit_basis_ket, second_qubit_basis_ket) . Make a copy of self with the given changes applied to the contents. QuantumOp Name of the default implementation (the global default). Sets the given implementation as the default. default ( str ) \u2013 name of the new default implementation ValueError \u2013 default is unknown or is a special implementation. None Get the default (highest priority) implementation for the given locus. If no locus-specific priority is defined, returns the global default. locus ( Iterable [ str ] ) \u2013 tuple of component names defining the locus. The default implementation name. str Set the locus-specific default implementation. default ( str ) \u2013 name of the new default implementation for locus . locus ( Iterable [ str ] ) \u2013 tuple of component names defining the locus. ValueError \u2013 if there is no implementation defined with the name default or default is a special\n    implementation. None previous iqm.pulse.quantum_ops.validate_op_calibration next scheduler \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.utils.merge_dicts",
    "url": "/iqm-pulse/api/iqm.pulse.utils.merge_dicts.html",
    "description": "Merge two dictionaries recursively, leaving the originals unchanged. A ( dict ) \u2013 dictionary B ( dict ) \u2013 another dictionary merge_nones ( bool ) \u2013 whether to also merge None and empty Sized values fr...",
    "content": "Merge two dictionaries recursively, leaving the originals unchanged. A ( dict ) \u2013 dictionary B ( dict ) \u2013 another dictionary merge_nones ( bool ) \u2013 whether to also merge None and empty Sized values from B to A. copy of A, with the contents of B merged in (and taking precedence) recursively dict previous iqm.pulse.utils.map_waveform_param_types next iqm.pulse.utils.normalize_angle \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.scheduler.NONSOLID",
    "url": "/iqm-pulse/api/iqm.pulse.scheduler.NONSOLID.html",
    "description": "Instructions that can be converted to Wait after scheduling. previous scheduler next iqm.pulse.scheduler.BLOCKING \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04....",
    "content": "Instructions that can be converted to Wait after scheduling. previous scheduler next iqm.pulse.scheduler.BLOCKING \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "CZ_Slepian_CRF",
    "url": "/iqm-pulse/api/iqm.pulse.gates.cz.CZ_Slepian_CRF.html",
    "description": "Bases: FluxPulseGate CZ gate using a Slepian flux pulse on the coupler and a CosineRiseFall flux pulse on the qubit. Module: iqm.pulse.gates.cz Attributes parameters Required calibration data, may be ...",
    "content": "Bases: FluxPulseGate CZ gate using a Slepian flux pulse on the coupler and a CosineRiseFall flux pulse on the qubit. Module: iqm.pulse.gates.cz Attributes parameters Required calibration data, may be nested symmetric True iff the implementation is symmetric in its locus components. Methods parent ( QuantumOp ) \u2013 name ( str ) \u2013 locus ( Locus ) \u2013 calibration_data ( OILCalibrationData ) \u2013 builder ( ScheduleBuilder ) \u2013 alias of Slepian Required calibration data, may be nested alias of CosineRiseFall True iff the implementation is symmetric in its locus components.\nOnly meaningful if arity != 1 , and the locus components are of the same type. previous CZ_Slepian_ACStarkCRF next CZ_TruncatedGaussianSmoothedSquare \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.validation.InvalidInstructionError",
    "url": "/iqm-pulse/api/iqm.pulse.validation.InvalidInstructionError.html",
    "description": "Error raised when encountering an invalid instruction. previous iqm.pulse.validation.AWGScheduleValidationError next iqm.pulse.validation.PlaylistValidationError \u00a9 Copyright 2019-2025, IQM Finland Oy....",
    "content": "Error raised when encountering an invalid instruction. previous iqm.pulse.validation.AWGScheduleValidationError next iqm.pulse.validation.PlaylistValidationError \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "PRX_DRAGGaussianSX",
    "url": "/iqm-pulse/api/iqm.pulse.gates.prx.PRX_DRAGGaussianSX.html",
    "description": "Bases: PRX_CustomWaveformsSX PRX gate, DRAG / Gaussian IQ pulse with VZ implementation. See PRX_CustomWaveformsVZ . Module: iqm.pulse.gates.prx Attributes dependent_waves If set True , the Q channel w...",
    "content": "Bases: PRX_CustomWaveformsSX PRX gate, DRAG / Gaussian IQ pulse with VZ implementation. See PRX_CustomWaveformsVZ . Module: iqm.pulse.gates.prx Attributes dependent_waves If set True , the Q channel waveform is considered to depend on the I channel's waveform so that they share the waveform parameters, (e.g. a DRAG PRX implementation). parameters Required calibration data, may be nested Methods parent ( QuantumOp ) \u2013 name ( str ) \u2013 locus ( Locus ) \u2013 calibration_data ( OILCalibrationData ) \u2013 builder ( ScheduleBuilder ) \u2013 If set True , the Q channel waveform is considered to depend on the I channel\u2019s waveform\nso that they share the waveform parameters, (e.g. a DRAG PRX implementation). If not provided,\nwill be initialised as True . Required calibration data, may be nested alias of TruncatedGaussian alias of TruncatedGaussianDerivative previous PRX_DRAGGaussian next PRX_GateImplementation \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.gates.u.get_unitary_u",
    "url": "/iqm-pulse/api/iqm.pulse.gates.u.get_unitary_u.html",
    "description": "Unitary for an SU(2) gate. See iqm.pulse.gates.u for the definition of the gate parameters. theta ( float ) \u2013 y rotation angle phi ( float ) \u2013 z rotation angle lam ( float ) \u2013 another z rotation angle...",
    "content": "Unitary for an SU(2) gate. See iqm.pulse.gates.u for the definition of the gate parameters. theta ( float ) \u2013 y rotation angle phi ( float ) \u2013 z rotation angle lam ( float ) \u2013 another z rotation angle 2x2 unitary representing u(theta, phi, lam) . ndarray previous u next UGate \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.builder.load_config",
    "url": "/iqm-pulse/api/iqm.pulse.builder.load_config.html",
    "description": "Load quantum operation definitions and calibration data from a YAML config file. path ( str ) \u2013 path to a YAML config file quantum operation definitions, calibration data tree tuple [ dict [ str , Qua...",
    "content": "Load quantum operation definitions and calibration data from a YAML config file. path ( str ) \u2013 path to a YAML config file quantum operation definitions, calibration data tree tuple [ dict [ str , QuantumOp ], dict [ str , dict [ str , dict [ tuple [ str , \u2026] | None , dict [ str , Any ]]]]] previous iqm.pulse.builder.build_quantum_ops next iqm.pulse.builder.validate_quantum_circuit \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.gates.reset.RESET_FEEDBACK_KEY",
    "url": "/iqm-pulse/api/iqm.pulse.gates.reset.RESET_FEEDBACK_KEY.html",
    "description": "The feedback key used in fast-feedback reset gate (the double underscore emphasizes the fact that this label should\nnot be manually used in fast feedback). previous iqm.pulse.gates.reset.RESET_MEASURE...",
    "content": "The feedback key used in fast-feedback reset gate (the double underscore emphasizes the fact that this label should\nnot be manually used in fast feedback). previous iqm.pulse.gates.reset.RESET_MEASUREMENT_KEY next Reset_Conditional \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "Slepian",
    "url": "/iqm-pulse/api/iqm.pulse.playlist.waveforms.Slepian.html",
    "description": "Bases: Waveform Slepian waveform, which minimizes non-adiabatic errors during a gate. It is assumed that the user has done the minimization in a prior step, such that the optimal \\(\\lambda_n\\) for\na s...",
    "content": "Bases: Waveform Slepian waveform, which minimizes non-adiabatic errors during a gate. It is assumed that the user has done the minimization in a prior step, such that the optimal \\(\\lambda_n\\) for\na specific length \\(\\tau_\\text{pulse}\\) (in the accelerated frame) is known. This class then reconstructs the\nwaveform with the following steps: Calculate \\(\\theta(\\tau)\\) (Slepian in the accelerated frame and in \\(\\theta\\) space) Calculate \\(t(\\tau)\\) (mapping time in the accelerated frame to time in the lab frame) Interpolate \\(\\theta(t)\\) (Slepian in the lab frame and in \\(\\theta\\) space) Calculate \\(f(t)\\) (Slepian in the lab frame and in frequency space) Calculate \\(V(t)\\) (Slepian in the lab frame and in voltage space) Since the waveform is normalized, any voltage pre-factor should go into the pulse amplitude. The user is advised to look up [ 1 ] for further details, since the derivation is mathematically\nheavy. full_width ( float ) \u2013 Duration of the support of the waveform. lambda_1 ( float ) \u2013 First coefficient of Slepian waveform. lambda_2 ( float ) \u2013 Second coefficient of Slepian waveform. frequency_initial_normalized ( float ) \u2013 Initial frequency of the pulsed component (usually coupler),\nnormalized by the maximum frequency of the pulsed component. frequency_to_minimize_normalized ( float ) \u2013 Frequency of the static component (usually qubit) which to\nminimize the leakage from/to, normalized by the maximum frequency of the pulsed component. coupling_strength_normalized ( float ) \u2013 Coupling strength between pulsed component and static component,\nnormalized by the maximum frequency of the pulsed component. center_offset ( float ) \u2013 The waveform is centered at this offset from the midpoint of the sampling window. squid_asymmetry ( float ) \u2013 Squid asymmetry. n_samples ( int ) \u2013 Module: iqm.pulse.playlist.waveforms Attributes center_offset  squid_asymmetry  full_width  lambda_1  lambda_2  frequency_initial_normalized  frequency_to_minimize_normalized  coupling_strength_normalized  n_samples Requested number of samples for the waveform. Methods non_timelike_attributes Mapping from waveform attributes to the units of their calibration data, unless that unit is second. Mapping from waveform attributes to the units of their calibration data, unless that unit is second. Used to construct the parameters for the calibration data required by the waveform.\nBy default all the waveform attributes are \u201ctimelike\u201d (the unit for their calibration data is s).\nHowever, some waveform attributes can be dimensionless, e.g. the relative amplitudes in a sum of\nconsisting of multiple terms, or frequency-like (calibration data has the unit \u2018Hz\u2019).\nIf a Waveform subclass has non-timelike attributes, it needs to redefine this method. When the Waveform is constructed, all timelike calibration data is converted to units of the\nsampling window duration, and all frequency-like calibration data into units of inverse sampling\nwindow duration. dict [ str , str ] Actually samples the waveform. sample_coords ( ndarray ) \u2013 coordinates of the samples to be returned array of samples (same shape as sample_coords , dtype == float ) ndarray Calculate the samples of the actual Slepian waveform. coords ( ndarray ) \u2013 normalized sample coordinates, in \\([0, 1]\\) samples of the Slepian waveform ndarray Convert time in the accelerated frame to the lab frame (real time). Since the conversion is defined via an integral, finding an analytical solution was not possible. Therefore, we\nintegrate the expression numerically with scipy.integrate.romb() . tau ( float | ndarray ) \u2013 Time in the accelerated frame. num_samples ( int ) \u2013 Number of samples for the numerical integration. Must be of the form 2 ** k + 1. tau converted to the lab frame ndarray Parametrization of the Slepian waveform in the accelerated frame. The Slepian waveform is parametrized using Fourier base functions, where we only take the cosine terms into\naccount ( [ 1 ] has shown that this is a reasonable assumption).\nHere, \\(\\lambda_n\\) is the amplitude of the \\(n\\) -th term of the Fourier base function.\nIt is usually sufficient to take only up to second order terms into account, i.e. only \\(\\lambda_1\\) and \\(\\lambda_2\\) are non-zero. tau ( ndarray ) \u2013 Time in the accelerated frame, normalized to [0, 1] with tau_pulse. Slepian waveform in the theta space and accelerated frame. ndarray previous ModulatedCosineRiseFall next quantum_ops \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "CCPRX_Composite_DRAGCosineRiseFall",
    "url": "/iqm-pulse/api/iqm.pulse.gates.conditional.CCPRX_Composite_DRAGCosineRiseFall.html",
    "description": "Bases: CCPRX_Composite Conditional drag_crf pulse. Module: iqm.pulse.gates.conditional Attributes default_implementations Mapping from operation names to the designated default implementation of that ...",
    "content": "Bases: CCPRX_Composite Conditional drag_crf pulse. Module: iqm.pulse.gates.conditional Attributes default_implementations Mapping from operation names to the designated default implementation of that operation. Methods parent ( QuantumOp ) \u2013 name ( str ) \u2013 locus ( Locus ) \u2013 calibration_data ( OILCalibrationData ) \u2013 builder ( ScheduleBuilder ) \u2013 Mapping from operation names to the designated default implementation of that operation. Filling this attribute\nallows one to define a different default implementation from the common default in self.builder.op_table to\nbe used in he context of this composite gate. If an operation is not found in this dict as a key, this\nCompositeGate will use the common default as the default implementation for it. previous CCPRX_Composite next CCPRX_Composite_DRAGGaussian \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "RZ_ACStarkShift",
    "url": "/iqm-pulse/api/iqm.pulse.gates.rz.RZ_ACStarkShift.html",
    "description": "Bases: GateImplementation Implementation of the RZ gate using an AC Stark pulse. An AC Stark pulse is a strong off-resonant drive on a qubit. This pulse leads to a frequency shift of the qubit due\nto ...",
    "content": "Bases: GateImplementation Implementation of the RZ gate using an AC Stark pulse. An AC Stark pulse is a strong off-resonant drive on a qubit. This pulse leads to a frequency shift of the qubit due\nto the AC Stark effect. The qubit frequency shift depends on the AC Stark pulse amplitude and frequency. ac_stark_pulse \u2013 AC Stark pulse. channel \u2013 Name of the drive channel on which the AC Stark pulse is played. parent ( QuantumOp ) \u2013 name ( str ) \u2013 locus ( Locus ) \u2013 calibration_data ( OILCalibrationData ) \u2013 builder ( ScheduleBuilder ) \u2013 Constructs an instance of the AC Stark pulse for the given locus. Module: iqm.pulse.gates.rz Attributes ac_stark_waveform  Methods duration_in_seconds Duration of the Schedule of the gate implementation (in seconds). The GateImplementation-specific logic for implementing a quantum operation. Inheriting classes may override this method if the default __call__() caching (based on the args & kwargs\nin the signature) is sufficient. Any additional caching may also be implemented inside this function if needed. TimeBox Duration of the Schedule of the gate implementation (in seconds). Can be left unimplemented if the duration e.g. depends on the gate arguments.\nSubclasses can reimplement this method in case it makes sense in their context. float Returns an AC Stark pulse which consists of a modulated I and modulated Q waveform, where the Q quadrature\nhas an additional phase of -pi/2. n_samples ( int ) \u2013 amplitude ( float ) \u2013 phase_increment ( float ) \u2013 phase ( float ) \u2013 IQPulse previous iqm.pulse.gates.rz.get_unitary_rz next RZ_ACStarkShift_CosineRiseFall \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "schedule",
    "url": "/iqm-pulse/api/iqm.pulse.playlist.schedule.html",
    "description": "Instruction schedules for controlling the instruments. Full path: iqm.pulse.playlist.schedule Module Attributes TOLERANCE remove when COMP-1281 is done. Classes Nothing Used to extend a control channe...",
    "content": "Instruction schedules for controlling the instruments. Full path: iqm.pulse.playlist.schedule Module Attributes TOLERANCE remove when COMP-1281 is done. Classes Nothing Used to extend a control channel in time, without blocking it, during scheduling. Schedule Set of synchronously executed AWG/readout programs that start on a single trigger. Segment Sequence of instructions, for a single channel. Inheritance previous playlist next iqm.pulse.playlist.schedule.TOLERANCE \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "iqm.pulse.gate_implementation.OILCalibrationData",
    "url": "/iqm-pulse/api/iqm.pulse.gate_implementation.OILCalibrationData.html",
    "description": "Calibration data for a particular implementation of a particular quantum operation at a particular locus. alias of dict [ str , Any ] previous iqm.pulse.gate_implementation.Locus next iqm.pulse.gate_i...",
    "content": "Calibration data for a particular implementation of a particular quantum operation at a particular locus. alias of dict [ str , Any ] previous iqm.pulse.gate_implementation.Locus next iqm.pulse.gate_implementation.OICalibrationData \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "GateImplementation",
    "url": "/iqm-pulse/api/iqm.pulse.gate_implementation.GateImplementation.html",
    "description": "Bases: ABC ABC for implementing quantum gates and other quantum operations using instruction schedules. There is a separate GateImplementation subclass for every implementation of every operation type...",
    "content": "Bases: ABC ABC for implementing quantum gates and other quantum operations using instruction schedules. There is a separate GateImplementation subclass for every implementation of every operation type.\nEach GateImplementation instance represents a particular locus for that implementation, and encapsulates\nthe calibration data it requires. All GateImplementation subclasses __init__ must have exactly the below arguments in order to be\nusable via ScheduleBuilder.get_implementation() . GateImplementations also have the __call__() method, which takes the operation parameters\n(e.g. rotation angles) as input, and returns a TimeBox instance which implements\nan instance of the operation at that locus. parent ( QuantumOp ) \u2013 Quantum operation this instance implements. name ( str ) \u2013 Name of the implementation provided by this instance. locus ( Locus ) \u2013 Locus the operation acts on. calibration_data ( OILCalibrationData ) \u2013 (Raw) calibration data for the (operation, implementation, locus) represented by this instance builder ( ScheduleBuilder ) \u2013 Schedule builder. Module: iqm.pulse.gate_implementation Attributes parameters Required calibration data, may be nested qualified_name Qualified name of the implementation. special_implementation Set to True if  the implementation is a special purpose implementation that should never get called in ScheduleBuilder.get_implementation unless explicitly requested via the impl_name argument. symmetric True iff the implementation is symmetric in its locus components. Methods build Utility method for constructing a GateImplementation with self.builder . convert_calibration_data Convert time-like items in the calibration data to fractions of the time duration of the gate. duration_in_seconds Duration of the Schedule of the gate implementation (in seconds). get_custom_locus_mapping Get custom locus mapping for this GateImplementation. get_locus_mapping_name Get the name of the locus mapping stored in ScheduleBuilder.ChipTopology for this implementation. get_parameters Calibration data tree the GateImplementation subclass expects for each locus. needs_calibration Whether the implementation needs calibration data to_timebox Wraps the given instruction schedule into an atomic/resolved timebox. True iff the implementation is symmetric in its locus components.\nOnly meaningful if arity != 1 , and the locus components are of the same type. Required calibration data, may be nested Set to True if  the implementation is a special purpose implementation that should never get called in ScheduleBuilder.get_implementation unless explicitly requested via the impl_name argument. Qualified name of the implementation. Whether the implementation needs calibration data Returns True if the calibration dict must contain a node with keyed with\n<operation name>: <implementation name>: <appropriate locus> in order to use this implementation. bool The GateImplementation-specific logic for implementing a quantum operation. Inheriting classes may override this method if the default __call__() caching (based on the args & kwargs\nin the signature) is sufficient. Any additional caching may also be implemented inside this function if needed. TimeBox | list [ TimeBox ] Utility method for constructing a GateImplementation with self.builder . Inheriting classes may override this in order to add additional logic. op_name ( str ) \u2013 operation name locus ( tuple [ str , ... ] ) \u2013 locus the operation acts on impl_name ( str | None ) \u2013 implementation name. Uses the assigned default implementation if not specified. strict_locus ( bool ) \u2013 iff False, for non-symmetric implementations of symmetric ops the locus order may\nbe changed if no calibration data is available for the requested locus order Calibrated gate implementation. GateImplementation Wraps the given instruction schedule into an atomic/resolved timebox. schedule ( Schedule ) \u2013 TimeBox Duration of the Schedule of the gate implementation (in seconds). Can be left unimplemented if the duration e.g. depends on the gate arguments.\nSubclasses can reimplement this method in case it makes sense in their context. float Convert time-like items in the calibration data to fractions of the time duration of the gate. This is a convenience method for converting calibration data items involving time\ndurations measured in seconds into fractions of the duration of the gate. Values of items that are not measured in seconds or Hz are returned as is. Additionally, converts duration to channel samples and adds it in the converted\ncalibration data under the key \"n_samples\" , while the original \"duration\" key is removed. calibration_data ( OILCalibrationData ) \u2013 (subset of) calibration data for the gate/implementation/locus params ( NestedParams ) \u2013 (subset of) cls.parameters specifying the calibration_data items\nto convert and return channel_props ( ChannelProperties ) \u2013 used to convert \"duration\" from seconds into channel samples duration ( float | None ) \u2013 Time duration of the gate, in seconds. If None, calibration_data must have\nan item named \"duration\" , measured in seconds, which will be used instead. converted calibration_data items OILCalibrationData Calibration data tree the GateImplementation subclass expects for each locus. Helper method for EXA use. locus ( Iterable [ str ] ) \u2013 Locus component names to replace the wildcard character \"*\" in the calibration\nparameter names. One Setting will be generated for each component name in locus .\nIf there are no wildcard characters in cls.parameters , this argument has no effect. path ( Iterable [ str ] ) \u2013 parts of the dotted name for the root node, if any. EXA setting node describing the required calibration data for each locus.\nAll the Setting values are None . SettingNode Get the name of the locus mapping stored in ScheduleBuilder.ChipTopology for this implementation. By default, it is \"<operation_name>.<implementation_name>\" . Inheriting classes may\noverride this for different behaviour. operation_name ( str ) \u2013 name of the quantum operation. implementation_name ( str ) \u2013 name of the implementation name of the locus mapping str Get custom locus mapping for this GateImplementation. This method can be used to return the locus mapping (wrt. to the given ChipTopology ) for this GateImplementation . Overriding this method allows a GateImplementation to be \u201cself-sufficient\u201d in the\nsense that it knows its own locus mapping. chip_topology ( ChipTopology ) \u2013 ChipTopology instance in which context to create the custom locus mapping. component_to_channels ( dict [ str , Iterable [ str ] ] ) \u2013 dict mapping QPU component names to an Iterable of channel operation names\navailable for this component (i.e. \u201creadout\u201d, \u201cdrive\u201d, \u201cflux\u201d). This info is often needed\nin building a locus mapping. Custom locus mapping for this GateImplementation or None if the gate implementation has no need for a custom locus mapping, otherwise the returned mapping should be like in ChipTopology.set_locus_mapping() custom locus mapping, otherwise the returned mapping should be like in ChipTopology.set_locus_mapping() dict [ tuple [ str , \u2026] | frozenset [ str ], tuple [ str , \u2026]] | None previous CustomIQWaveforms next SinglePulseGate \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  },
  {
    "package": "iqm-pulse",
    "title": "Block",
    "url": "/iqm-pulse/api/iqm.pulse.playlist.instructions.Block.html",
    "description": "Bases: Instruction Behave strictly as if outputting zero-valued samples for the duration of the instruction. Used to block a control channel during compilation.\nA more strict version of Wait , cannot ...",
    "content": "Bases: Instruction Behave strictly as if outputting zero-valued samples for the duration of the instruction. Used to block a control channel during compilation.\nA more strict version of Wait , cannot be replaced with DD sequences during compilation.\nConverted to a Wait instruction at the end of compilation process. In \u201cTetris\u201d scheduling, several Block instructions can overlap in time, whereas Waits cannot. Module: iqm.pulse.playlist.instructions Attributes duration Time duration of the instruction. Methods duration ( int ) \u2013 previous AcquisitionMethod next ComplexIntegration \u00a9 Copyright 2019-2025, IQM Finland Oy. Last updated on 2025-02-04."
  }
]